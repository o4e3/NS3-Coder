{
  "repo_name": "Gabrielcarvfer/NS3-CMake-project-example",
  "github_url": "https://github.com/Gabrielcarvfer/NS3-CMake-project-example",
  "readme": "# NS3-CMake-project-example\n",
  "examples": [
    {
      "file_path": "examples/dyn_package.cc",
      "code": "// Created by Gabriel Ferreira (@gabrielcarvfer) in 13/03/2018\n\n#include \"ns3/core-module.h\"\n#include \"ns3/point-to-point-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/applications-module.h\"\n#include \"ns3/internet-apps-module.h\"\n#include \"ns3/on-off-helper.h\"\n\nusing namespace ns3;\n\n/***************************************************************\nComece pela linha 156 (fun\u00e7\u00e3o main), e depois volte para c\u00e1.\n****************************************************************/\n\n//In\u00edcio da aplica\u00e7\u00e3o customizada simples\nclass CustomApp : public Application\n{\npublic:\n\n    CustomApp ();\n    virtual ~CustomApp();\n\n    void Setup (Ptr<Socket> socket, Address address, uint32_t packetSize,\n                uint32_t nPackets, DataRate dataRate);\n\n    void SetPacketSize(uint32_t packetSize);\n\nprivate:\n    virtual void StartApplication (void);\n    virtual void StopApplication (void);\n\n    void ScheduleTx (void);\n    void SendPacket (void);\n\n    Ptr<Socket>     m_socket;\n    Address         m_peer;\n    uint32_t        m_packetSize;\n    uint32_t        m_nPackets;\n    DataRate        m_dataRate;\n    EventId         m_sendEvent;\n    bool            m_running;\n    uint32_t        m_packetsSent;\n};\n\n\nCustomApp::CustomApp ()\n        : m_socket (0),\n          m_peer (),\n          m_packetSize (0),\n          m_nPackets (0),\n          m_dataRate (0),\n          m_sendEvent (),\n          m_running (false),\n          m_packetsSent (0)\n{\n}\n\nCustomApp::~CustomApp()\n{\n    m_socket = 0;\n}\nvoid CustomApp::SetPacketSize(uint32_t packetSize)\n{\n    this->m_packetSize = packetSize;\n}\n\n\nvoid\nCustomApp::Setup (Ptr<Socket> socket, Address address, uint32_t packetSize,\n              uint32_t nPackets, DataRate dataRate)\n{\n    m_socket = socket;\n    m_peer = address;\n    m_packetSize = packetSize;\n    m_nPackets = nPackets;\n    m_dataRate = dataRate;\n}\n\nvoid\nCustomApp::StartApplication (void)\n{\n    m_running = true;\n    m_packetsSent = 0;\n    m_socket->Bind ();\n    m_socket->Connect (m_peer);\n    SendPacket ();\n}\n\nvoid\nCustomApp::StopApplication (void)\n{\n    m_running = false;\n\n    if (m_sendEvent.IsRunning ())\n    {\n        Simulator::Cancel (m_sendEvent);\n    }\n\n    if (m_socket)\n    {\n        m_socket->Close ();\n    }\n}\n\nvoid\nCustomApp::SendPacket (void)\n{\n    Ptr<Packet> packet = Create<Packet> (m_packetSize);\n    m_socket->Send (packet);\n\n    if (++m_packetsSent < m_nPackets)\n    {\n        ScheduleTx ();\n    }\n}\n\nvoid\nCustomApp::ScheduleTx (void)\n{\n    if (m_running)\n    {\n        Time tNext (Seconds (m_packetSize * 8 / static_cast<double> (m_dataRate.GetBitRate ())));\n        m_sendEvent = Simulator::Schedule (tNext, &CustomApp::SendPacket, this);\n    }\n}\n//Fim da aplica\u00e7\u00e3o customizada simplificada\n\n//Evento a ser agendado, recebe como par\u00e2metro no qual roda a aplica\u00e7\u00e3o que deve ter o tr\u00e1fego modificado\nstatic void sendPacket(Ptr<Node> node)\n{\n    //Recupera aplica\u00e7\u00e3o rodando no n\u00f3 da rede\n    ApplicationContainer app = node->GetApplication(0);\n\n    //Vari\u00e1veis a serem utilizadas/modificadas\n    unsigned packetSize, changeTrafficInterval;\n\n    //Gera\u00e7\u00e3o dos valores \n    packetSize = rand() % 1024;\n    changeTrafficInterval = rand() % 10;\n    \n    //Acesso ao m\u00e9todo que altera as propriedades da conex\u00e3o, que s\u00e3o ser\u00e3o completamente efetivadas ou na pr\u00f3xima\n    // conex\u00e3o, ou pode cancelar o m_sendEvent da aplica\u00e7\u00e3o, e reagendar para um intervalo diferente de transmiss\u00e3o\n    app.Get(0)->GetObject<CustomApp>()->SetPacketSize(packetSize);\n\n    //Reagenda esse procedimento maroto para modificar o tr\u00e1fego novamente\n    Simulator::Schedule(MilliSeconds(changeTrafficInterval), &sendPacket, node);\n    return;\n}\n\nint\nmain (int argc, char *argv[])\n{\n    //Imprime no console logs de todos os componentes em n\u00edvel de debug\n    LogComponentEnableAll(LOG_LEVEL_DEBUG);\n\n    //Cria estrutura para manipular n\u00f3s da rede\n    NodeContainer nodes;\n\n    //Cria 2 n\u00f3s na rede\n    nodes.Create(2);\n\n    //Cria estrutura para manipular interfaces de rede\n    NetDeviceContainer netDevices;\n\n    //Cria ajudante para configurar e criar interface de rede ponto a ponto\n    PointToPointHelper p2pHelper;\n    \n    //Configure dispositivos da rede ponto a ponto para transmitirem a 50Mbps\n    p2pHelper.SetDeviceAttribute(\"DataRate\", StringValue(\"50Mbps\"));\n    \n    //Instala interfaces de rede ponto a ponto nos n\u00f3s da rede e os guarda na estrutura para futura manipula\u00e7\u00e3o\n    netDevices = p2pHelper.Install(nodes);\n\n    //Exporta tr\u00e1fego de rede para arquivos output-#n\u00f3.pcap\n    p2pHelper.EnablePcapAll(\"output\", true);\n\n    //Cria ajudante para instalar pilha de rede\n    InternetStackHelper internetHelper;\n\n    //Instala pilha de rede IP nos n\u00f3s\n    internetHelper.Install(nodes);\n    \n    //Cria ajudante para dar endere\u00e7os IP\n    Ipv4AddressHelper ipv4h;\n    \n    //Configure endere\u00e7o de base e m\u00e1scara de subrede\n    ipv4h.SetBase (\"192.168.1.0\", \"255.255.255.0\");\n    \n    //D\u00e1 IPs \u00e0s interfaces de rede\n    ipv4h.Assign (netDevices);\n    \n    //Cria estruturas para manipular cliente e servidor\n    ApplicationContainer client, server;\n\n    //Cria aplica\u00e7\u00e3o packet sinker (recebe pacotes e d\u00e1 ack) para o servidor, usando TCP, escutando qualquer endere\u00e7o na porta 80\n    PacketSinkHelper packetSinkHelper(\"ns3::TcpSocketFactory\", InetSocketAddress(Ipv4Address::GetAny(), 80));\n    \n    //Instala aplica\u00e7\u00e3o no servidor\n    server = packetSinkHelper.Install(nodes.Get(1));\n    \n    //Inicia a aplica\u00e7\u00e3o ap\u00f3s 100ms de simula\u00e7\u00e3o\n    server.Start(Seconds(0.1));\n\n    //Cria socket Tcp para cliente\n    Ptr<Socket> ns3TcpSocket = Socket::CreateSocket(nodes.Get(0), TcpSocketFactory::GetTypeId());\n    \n    //Cria inst\u00e2ncia da aplica\u00e7\u00e3o customizada\n    Ptr<CustomApp> app = CreateObject<CustomApp> ();\n    \n    //Cria inst\u00e2ncia com endere\u00e7o e porta do servidor\n    Address serverAddress (InetSocketAddress(Ipv4Address(\"192.168.1.2\"),80));\n    \n    //Configura aplica\u00e7\u00e3o customizada com o endere\u00e7o, pacotes de tamanho 10B, com 100000 pacotes a serem enviados a 50000bps\n    app->Setup(ns3TcpSocket, serverAddress, 10, 100000, 50000);//nodes.Get(1)->GetObject<Ipv4>()->GetAddress(1,0).GetLocal()\n    \n    //Instala aplica\u00e7\u00e3o no n\u00f3 cliente\n    nodes.Get(0)->AddApplication(app);\n    \n    //Inicia a aplica\u00e7\u00e3o ap\u00f3s 100ms de simula\u00e7\u00e3o\n    client.Start(Seconds(0.1));\n\n    //Agenda evento sendPacket (que muda o tamanho dos pacotes, e talvez outras propriedades do tr\u00e1fego)\n    // ap\u00f3s 100ms do in\u00edcio da simula\u00e7\u00e3o\n    Simulator::Schedule(Seconds(0.1), &sendPacket, nodes.Get(0));\n\n    //Roda simula\u00e7\u00e3o por 10 segundos\n    Simulator::Stop(Seconds(10));\n    Simulator::Run ();\n    Simulator::Destroy ();\n}"
    },
    {
      "file_path": "examples/fifth.cc",
      "code": "#include <ns3/core-module.h>\n#include <ns3/point-to-point-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/applications-module.h>\n#include <ns3/wifi-module.h>\n#include <ns3/mobility-module.h>\n\n//Para netanim\n#include <ns3/netanim-module.h>\n#include <ns3/bs-net-device.h>\n#include <ns3/csma-module.h>\n#include <ns3/uan-module.h>\n\nusing namespace ns3;\n\nvoid setup_mobility2(NodeContainer * nodes, std::string mobilityModel, double x, double y, double z, double radius)\n{\n    MobilityHelper mobility;\n\n    Ptr<RandomBoxPositionAllocator> randomPositionAlloc = CreateObject<RandomBoxPositionAllocator> ();\n    Ptr<UniformRandomVariable> xVal = CreateObject<UniformRandomVariable> ();\n    xVal->SetAttribute (\"Min\", DoubleValue (x-radius));\n    xVal->SetAttribute (\"Max\", DoubleValue (x+radius));\n    Ptr<UniformRandomVariable> yVal = CreateObject<UniformRandomVariable> ();\n    yVal->SetAttribute (\"Min\", DoubleValue (y-radius));\n    yVal->SetAttribute (\"Max\", DoubleValue (y+radius));\n    Ptr<UniformRandomVariable> zVal = CreateObject<UniformRandomVariable> ();\n    zVal->SetAttribute (\"Min\", DoubleValue (z));\n    zVal->SetAttribute (\"Max\", DoubleValue (z));\n\n    mobility.SetPositionAllocator(\"ns3::RandomBoxPositionAllocator\",\n                                  \"X\", PointerValue (xVal),\n                                  \"Y\", PointerValue (yVal),\n                                  \"Z\", PointerValue (zVal)\n    );\n    mobility.SetMobilityModel(mobilityModel);\n    mobility.Install(*nodes);\n}\n\n//Simple network setup\nint main()\n{\n\n    std::string outputFolder = \"output/\";\n\n\n    NodeContainer ethernet1, ethernet2;\n    NodeContainer wifi1, wifi2;\n    NodeContainer switch1, switch2;\n    NodeContainer router1, router2;\n    ethernet1.Create(125);\n    ethernet2.Create(125);\n    wifi1.Create(25);\n    wifi2.Create(25);\n    switch1.Create(2);\n    switch2.Create(2);\n    router1.Create(1);\n    router2.Create(1);\n\n    NodeContainer dominio1, dominio2;\n    dominio1.Add(ethernet1);\n    dominio1.Add(wifi1);\n    dominio1.Add(switch1);\n    dominio1.Add(router1);\n    dominio2.Add(ethernet2);\n    dominio2.Add(wifi2);\n    dominio2.Add(switch2);\n    dominio2.Add(router2);\n\n\n\n\n    NodeContainer internet, todosOsNos;\n    internet.Create(10);\n\n\n    setup_mobility2(&dominio1, \"ns3::ConstantPositionMobilityModel\",100,100,0,20);\n    setup_mobility2(&dominio2, \"ns3::ConstantPositionMobilityModel\",500,100,0,20);\n    setup_mobility2(&internet, \"ns3::ConstantPositionMobilityModel\",250,100,0,20);\n\n    todosOsNos.Add(dominio1);\n    todosOsNos.Add(dominio2);\n    todosOsNos.Add(internet);\n\n    NodeContainer nosComCsma1, nosComCsma2;\n    nosComCsma1.Add(ethernet1);\n    nosComCsma2.Add(ethernet2);\n    nosComCsma1.Add(switch1);\n    nosComCsma2.Add(switch2);\n    nosComCsma1.Add(router1);\n    nosComCsma2.Add(router2);\n\n    NodeContainer routers1,routers2;\n    routers1.Add(nosComCsma1.Get(0));\n    routers1.Add(internet.Get(0));\n    routers2.Add(nosComCsma2.Get(0));\n    routers2.Add(internet.Get(9));\n\n\n\n    CsmaHelper csmaHelper;\n\n    NetDeviceContainer csmaInterfaces1, csmaInterfaces2, csmaInterfacesInt, csmaInterfacesRouters;\n    csmaInterfaces1 = csmaHelper.Install(nosComCsma1);\n    csmaInterfaces2 = csmaHelper.Install(nosComCsma2);\n    csmaInterfacesInt = csmaHelper.Install(internet);\n    csmaInterfacesRouters.Add(csmaHelper.Install(routers1));\n    csmaInterfacesRouters.Add(csmaHelper.Install(routers2));\n\n    csmaHelper.EnablePcapAll(\"csma\",true);\n\n\n    InternetStackHelper internetHelper;\n    internetHelper.Install(todosOsNos);\n\n    Ipv4AddressHelper ipv4Helper;\n    ipv4Helper.SetBase(\"192.168.1.0\",\"255.255.255.0\");\n    ipv4Helper.Assign(csmaInterfaces1);\n\n    ipv4Helper.NewNetwork();\n    ipv4Helper.SetBase(\"192.168.2.0\",\"255.255.255.0\");\n    ipv4Helper.Assign(csmaInterfaces2);\n\n    ipv4Helper.NewNetwork();\n    ipv4Helper.SetBase(\"192.168.3.0\",\"255.255.255.0\");\n    ipv4Helper.Assign(csmaInterfacesInt);\n\n    ipv4Helper.NewNetwork();\n    ipv4Helper.SetBase(\"192.168.4.0\",\"255.255.255.0\");\n    ipv4Helper.Assign(csmaInterfacesRouters);\n\n\n    //Configurar aplica\u00e7\u00f5es\n    ApplicationContainer clientApp, serverApp;\n\n    UdpEchoServerHelper echoServerHelper(8080);\n    serverApp = echoServerHelper.Install(ethernet1.Get(29)); //Instala servidor echo em 192.168.1.0 ou 1\n\n    UdpEchoClientHelper echoClientHelper(Ipv4Address(\"192.168.1.30\"),8080);\n    echoClientHelper.SetAttribute(\"Interval\",TimeValue(MilliSeconds(10)));\n    clientApp = echoClientHelper.Install(ethernet2.Get(29)); //Instala cliente echo em 192.168.1.1 ou 2\n\n    serverApp.Start(Seconds(1));\n    serverApp.Stop(Seconds(10));\n    clientApp.Start(Seconds(2));\n    clientApp.Stop(Seconds(9));\n\n    //A partir daqui, tem um servidor escutando na porta 8080 e um cliente mandando mensagens para ela\n    Ipv4GlobalRoutingHelper::PopulateRoutingTables ();\n\n\n    //Exportar anima\u00e7\u00e3o para o Netanim\n    BaseStationNetDevice b;\n    SubscriberStationNetDevice s;\n    CsmaNetDevice c;\n    UanNetDevice u;\n\n    AnimationInterface anim(outputFolder+\"anim2.xml\");\n    //anim.SetMaxPktsPerTraceFile(0xFFFFFFFF);\n    //anim.EnablePacketMetadata(true);\n    //anim.EnableIpv4RouteTracking (outputFolder+\"routingtable-wireless.xml\", Seconds (0), Seconds (9), Seconds (0.25));\n\n    //Rodar o simulador\n    Simulator::Stop(Minutes(2)); // Rodar simula\u00e7\u00e3o por 10 segundos\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}"
    },
    {
      "file_path": "examples/first.cc",
      "code": "#include <ns3/core-module.h>\n#include <ns3/point-to-point-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/applications-module.h>\n\n//Para netanim\n#include <ns3/netanim-module.h>\n#include <ns3/bs-net-device.h>\n#include <ns3/csma-module.h>\n#include <ns3/uan-module.h>\n\nusing namespace ns3;\n\n//Simple network setup\nint main()\n{\n\n    std::string outputFolder = \"output/\";\n    NodeContainer nodes;\n    nodes.Create(2);\n\n    PointToPointHelper pointHelper;\n    pointHelper.SetChannelAttribute(\"Delay\",StringValue(\"5ms\"));\n\n    NetDeviceContainer netInterfaces;\n    netInterfaces = pointHelper.Install(nodes);\n\n    pointHelper.EnablePcapAll(outputFolder+\"pcap\", true);\n    \n    InternetStackHelper internetHelper;\n    internetHelper.Install(nodes);\n\n    Ipv4AddressHelper ipv4Helper;\n    ipv4Helper.SetBase(\"192.168.1.0\",\"255.255.255.0\");\n    ipv4Helper.Assign(netInterfaces);\n\n    //Configurar aplica\u00e7\u00f5es\n    ApplicationContainer clientApp, serverApp;\n\n    UdpEchoServerHelper echoServerHelper(8080);\n    serverApp = echoServerHelper.Install(nodes.Get(0)); //Instala servidor echo em 192.168.1.0 ou 1\n\n    UdpEchoClientHelper echoClientHelper(Ipv4Address(\"192.168.1.0\"),8080);\n    clientApp = echoClientHelper.Install(nodes.Get(1)); //Instala cliente echo em 192.168.1.1 ou 2\n\n    serverApp.Start(Seconds(1));\n    serverApp.Stop(Seconds(10));\n    clientApp.Start(Seconds(2));\n    clientApp.Stop(Seconds(9));\n\n    //A partir daqui, tem um servidor escutando na porta 8080 e um cliente mandando mensagens para ela\n\n\n    //Exportar anima\u00e7\u00e3o para o Netanim\n    BaseStationNetDevice b;\n    SubscriberStationNetDevice s;\n    CsmaNetDevice c;\n    UanNetDevice u;\n\n    AnimationInterface anim(outputFolder+\"anim2.xml\");\n    anim.SetMaxPktsPerTraceFile(0xFFFFFFFF);\n    anim.EnablePacketMetadata(true);\n    anim.EnableIpv4RouteTracking (outputFolder+\"routingtable-wireless.xml\", Seconds (0), Seconds (9), Seconds (0.25));\n\n    //Rodar o simulador\n    Simulator::Stop(Seconds(10)); // Rodar simula\u00e7\u00e3o por 10 segundos\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}"
    },
    {
      "file_path": "examples/fourth.cc",
      "code": "#include <ns3/core-module.h>\n#include <ns3/point-to-point-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/applications-module.h>\n\n#include \"ns3/olsr-helper.h\"\n\n#include <ns3/netanim-module.h>\n#include <ns3/bs-net-device.h>\n#include <ns3/csma-module.h>\n#include <ns3/uan-module.h>\nusing namespace ns3;\n\n//Static routing example\nint main()\n{\n    //LogComponentEnable (\"UdpEchoClientApplication\", LOG_LEVEL_ALL);\n    //LogComponentEnable (\"UdpEchoServerApplication\", LOG_LEVEL_ALL);\n    //LogComponentEnable(\"LiIonEnergySource\", LOG_LEVEL_DEBUG);\n    //LogComponentEnableAll(LOG_LEVEL_DEBUG);\n\n    std::string outputFolder = \"output/\";\n    NodeContainer nodes, nodesRede1, nodesRede2;\n    nodes.Create(6);\n    nodesRede1.Add(nodes.Get(0));\n    nodesRede1.Add(nodes.Get(1));\n    nodesRede1.Add(nodes.Get(2));\n\n    nodesRede2.Add(nodes.Get(3));\n    nodesRede2.Add(nodes.Get(4));\n    nodesRede2.Add(nodes.Get(5));\n\n    InternetStackHelper internetHelper;\n    internetHelper.Install(nodes);\n    internetHelper.EnablePcapIpv4All(outputFolder+\"pcap\");\n\n    NetDeviceContainer netInterfaces, netInterfacesRede1, netInterfacesRede2, netInterfacesRede3;\n    PointToPointHelper pointHelper;\n    pointHelper.SetChannelAttribute(\"Delay\",StringValue(\"5ms\"));\n    //Cria conex\u00f5es f\u00edsicas entre os dois n\u00f3s do primeiro container ( roteador = nodes(1) = nodesRede1.Get(1) )\n    netInterfacesRede1.Add(pointHelper.Install(nodesRede1.Get(0), nodesRede1.Get(1)));\n    netInterfacesRede1.Add(pointHelper.Install(nodesRede1.Get(0), nodesRede1.Get(2)));\n\n    //Cria conex\u00f5es f\u00edsicas entre os dois n\u00f3s do segundo container ( roteador = nodes(1) = nodesRede2.Get(0) )\n    netInterfacesRede2.Add(pointHelper.Install(nodesRede1.Get(0), nodesRede2.Get(0)));\n\n    //Cria conex\u00f5es f\u00edsicas entre os dois n\u00f3s do segundo container ( roteador = nodes(2) = nodesRede3.Get(0) )\n\n    netInterfacesRede3.Add(pointHelper.Install(nodesRede2.Get(0), nodesRede2.Get(1)));\n    netInterfacesRede3.Add(pointHelper.Install(nodesRede2.Get(0), nodesRede2.Get(2)));\n\n    pointHelper.EnablePcapAll(outputFolder+\"pcap\", true);\n\n    Ipv4InterfaceContainer interfaceRede1, interfaceRede2, interfaceRede3;\n    Ipv4AddressHelper ipv4Helper;\n    ipv4Helper.SetBase(\"192.168.1.0\",\"255.255.255.0\");\n    interfaceRede1 = ipv4Helper.Assign(netInterfacesRede1);\n    ipv4Helper.NewNetwork();\n\n    ipv4Helper.SetBase(\"192.168.2.0\",\"255.255.255.0\");\n    interfaceRede2 = ipv4Helper.Assign(netInterfacesRede2);\n    ipv4Helper.NewNetwork();\n\n    ipv4Helper.SetBase(\"192.168.3.0\",\"255.255.255.0\");\n    interfaceRede3 = ipv4Helper.Assign(netInterfacesRede3);\n    ipv4Helper.NewNetwork();\n\n    Ipv4GlobalRoutingHelper::PopulateRoutingTables ();\n\n    //Configurar aplica\u00e7\u00f5es\n    ApplicationContainer clientApp, serverApp;\n\n    UdpEchoServerHelper echoServerHelper(8080);\n    serverApp = echoServerHelper.Install(nodesRede1.Get(2)); //Instala servidor echo em 192.168.1.0 ou 1\n\n    UdpEchoClientHelper echoClientHelper(nodesRede1.Get(2)->GetObject<Ipv4>()->GetAddress(1,0).GetLocal(),8080);\n    clientApp = echoClientHelper.Install(nodesRede2.Get(2)); //Instala cliente echo em 192.168.1.1 ou 2\n\n    serverApp.Start(Seconds(1));\n    serverApp.Stop(Seconds(50));\n    clientApp.Start(Seconds(2));\n    clientApp.Stop(Seconds(49));\n\n    //A partir daqui, tem um servidor escutando na porta 8080 e um cliente mandando mensagens para ela\n\n\n    //Exportar simula\u00e7\u00e3o para netanim\n    BaseStationNetDevice b;\n    SubscriberStationNetDevice s;\n    CsmaNetDevice c;\n    UanNetDevice u;\n\n    AnimationInterface anim(outputFolder+\"anim2.xml\");\n    anim.SetMaxPktsPerTraceFile(0xFFFFFFFF);\n    anim.EnablePacketMetadata(true);\n    anim.EnableIpv4RouteTracking (outputFolder+\"routingtable-wireless.xml\", Seconds (0), Seconds (9), Seconds (0.25));\n\n    //Executar simula\u00e7\u00e3o por 10 segundos e depois destruir\n    Simulator::Stop(Seconds(50));\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}"
    },
    {
      "file_path": "examples/lte_first.cc",
      "code": "//\n// Created by gabriel on 1/30/18.\n//\n\n#include <ns3/core-module.h>\n#include <ns3/lte-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/mobility-module.h>\n\n//Para netanim\n#include <ns3/netanim-module.h>\n#include <ns3/bs-net-device.h>\n#include <ns3/csma-module.h>\n#include <ns3/uan-module.h>\n\nusing namespace ns3;\n\n//Simple network setup\nint main()\n{\n    //Create network nodes and containers\n    NodeContainer UEnodes, eNBnodes;\n    UEnodes.Create(2);\n    eNBnodes.Create(1);\n\n    //Set mobility models of nodes\n    MobilityHelper mobilityHelper;\n    mobilityHelper.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n    mobilityHelper.Install(eNBnodes);\n\n    mobilityHelper.SetMobilityModel(\"ns3::RandomWalk2dMobilityModel\");\n    mobilityHelper.Install(UEnodes);\n\n    //Setup LTE\n    Ptr<LteHelper> lteHelper = CreateObject<LteHelper>();\n\n    //Install configured LTE\n    NetDeviceContainer UEnetInterfaces, eNBnetInterfaces;\n    eNBnetInterfaces = lteHelper->InstallEnbDevice(eNBnodes);\n    UEnetInterfaces  = lteHelper->InstallUeDevice(UEnodes);\n\n    //Attach UE to eNB\n    lteHelper->Attach(UEnetInterfaces, eNBnetInterfaces.Get(0));\n\n    //Activate a data radio bearer\n    enum EpsBearer::Qci q = EpsBearer::GBR_CONV_VOICE;\n    EpsBearer bearer(q);\n    lteHelper->ActivateDataRadioBearer(UEnetInterfaces, bearer);\n    //lteHelper->EnableTraces(); //Needs fix\n\n    //Exportar anima\u00e7\u00e3o para o Netanim\n    BaseStationNetDevice b;\n    SubscriberStationNetDevice s;\n    CsmaNetDevice c;\n    UanNetDevice u;\n\n    AnimationInterface anim(\"anim.xml\");\n    anim.SetMaxPktsPerTraceFile(0xFFFFFFFF);\n    anim.EnablePacketMetadata(true);\n\n    //Rodar o simulador\n    Simulator::Stop(Seconds(1)); // Rodar simula\u00e7\u00e3o por 10 segundos\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}"
    },
    {
      "file_path": "examples/lte_second.cc",
      "code": "//\n// Created by gabriel on 1/30/18.\n//\n\n#include <ns3/core-module.h>\n#include <ns3/lte-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/mobility-module.h>\n#include <ns3/applications-module.h>\n\n//Para netanim\n#include <ns3/netanim-module.h>\n#include <ns3/bs-net-device.h>\n#include <ns3/csma-module.h>\n#include <ns3/uan-module.h>\n#include <ns3/point-to-point-module.h>\n\nusing namespace ns3;\n\n//Simple network setup\nint main()\n{\n    uint16_t numberOfNodes = 2;\n    double simTime = 1.1;\n    double distance = 60.0;\n    double interPacketInterval = 100;\n\n\n    Ptr<LteHelper> lteHelper = CreateObject<LteHelper> ();\n    Ptr<PointToPointEpcHelper>  epcHelper = CreateObject<PointToPointEpcHelper> ();\n    lteHelper->SetEpcHelper (epcHelper);\n    Ptr<Node> pgw = epcHelper->GetPgwNode ();\n\n    // Create a single RemoteHost\n    NodeContainer remoteHostContainer;\n    remoteHostContainer.Create (1);\n    Ptr<Node> remoteHost = remoteHostContainer.Get (0);\n    InternetStackHelper internet;\n    internet.Install (remoteHostContainer);\n\n    // Create the Internet\n    PointToPointHelper p2ph;\n    p2ph.SetDeviceAttribute (\"DataRate\", DataRateValue (DataRate (\"100Gb/s\")));\n    p2ph.SetDeviceAttribute (\"Mtu\", UintegerValue (1500));\n    p2ph.SetChannelAttribute (\"Delay\", TimeValue (Seconds (0.010)));\n    NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);\n    Ipv4AddressHelper ipv4h;\n    ipv4h.SetBase (\"1.0.0.0\", \"255.0.0.0\");\n    Ipv4InterfaceContainer internetIpIfaces = ipv4h.Assign (internetDevices);\n    // interface 0 is localhost, 1 is the p2p device\n    Ipv4Address remoteHostAddr = internetIpIfaces.GetAddress (1);\n\n    Ipv4StaticRoutingHelper ipv4RoutingHelper;\n    Ptr<Ipv4StaticRouting> remoteHostStaticRouting = ipv4RoutingHelper.GetStaticRouting (remoteHost->GetObject<Ipv4> ());\n    remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address (\"7.0.0.0\"), Ipv4Mask (\"255.0.0.0\"), 1);\n\n    NodeContainer ueNodes;\n    NodeContainer enbNodes;\n    enbNodes.Create(numberOfNodes);\n    ueNodes.Create(numberOfNodes);\n\n    // Install Mobility Model\n    Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();\n    for (uint16_t i = 0; i < numberOfNodes; i++)\n    {\n        positionAlloc->Add (Vector(distance * i, 0, 0));\n    }\n    MobilityHelper mobility;\n    mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n    mobility.SetPositionAllocator(positionAlloc);\n    mobility.Install(enbNodes);\n    mobility.Install(ueNodes);\n\n    // Install LTE Devices to the nodes\n    NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);\n    NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);\n\n    // Install the IP stack on the UEs\n    internet.Install (ueNodes);\n    Ipv4InterfaceContainer ueIpIface;\n    ueIpIface = epcHelper->AssignUeIpv4Address (NetDeviceContainer (ueLteDevs));\n    // Assign IP address to UEs, and install applications\n    for (uint32_t u = 0; u < ueNodes.GetN (); ++u)\n    {\n        Ptr<Node> ueNode = ueNodes.Get (u);\n        // Set the default gateway for the UE\n        Ptr<Ipv4StaticRouting> ueStaticRouting = ipv4RoutingHelper.GetStaticRouting (ueNode->GetObject<Ipv4> ());\n        ueStaticRouting->SetDefaultRoute (epcHelper->GetUeDefaultGatewayAddress (), 1);\n    }\n\n    // Attach one UE per eNodeB\n    for (uint16_t i = 0; i < numberOfNodes; i++)\n    {\n        lteHelper->Attach (ueLteDevs.Get(i), enbLteDevs.Get(i));\n        // side effect: the default EPS bearer will be activated\n    }\n\n\n    // Install and start applications on UEs and remote host\n    uint16_t dlPort = 1234;\n    uint16_t ulPort = 2000;\n    uint16_t otherPort = 3000;\n    ApplicationContainer clientApps;\n    ApplicationContainer serverApps;\n    for (uint32_t u = 0; u < ueNodes.GetN (); ++u)\n    {\n        ++ulPort;\n        ++otherPort;\n        PacketSinkHelper dlPacketSinkHelper (\"ns3::UdpSocketFactory\", InetSocketAddress (Ipv4Address::GetAny (), dlPort));\n        PacketSinkHelper ulPacketSinkHelper (\"ns3::UdpSocketFactory\", InetSocketAddress (Ipv4Address::GetAny (), ulPort));\n        PacketSinkHelper packetSinkHelper (\"ns3::UdpSocketFactory\", InetSocketAddress (Ipv4Address::GetAny (), otherPort));\n        serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get(u)));\n        serverApps.Add (ulPacketSinkHelper.Install (remoteHost));\n        serverApps.Add (packetSinkHelper.Install (ueNodes.Get(u)));\n\n        UdpClientHelper dlClient (ueIpIface.GetAddress (u), dlPort);\n        dlClient.SetAttribute (\"Interval\", TimeValue (MilliSeconds(interPacketInterval)));\n        dlClient.SetAttribute (\"MaxPackets\", UintegerValue(1000000));\n\n        UdpClientHelper ulClient (remoteHostAddr, ulPort);\n        ulClient.SetAttribute (\"Interval\", TimeValue (MilliSeconds(interPacketInterval)));\n        ulClient.SetAttribute (\"MaxPackets\", UintegerValue(1000000));\n\n        UdpClientHelper client (ueIpIface.GetAddress (u), otherPort);\n        client.SetAttribute (\"Interval\", TimeValue (MilliSeconds(interPacketInterval)));\n        client.SetAttribute (\"MaxPackets\", UintegerValue(1000000));\n\n        clientApps.Add (dlClient.Install (remoteHost));\n        clientApps.Add (ulClient.Install (ueNodes.Get(u)));\n        if (u+1 < ueNodes.GetN ())\n        {\n            clientApps.Add (client.Install (ueNodes.Get(u+1)));\n        }\n        else\n        {\n            clientApps.Add (client.Install (ueNodes.Get(0)));\n        }\n    }\n    serverApps.Start (Seconds (0.01));\n    clientApps.Start (Seconds (0.01));\n    lteHelper->EnableTraces ();\n    // Uncomment to enable PCAP tracing\n    //p2ph.EnablePcapAll(\"lena-epc-first\");\n\n    //Exportar anima\u00e7\u00e3o para o Netanim\n    BaseStationNetDevice b;\n    SubscriberStationNetDevice s;\n    CsmaNetDevice c;\n    UanNetDevice u;\n\n    AnimationInterface anim(\"anim.xml\");\n    anim.SetMaxPktsPerTraceFile(0xFFFFFFFF);\n    anim.EnablePacketMetadata(true);\n    //anim.EnableIpv4RouteTracking (outputFolder+\"routingtable-wireless.xml\", Seconds (0), Seconds (9), Seconds (0.25));\n\n    //Rodar o simulador\n    Simulator::Stop(Seconds(1)); // Rodar simula\u00e7\u00e3o por 10 segundos\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}"
    },
    {
      "file_path": "examples/poc_scenario_1.cc",
      "code": "//\n// Created by Gabriel Ferreira (@gabrielcarvfer) on 21/03/2018.\n//\n\n/*\n *\n * In this scenario, we have a single UE and eNB,\n *  also linked by a p2p connection, which the UE\n *  uses to transmit sensing data to the eNB\n *\n */\n\n#include <ns3/core-module.h>\n#include <ns3/lte-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/mobility-module.h>\n#include <ns3/applications-module.h>\n\n//Para netanim\n#include <ns3/netanim-module.h>\n#include <ns3/bs-net-device.h>\n#include <ns3/csma-module.h>\n#include <ns3/uan-module.h>\n#include <ns3/point-to-point-module.h>\n\nusing namespace ns3;\n\n//Simple network setup\nint main()\n{\n    uint16_t numberOfNodes = 1;\n    double simTime = 1.1;\n    double distance = 60.0;\n    double interPacketInterval = 100;\n\n\n    Ptr<LteHelper> lteHelper = CreateObject<LteHelper> ();\n    Ptr<PointToPointEpcHelper>  epcHelper = CreateObject<PointToPointEpcHelper> ();\n    lteHelper->SetEpcHelper (epcHelper);\n    Ptr<Node> pgw = epcHelper->GetPgwNode ();\n\n    // Create a single RemoteHost\n    NodeContainer remoteHostContainer;\n    remoteHostContainer.Create (1);\n    Ptr<Node> remoteHost = remoteHostContainer.Get (0);\n    InternetStackHelper internet;\n    internet.Install (remoteHostContainer);\n\n    // Create the Internet\n    PointToPointHelper p2ph;\n    p2ph.SetDeviceAttribute (\"DataRate\", DataRateValue (DataRate (\"100Gb/s\")));\n    p2ph.SetDeviceAttribute (\"Mtu\", UintegerValue (1500));\n    p2ph.SetChannelAttribute (\"Delay\", TimeValue (Seconds (0.010)));\n    NetDeviceContainer internetDevices = p2ph.Install (pgw, remoteHost);\n    Ipv4AddressHelper ipv4h;\n    ipv4h.SetBase (\"1.0.0.0\", \"255.0.0.0\");\n    Ipv4InterfaceContainer internetIpIfaces = ipv4h.Assign (internetDevices);\n    // interface 0 is localhost, 1 is the p2p device\n    Ipv4Address remoteHostAddr = internetIpIfaces.GetAddress (1);\n\n    Ipv4StaticRoutingHelper ipv4RoutingHelper;\n    Ptr<Ipv4StaticRouting> remoteHostStaticRouting = ipv4RoutingHelper.GetStaticRouting (remoteHost->GetObject<Ipv4> ());\n    remoteHostStaticRouting->AddNetworkRouteTo (Ipv4Address (\"7.0.0.0\"), Ipv4Mask (\"255.0.0.0\"), 1);\n\n    NodeContainer ueNodes;\n    NodeContainer enbNodes;\n    enbNodes.Create(numberOfNodes);\n    ueNodes.Create(numberOfNodes);\n\n    // Install Mobility Model\n    Ptr<ListPositionAllocator> positionAlloc = CreateObject<ListPositionAllocator> ();\n    for (uint16_t i = 0; i < numberOfNodes; i++)\n    {\n        positionAlloc->Add (Vector(distance * i, 0, 0));\n    }\n    MobilityHelper mobility;\n    mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n    mobility.SetPositionAllocator(positionAlloc);\n    mobility.Install(enbNodes);\n    mobility.Install(ueNodes);\n\n    // Install LTE Devices to the nodes\n    NetDeviceContainer enbLteDevs = lteHelper->InstallEnbDevice (enbNodes);\n    NetDeviceContainer ueLteDevs = lteHelper->InstallUeDevice (ueNodes);\n\n    // Install the IP stack on the UEs\n    internet.Install (ueNodes);\n    Ipv4InterfaceContainer ueIpIface;\n    ueIpIface = epcHelper->AssignUeIpv4Address (NetDeviceContainer (ueLteDevs));\n    // Assign IP address to UEs, and install applications\n    for (uint32_t u = 0; u < ueNodes.GetN (); ++u)\n    {\n        Ptr<Node> ueNode = ueNodes.Get (u);\n        // Set the default gateway for the UE\n        Ptr<Ipv4StaticRouting> ueStaticRouting = ipv4RoutingHelper.GetStaticRouting (ueNode->GetObject<Ipv4> ());\n        ueStaticRouting->SetDefaultRoute (epcHelper->GetUeDefaultGatewayAddress (), 1);\n    }\n\n    // Attach one UE per eNodeB\n    for (uint16_t i = 0; i < numberOfNodes; i++)\n    {\n        lteHelper->Attach (ueLteDevs.Get(i), enbLteDevs.Get(i));\n        // side effect: the default EPS bearer will be activated\n    }\n\n\n    // Install and start applications on UEs and remote host\n    uint16_t dlPort = 1234;\n    uint16_t ulPort = 2000;\n    uint16_t otherPort = 3000;\n    ApplicationContainer clientApps;\n    ApplicationContainer serverApps;\n    for (uint32_t u = 0; u < ueNodes.GetN (); ++u)\n    {\n        ++ulPort;\n        ++otherPort;\n        PacketSinkHelper dlPacketSinkHelper (\"ns3::UdpSocketFactory\", InetSocketAddress (Ipv4Address::GetAny (), dlPort));\n        PacketSinkHelper ulPacketSinkHelper (\"ns3::UdpSocketFactory\", InetSocketAddress (Ipv4Address::GetAny (), ulPort));\n        PacketSinkHelper packetSinkHelper (\"ns3::UdpSocketFactory\", InetSocketAddress (Ipv4Address::GetAny (), otherPort));\n        serverApps.Add (dlPacketSinkHelper.Install (ueNodes.Get(u)));\n        serverApps.Add (ulPacketSinkHelper.Install (remoteHost));\n        serverApps.Add (packetSinkHelper.Install (ueNodes.Get(u)));\n\n        UdpClientHelper dlClient (ueIpIface.GetAddress (u), dlPort);\n        dlClient.SetAttribute (\"Interval\", TimeValue (MilliSeconds(interPacketInterval)));\n        dlClient.SetAttribute (\"MaxPackets\", UintegerValue(1000000));\n\n        UdpClientHelper ulClient (remoteHostAddr, ulPort);\n        ulClient.SetAttribute (\"Interval\", TimeValue (MilliSeconds(interPacketInterval)));\n        ulClient.SetAttribute (\"MaxPackets\", UintegerValue(1000000));\n\n        UdpClientHelper client (ueIpIface.GetAddress (u), otherPort);\n        client.SetAttribute (\"Interval\", TimeValue (MilliSeconds(interPacketInterval)));\n        client.SetAttribute (\"MaxPackets\", UintegerValue(1000000));\n\n        clientApps.Add (dlClient.Install (remoteHost));\n        clientApps.Add (ulClient.Install (ueNodes.Get(u)));\n        if (u+1 < ueNodes.GetN ())\n        {\n            clientApps.Add (client.Install (ueNodes.Get(u+1)));\n        }\n        else\n        {\n            clientApps.Add (client.Install (ueNodes.Get(0)));\n        }\n    }\n    serverApps.Start (Seconds (0.01));\n    clientApps.Start (Seconds (0.01));\n    lteHelper->EnableTraces ();\n    // Uncomment to enable PCAP tracing\n    //p2ph.EnablePcapAll(\"lena-epc-first\");\n\n\n\n/**************************************************/\n\n    //Setup of P2P link between the eNB and UEs\n    PointToPointHelper p2pHelper;\n    p2pHelper.SetDeviceAttribute(\"DataRate\", StringValue(\"50Mbps\"));\n\n\n    NodeContainer p2pNodes;\n    p2pNodes.Add(enbNodes);\n    p2pNodes.Add(ueNodes);\n\n    NetDeviceContainer p2pDevices;\n\n    p2pDevices = p2pHelper.Install(p2pNodes);\n\n    ipv4h.NewNetwork();\n    ipv4h.SetBase (\"2.0.0.0\", \"255.255.255.0\");\n\n    Ipv4InterfaceContainer p2pIpIfaces;\n    p2pIpIfaces =  ipv4h.Assign(p2pDevices);\n\n    ApplicationContainer p2pServer;\n    ApplicationContainer p2pClient;\n\n    UdpEchoServerHelper serverHelper(80);\n    p2pServer = serverHelper.Install(p2pNodes.Get(0));\n\n    UdpEchoClientHelper clientHelper (Address(Ipv4Address(\"2.0.0.1\")),80);\n    clientHelper.SetAttribute(\"MaxPackets\", UintegerValue(10000));\n    clientHelper.SetAttribute(\"Interval\", TimeValue(MilliSeconds(5)));\n    clientHelper.SetAttribute(\"PacketSize\", UintegerValue(1024));\n    p2pClient = clientHelper.Install(p2pNodes.Get(1));\n\n    p2pServer.Start(Seconds(0.1));\n    p2pClient.Start(Seconds(0.1));\n\n    p2pServer.Stop(Seconds(1));\n    p2pClient.Stop(Seconds(1));\n\n    p2pHelper.EnablePcapAll(\"p2p\");\n\n/***************************************************/\n\n    //Exportar anima\u00e7\u00e3o para o Netanim\n    BaseStationNetDevice b;\n    SubscriberStationNetDevice s;\n    CsmaNetDevice c;\n    UanNetDevice u;\n\n    AnimationInterface anim(\"anim.xml\");\n    anim.SetMaxPktsPerTraceFile(0xFFFFFFFF);\n    anim.EnablePacketMetadata(true);\n    //anim.EnableIpv4RouteTracking (outputFolder+\"routingtable-wireless.xml\", Seconds (0), Seconds (9), Seconds (0.25));\n\n    //Rodar o simulador\n    Simulator::Stop(Seconds(1)); // Rodar simula\u00e7\u00e3o por 10 segundos\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}"
    },
    {
      "file_path": "examples/second.cc",
      "code": "#include <ns3/core-module.h>\n#include <ns3/point-to-point-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/applications-module.h>\n\n#include \"ns3/olsr-helper.h\"\n\n#include <ns3/netanim-module.h>\n#include <ns3/bs-net-device.h>\n#include <ns3/csma-module.h>\n#include <ns3/uan-module.h>\nusing namespace ns3;\n\n//Network setup with OSLR\nint main()\n{\n    //LogComponentEnable (\"UdpEchoClientApplication\", LOG_LEVEL_ALL);\n    //LogComponentEnable (\"UdpEchoServerApplication\", LOG_LEVEL_ALL);\n    //LogComponentEnable(\"LiIonEnergySource\", LOG_LEVEL_DEBUG);\n    //LogComponentEnableAll(LOG_LEVEL_DEBUG);\n\n    std::string outputFolder = \"output/\";\n\n    //Cria 3 containers: um contendo todos os n\u00f3s, outros dois contendo um n\u00f3 folha e um n\u00f3 raiz, sendo o n\u00f3 raiz o roteador\n    NodeContainer nodes, nodesRede1, nodesRede2;\n    nodes.Create(3);\n    nodesRede1.Add(nodes.Get(0));\n    nodesRede1.Add(nodes.Get(1));\n    nodesRede2.Add(nodes.Get(1));\n    nodesRede2.Add(nodes.Get(2));\n\n    //Inicializa protocolos de roteamento\n    Ipv4StaticRoutingHelper staticRouting;\n    OlsrHelper olsrRouting;\n\n    //Configura os protocolos de roteamento\n    Ipv4ListRoutingHelper routeHelper;\n    routeHelper.Add(staticRouting, 0);\n    routeHelper.Add(olsrRouting, 10);\n\n    //Configura a pilha de rede para suportar os protocolos de roteamento e instala a pilha de rede em todos os n\u00f3s\n    InternetStackHelper internetHelper;\n    internetHelper.SetRoutingHelper(routeHelper);\n    internetHelper.Install(nodes);\n    internetHelper.EnablePcapIpv4All(outputFolder+\"pcap\");\n\n    NetDeviceContainer netInterfaces, netInterfacesRede1, netInterfacesRede2;\n    PointToPointHelper pointHelper;\n    pointHelper.SetChannelAttribute(\"Delay\",StringValue(\"5ms\"));\n\n    //Cria conex\u00f5es f\u00edsicas entre os dois n\u00f3s do primeiro container ( roteador = nodes(1) = nodesRede1.Get(1) )\n    netInterfacesRede1 = pointHelper.Install(nodesRede1.Get(1),nodesRede1.Get(0));\n\n    //Cria conex\u00f5es f\u00edsicas entre os dois n\u00f3s do segundo container ( roteador = nodes(1) = nodesRede2.Get(0) )\n    netInterfacesRede2 = pointHelper.Install(nodesRede2.Get(0),nodesRede2.Get(1));\n\n    //Output de todos point-to-point para pcap\n    pointHelper.EnablePcapAll(outputFolder+\"pcap\", true);\n\n    Ipv4InterfaceContainer interfaceRede1, interfaceRede2;\n    Ipv4AddressHelper ipv4Helper;\n\n    //Configura endere\u00e7os de rede das interfaces de rede do primeiro container\n    ipv4Helper.SetBase(\"192.168.1.0\",\"255.255.255.0\");\n    interfaceRede1 = ipv4Helper.Assign(netInterfacesRede1);\n    ipv4Helper.NewNetwork();\n\n    //Configura endere\u00e7os de rede das interfaces de rede do segundo container\n    ipv4Helper.SetBase(\"192.168.2.0\",\"255.255.255.0\");\n    interfaceRede2 = ipv4Helper.Assign(netInterfacesRede2);\n    ipv4Helper.NewNetwork();\n\n\n    //Configurar aplica\u00e7\u00f5es\n    ApplicationContainer clientApp, serverApp;\n\n    UdpEchoServerHelper echoServerHelper(8080);\n    serverApp = echoServerHelper.Install(nodesRede1.Get(0)); //Instala servidor echo em 192.168.1.0 ou 1\n\n    UdpEchoClientHelper echoClientHelper(nodesRede1.Get(0)->GetObject<Ipv4>()->GetAddress(1,0).GetLocal(),8080);\n    clientApp = echoClientHelper.Install(nodesRede2.Get(1)); //Instala cliente echo em 192.168.1.1 ou 2\n\n    serverApp.Start(Seconds(1));\n    serverApp.Stop(Seconds(10));\n    clientApp.Start(Seconds(2));\n    clientApp.Stop(Seconds(9));\n\n    //A partir daqui, tem um servidor escutando na porta 8080 e um cliente mandando mensagens para ela\n\n\n    //Exportar simula\u00e7\u00e3o para netanim\n    BaseStationNetDevice b;\n    SubscriberStationNetDevice s;\n    CsmaNetDevice c;\n    UanNetDevice u;\n\n    AnimationInterface anim(outputFolder+\"anim2.xml\");\n    anim.SetMaxPktsPerTraceFile(0xFFFFFFFF);\n    anim.EnablePacketMetadata(true);\n    anim.EnableIpv4RouteTracking (outputFolder+\"routingtable-wireless.xml\", Seconds (0), Seconds (9), Seconds (0.25));\n\n    //Executar simula\u00e7\u00e3o por 10 segundos e depois destruir\n    Simulator::Stop(Seconds(10));\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}"
    },
    {
      "file_path": "examples/sixth.cc",
      "code": "#include <ns3/core-module.h>\n#include <ns3/point-to-point-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/applications-module.h>\n#include <ns3/wifi-module.h>\n#include <ns3/mobility-module.h>\n#include <ns3/csma-layout-module.h>\n\n//Para netanim\n#include <ns3/netanim-module.h>\n#include <ns3/bs-net-device.h>\n#include <ns3/csma-module.h>\n#include <ns3/uan-module.h>\n\nusing namespace ns3;\n\nvoid setup_mobility2(NodeContainer * nodes, std::string mobilityModel, double x, double y, double z, double radius)\n{\n    MobilityHelper mobility;\n\n    Ptr<RandomBoxPositionAllocator> randomPositionAlloc = CreateObject<RandomBoxPositionAllocator> ();\n    Ptr<UniformRandomVariable> xVal = CreateObject<UniformRandomVariable> ();\n    xVal->SetAttribute (\"Min\", DoubleValue (x-radius));\n    xVal->SetAttribute (\"Max\", DoubleValue (x+radius));\n    Ptr<UniformRandomVariable> yVal = CreateObject<UniformRandomVariable> ();\n    yVal->SetAttribute (\"Min\", DoubleValue (y-radius));\n    yVal->SetAttribute (\"Max\", DoubleValue (y+radius));\n    Ptr<UniformRandomVariable> zVal = CreateObject<UniformRandomVariable> ();\n    zVal->SetAttribute (\"Min\", DoubleValue (z));\n    zVal->SetAttribute (\"Max\", DoubleValue (z));\n\n    mobility.SetPositionAllocator(\"ns3::RandomBoxPositionAllocator\",\n                                  \"X\", PointerValue (xVal),\n                                  \"Y\", PointerValue (yVal),\n                                  \"Z\", PointerValue (zVal)\n    );\n    mobility.SetMobilityModel(mobilityModel);\n    mobility.Install(*nodes);\n}\n\n//Simple network setup\nint main()\n{\n\n    std::string outputFolder = \"output/\";\n\n    NodeContainer internet;\n    internet.Create(10);\n    NetDeviceContainer internetDev;\n    CsmaHelper csmaHelper;\n\n\n    for (unsigned i = 0; i < 9; i++)\n        for (unsigned j = 1; j < 10; j++) {\n            if (i == j)\n                continue;\n            NodeContainer umContainer;\n            umContainer.Add(internet.Get(i));\n            umContainer.Add(internet.Get(j));\n            internetDev.Add(csmaHelper.Install(umContainer));\n        }\n\n\n    //Cria 5 subredes para cada dominio\n    NodeContainer subredesLan1[5];\n    NodeContainer subredesLan2[5];\n    NetDeviceContainer subredesLan1Dev[5];\n    NetDeviceContainer subredesLan2Dev[5];\n\n    NodeContainer router1, router2;\n    NodeContainer switches1, switches2;\n    router1.Create(1);\n    router2.Create(2);\n    switches1.Add(router1);\n    switches2.Add(router2);\n\n\n    //Cria 6 nos por subrede para cada dominio\n    for (unsigned i = 0; i<5; i++)\n    {\n        subredesLan1[i].Create(6);\n        subredesLan2[i].Create(6);\n\n        subredesLan1Dev[i] = csmaHelper.Install(subredesLan1[i]);\n        subredesLan2Dev[i] = csmaHelper.Install(subredesLan2[i]);\n\n        switches1.Add(subredesLan1[i].Get(0));\n        switches2.Add(subredesLan2[i].Get(0));\n    }\n\n    NetDeviceContainer switches1Dev, switches2Dev;\n    for (unsigned i = 1 ; i < 5; i++)\n    {\n\n        NodeContainer umContainer;\n        umContainer.Add(switches1.Get(0));\n        umContainer.Add(switches1.Get(i));\n        NodeContainer outroContainer;\n\n        outroContainer.Add(switches2.Get(0));\n        outroContainer.Add(switches2.Get(i));\n        switches1Dev.Add(csmaHelper.Install(umContainer));\n        switches2Dev.Add(csmaHelper.Install(outroContainer));\n    }\n\n    NetDeviceContainer DominioWanDev;\n\n    NodeContainer umContainer;\n    umContainer.Add(router1.Get(0));\n    umContainer.Add(internet.Get(0));\n    NodeContainer outroContainer;\n    outroContainer.Add(router2.Get(0));\n    outroContainer.Add(internet.Get(5));\n    DominioWanDev.Add(csmaHelper.Install(umContainer));\n    DominioWanDev.Add(csmaHelper.Install(outroContainer));\n\n    NodeContainer todosNos;\n    todosNos.Add(internet);\n    todosNos.Add(router1);\n    todosNos.Add(router2);\n    for (unsigned i=0; i < 5; i++)\n    {\n        todosNos.Add(subredesLan1[i]);\n        todosNos.Add(subredesLan2[i]);\n    }\n\n    InternetStackHelper internetStackHelper;\n    internetStackHelper.Install(todosNos);\n\n    std::stringstream ss;\n\n    Ipv4AddressHelper ipv4Helper;\n    unsigned subredeNum = 1;\n    for (unsigned i = 0 ; i < 5; i++)\n    {\n        ss << \"192.168.\" << subredeNum << \".0\";\n        ipv4Helper.SetBase(ss.str().c_str(), \"255.255.255.0\");\n        ipv4Helper.Assign(subredesLan1Dev[i]);\n        ipv4Helper.NewNetwork();\n        subredeNum++;\n    }\n\n    for (unsigned i = 0 ; i < 5; i++)\n    {\n        ss << \"192.168.\" << subredeNum << \".0\";\n        ipv4Helper.SetBase(ss.str().c_str(), \"255.255.255.0\");\n        ipv4Helper.Assign(subredesLan2Dev[i]);\n        ipv4Helper.NewNetwork();\n        subredeNum++;\n    }\n\n    ss << \"192.168.\" << subredeNum << \".0\";\n    ipv4Helper.SetBase(ss.str().c_str(), \"255.255.255.0\");\n    ipv4Helper.Assign(switches1Dev);\n    ipv4Helper.NewNetwork();\n    subredeNum++;\n\n    ss << \"192.168.\" << subredeNum << \".0\";\n    ipv4Helper.SetBase(ss.str().c_str(), \"255.255.255.0\");\n    ipv4Helper.Assign(switches2Dev);\n    ipv4Helper.NewNetwork();\n    subredeNum++;\n\n    ss << \"192.168.\" << subredeNum << \".0\";\n    ipv4Helper.SetBase(ss.str().c_str(), \"255.255.255.0\");\n    ipv4Helper.Assign(DominioWanDev);\n    ipv4Helper.NewNetwork();\n    subredeNum++;\n\n    ss << \"192.168.\" << subredeNum << \".0\";\n    ipv4Helper.SetBase(ss.str().c_str(), \"255.255.255.0\");\n    ipv4Helper.Assign(internetDev);\n    ipv4Helper.NewNetwork();\n    subredeNum++;\n\n    for (unsigned i = 0 ; i < 5; i++)\n    {\n        setup_mobility2(&subredesLan1[i], \"ns3::ConstantPositionMobilityModel\", 50+50*i, 100, 0, 20);\n        setup_mobility2(&subredesLan2[i], \"ns3::ConstantPositionMobilityModel\", 50+50*i, 300, 0, 20);\n    }\n    setup_mobility2(&router1, \"ns3::ConstantPositionMobilityModel\", 250, 150, 0, 20);\n    setup_mobility2(&router2, \"ns3::ConstantPositionMobilityModel\", 250, 250, 0, 20);\n    setup_mobility2(&internet, \"ns3::ConstantPositionMobilityModel\",250, 200,0,20);\n\n\n    csmaHelper.EnablePcapAll(\"csmapcap\");\n    //Configurar aplica\u00e7\u00f5es\n    ApplicationContainer clientApp, serverApp;\n\n    UdpEchoServerHelper echoServerHelper(8080);\n    serverApp = echoServerHelper.Install(subredesLan1[0].Get(1)); //Instala servidor echo em 192.168.1.0 ou 1\n\n    UdpEchoClientHelper echoClientHelper(Ipv4Address(\"192.168.1.2\"),8080);\n    echoClientHelper.SetAttribute(\"Interval\",TimeValue(MilliSeconds(10)));\n    clientApp = echoClientHelper.Install(subredesLan2[0].Get(1)); //Instala cliente echo em 192.168.1.1 ou 2\n\n    serverApp.Start(Seconds(1));\n    serverApp.Stop(Seconds(10));\n    clientApp.Start(Seconds(2));\n    clientApp.Stop(Seconds(9));\n\n    //A partir daqui, tem um servidor escutando na porta 8080 e um cliente mandando mensagens para ela\n    Ipv4GlobalRoutingHelper::PopulateRoutingTables ();\n\n\n    //Exportar anima\u00e7\u00e3o para o Netanim\n    BaseStationNetDevice b;\n    SubscriberStationNetDevice s;\n    CsmaNetDevice c;\n    UanNetDevice u;\n\n    AnimationInterface anim(outputFolder+\"anim2.xml\");\n    //anim.SetMaxPktsPerTraceFile(0xFFFFFFFF);\n    //anim.EnablePacketMetadata(true);\n    //anim.EnableIpv4RouteTracking (outputFolder+\"routingtable-wireless.xml\", Seconds (0), Seconds (9), Seconds (0.25));\n\n    //Rodar o simulador\n    Simulator::Stop(Minutes(2)); // Rodar simula\u00e7\u00e3o por 10 segundos\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}"
    },
    {
      "file_path": "examples/third.cc",
      "code": "#include <ns3/core-module.h>\n#include <ns3/point-to-point-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/applications-module.h>\n\n#include \"ns3/olsr-helper.h\"\n\n#include <ns3/netanim-module.h>\n#include <ns3/bs-net-device.h>\n#include <ns3/csma-module.h>\n#include <ns3/uan-module.h>\nusing namespace ns3;\n\n//Adding more networks\nint main()\n{\n    //LogComponentEnable (\"UdpEchoClientApplication\", LOG_LEVEL_ALL);\n    //LogComponentEnable (\"UdpEchoServerApplication\", LOG_LEVEL_ALL);\n    //LogComponentEnable(\"LiIonEnergySource\", LOG_LEVEL_DEBUG);\n    //LogComponentEnableAll(LOG_LEVEL_DEBUG);\n\n    std::string outputFolder = \"output/\";\n\n    //Cria 3 containers: um contendo todos os n\u00f3s, outros dois contendo um n\u00f3 folha e um n\u00f3 raiz, sendo o n\u00f3 raiz o roteador\n    NodeContainer nodes, nodesRede1, nodesRede2, nodesRede3;\n    nodes.Create(4);\n    nodesRede1.Add(nodes.Get(0));\n    nodesRede1.Add(nodes.Get(1));\n    nodesRede2.Add(nodes.Get(1));\n    nodesRede2.Add(nodes.Get(2));\n    nodesRede3.Add(nodes.Get(2));\n    nodesRede3.Add(nodes.Get(3));\n\n    //Inicializa protocolos de roteamento\n    Ipv4StaticRoutingHelper staticRouting;\n    OlsrHelper olsrRouting;\n\n    //Configura os protocolos de roteamento\n    Ipv4ListRoutingHelper routeHelper;\n    routeHelper.Add(staticRouting, 0);\n    routeHelper.Add(olsrRouting, 10);\n\n    //Configura a pilha de rede para suportar os protocolos de roteamento e instala a pilha de rede em todos os n\u00f3s\n    InternetStackHelper internetHelper;\n    internetHelper.SetRoutingHelper(routeHelper);\n    internetHelper.Install(nodes);\n    internetHelper.EnablePcapIpv4All(outputFolder+\"pcap\");\n\n    NetDeviceContainer netInterfaces, netInterfacesRede1, netInterfacesRede2, netInterfacesRede3;\n    PointToPointHelper pointHelper;\n    pointHelper.SetChannelAttribute(\"Delay\",StringValue(\"5ms\"));\n\n    //Cria conex\u00f5es f\u00edsicas entre os dois n\u00f3s do primeiro container ( roteador = nodes(1) = nodesRede1.Get(1) )\n    netInterfacesRede1.Add(pointHelper.Install(nodesRede1.Get(0),nodesRede1.Get(1)));\n\n    //Cria conex\u00f5es f\u00edsicas entre os dois n\u00f3s do segundo container ( roteador = nodes(1) = nodesRede2.Get(0) )\n    netInterfacesRede2.Add(pointHelper.Install(nodesRede2.Get(0),nodesRede2.Get(1)));\n\n    //Cria conex\u00f5es f\u00edsicas entre os dois n\u00f3s do segundo container ( roteador = nodes(2) = nodesRede3.Get(0) )\n    netInterfacesRede3.Add(pointHelper.Install(nodesRede3.Get(0),nodesRede3.Get(1)));\n\n    //Output de todos point-to-point para pcap\n    pointHelper.EnablePcapAll(outputFolder+\"pcap\", true);\n\n    Ipv4InterfaceContainer interfaceRede1, interfaceRede2, interfaceRede3;\n    Ipv4AddressHelper ipv4Helper;\n\n    //Configura endere\u00e7os de rede das interfaces de rede do primeiro container\n    ipv4Helper.SetBase(\"192.168.1.0\",\"255.255.255.0\");\n    interfaceRede1 = ipv4Helper.Assign(netInterfacesRede1);\n    ipv4Helper.NewNetwork();\n\n    //Configura endere\u00e7os de rede das interfaces de rede do segundo container\n    ipv4Helper.SetBase(\"192.168.2.0\",\"255.255.255.0\");\n    interfaceRede2 = ipv4Helper.Assign(netInterfacesRede2);\n    ipv4Helper.NewNetwork();\n\n    //Configura endere\u00e7os de rede das interfaces de rede do terceiro container\n    ipv4Helper.SetBase(\"192.168.3.0\",\"255.255.255.0\");\n    interfaceRede3 = ipv4Helper.Assign(netInterfacesRede3);\n    ipv4Helper.NewNetwork();\n\n\n    //Configurar aplica\u00e7\u00f5es\n    ApplicationContainer clientApp, serverApp;\n\n    UdpEchoServerHelper echoServerHelper(8080);\n    serverApp = echoServerHelper.Install(nodesRede1.Get(0)); //Instala servidor echo em 192.168.1.0 ou 1\n\n    UdpEchoClientHelper echoClientHelper(nodesRede1.Get(0)->GetObject<Ipv4>()->GetAddress(1,0).GetLocal(),8080);\n    clientApp = echoClientHelper.Install(nodesRede3.Get(1)); //Instala cliente echo em 192.168.1.1 ou 2\n\n    serverApp.Start(Seconds(1));\n    serverApp.Stop(Seconds(30));\n    clientApp.Start(Seconds(2));\n    clientApp.Stop(Seconds(29));\n\n    //A partir daqui, tem um servidor escutando na porta 8080 e um cliente mandando mensagens para ela\n\n\n    //Exportar simula\u00e7\u00e3o para netanim\n    BaseStationNetDevice b;\n    SubscriberStationNetDevice s;\n    CsmaNetDevice c;\n    UanNetDevice u;\n\n    AnimationInterface anim(outputFolder+\"anim2.xml\");\n    anim.SetMaxPktsPerTraceFile(0xFFFFFFFF);\n    anim.EnablePacketMetadata(true);\n    anim.EnableIpv4RouteTracking (outputFolder+\"routingtable-wireless.xml\", Seconds (0), Seconds (9), Seconds (0.25));\n\n    //Executar simula\u00e7\u00e3o por 10 segundos e depois destruir\n    Simulator::Stop(Seconds(30));\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}"
    }
  ]
}