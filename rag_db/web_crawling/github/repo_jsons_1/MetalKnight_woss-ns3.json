{
  "repo_name": "MetalKnight/woss-ns3",
  "github_url": "https://github.com/MetalKnight/woss-ns3",
  "readme": "# woss-ns3\nWOSS ns3 Integration Framework\n\nThis repository aims to introduce WOSS support for ns3 users.\n\nWOSS is a multi-threaded C++ framework that permits the integration of any existing underwater channel simulator that expects environmental data as input and provides as output a channel realization.\nCurrently, WOSS integrates the Bellhop ray-tracing program.\nThanks to its automation the user only has to specify the location in the world and the time where the simulation should take place. This is done by setting the simulated date and the wanted latitude and longitude of every node involved. The simulator automatically handles the rest (see technical description).\nWOSS can be integrated in any network simulator or simulation tool that supports C++.\n\n'woss-ns3' relies on the following libraries:\n- WOSS\n- Acoustic Toolbox\n- NetCDF 4 with HDF5 or NetCDF legacy (optional)\n\nLatest WOSS source code, installation instructions and related libraries can be found at https://woss.dei.unipd.it\n\nHow to install 'woss-ns3' with *cmake*:\n- download and install the recommended Acoustic Toolbox library\n- with optional NetCDF support, download and install the recommended HDF5, NetCDF libraries, with NetCDF4 format support\n- download and install the latest WOSS library with optional NetCDF4 and HDF5 support\n- clone this repository in the `<ns3-dir>/src` path and then run one of the following:\n  - NetCDF4 and HDF5 support, *pay attention to the CXXFLAGS inline redefinition due to a unresolved NetCDF-C++4 API warning* `CXXFLAGS=\"-Wno-unused-variable\" ./ns3 configure --enable-examples --enable-tests -- -DNS3_WITH_WOSS_SOURCE=<woss_source_path> -DNS3_WITH_WOSS_LIBRARY=<woss_lib_path> -DNS3_WITH_NETCDF4_INSTALL=<netcdf4_and_hdf5_installed_path>`\n  - with no NetCDF support `CXXFLAGS=\"-Wno-unused-variable\" ./ns3 configure --enable-examples --enable-tests -- -DNS3_WITH_WOSS_SOURCE=/<woss_source_path> -DNS3_WITH_WOSS_LIBRARY=<woss_lib_path>`\n- finally run `./ns3 build`\n\nHow to install 'woss-ns3' with *waf* (**OBSOLETE**):\n- download and install the recommended Acoustic Toolbox library\n- with optional NetCDF support, download and install the recommended HDF5, NetCDF libraries, with NetCDF4 format support\n- download and install the latest WOSS library with optional NetCDF4 and HDF5 support\n- clone this repository in the `<ns3-dir>/src` path and then run one of the following:\n  - NetCDF4 and HDF5 support, *pay attention to the CXXFLAGS inline redefinition due to a unresolved NetCDF-C++4 API warning* `./waf configure --with-woss-source=<woss_source_path> --with-woss-library=<woss_lib_path> --with-netcdf4-install=<netcdf4_and_hdf5_installed_path> CXXFLAGS=\"-Wall -Werror -Wno-unused-variable\"`\n  - with no NetCDF support `./waf configure --with-woss-source=<woss_source_path> --with-woss-library=<woss_lib_path>`\n- finally run `./waf build`\n\nFor info on how to install all the required libraries with the suggested paths, please check https://woss.dei.unipd.it/woss/doxygen/installation.html\n\n*Any issue should be reported via github Issue tracker or via e-mail to WOSS@guerra-tlc.com*.\n",
  "examples": [
    {
      "file_path": "examples/woss-aloha-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2015 Federico Guerra\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Federico Guerra <federico@guerra-tlc.com>\n */\n/**\n * \\file woss-aloha-example.cc\n * \\ingroup WOSS\n *\n *\n */\n\n#ifndef NS3_WOSS_SUPPORT\nint\nmain (int argc, char *argv[])\n{\n  return 0;\n}\n#else\n\n#include \"woss-aloha-example.h\"\n#include \"ns3/woss-channel.h\"\n#include \"ns3/woss-waypoint-mobility-model.h\"\n#include \"ns3/woss-position-allocator.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/applications-module.h\"\n#include \"ns3/mobility-module.h\"\n#include \"ns3/log.h\"\n#include \"ns3/config.h\"\n#include \"ns3/callback.h\"\n#include \"ns3/stats-module.h\"\n\n\n#include <fstream>\n\nusing namespace ns3;\n\nNS_LOG_COMPONENT_DEFINE (\"WossAlohaExample\");\n\n\nExperiment::Experiment ()\n  :   m_posAllocSelector (0),\n    m_totalRate (4096),\n    m_maxRange (3000),\n    m_numNodes (2),\n    m_pktSize (1000),\n    m_simTime (Seconds (5000)),\n    m_databasePath (\"\"),\n    m_useMultithread (true),\n    m_useTimeEvolution (false),\n    m_bytesTotal (0),\n    m_dataMode ()\n{\n  //m_databasePath = \"/home/fedwar/ns/ocean_database/dbs\";\n}\n\nvoid\nExperiment::InitWossHelper (Ptr<WossHelper> wossHelper, Ptr<WossPropModel> wossProp, woss::CoordZ &txCoordZ)\n{\n  wossHelper->SetAttribute (\"ResDbUseBinary\", BooleanValue (false));\n  wossHelper->SetAttribute (\"ResDbUseTimeArr\", BooleanValue (true));\n  wossHelper->SetAttribute (\"ResDbFilePath\", StringValue (\"./woss-aloha-example-output/res-db/\"));\n  wossHelper->SetAttribute (\"ResDbFileName\", StringValue (\"woss-aloha-example-results.dat\"));\n  if (m_databasePath != \"\")\n    {\n#if defined (WOSS_NETCDF_SUPPORT)\n      wossHelper->SetAttribute (\"SedimDbCoordFilePath\", StringValue (m_databasePath + \"/seafloor_sediment/DECK41_V2_coordinates.nc\"));\n      wossHelper->SetAttribute (\"SedimDbMarsdenFilePath\", StringValue (m_databasePath + \"/seafloor_sediment/DECK41_V2_marsden_square.nc\"));\n      wossHelper->SetAttribute (\"SedimDbMarsdenOneFilePath\", StringValue (m_databasePath + \"/seafloor_sediment/DECK41_V2_marsden_one_degree.nc\"));\n      wossHelper->SetAttribute (\"BathyDbDebug\", BooleanValue (false));\n#if defined (WOSS_NETCDF4_SUPPORT)\n      wossHelper->SetAttribute (\"BathyDbGebcoFormat\", IntegerValue (4)); // 15 seconds, 2D netcdf format\n      wossHelper->SetAttribute (\"BathyDbCoordFilePath\", StringValue (m_databasePath + \"/bathymetry/GEBCO_2023.nc\"));\n      wossHelper->SetAttribute (\"SspDbWoaDbType\", IntegerValue (1)); // 2013 WOA DB Format\n      wossHelper->SetAttribute (\"SspDbCoordFilePath\", StringValue (m_databasePath + \"/ssp/WOA2018/WOA2018_SSP_April.nc\"));\n      wossHelper->SetAttribute (\"SedimentDbDeck41DbType\", IntegerValue (1)); // DECK41 V2 database data format\n#else\n      wossHelper->SetAttribute (\"BathyDbGebcoFormat\", IntegerValue (3)); // 30 seconds, 2D netcdf format\n      wossHelper->SetAttribute (\"BathyDbCoordFilePath\", StringValue (m_databasePath + \"/bathymetry/GEBCO_2014_2D.nc\"));\n      wossHelper->SetAttribute (\"SspDbCoordFilePath\", StringValue (m_databasePath + \"/ssp/WOA2009/2WOA2009_SSP_April.nc\"));\n#endif // defined (WOSS_NETCDF4_SUPPORT)\n#endif // defined (WOSS_NETCDF_SUPPORT)\n    }\n  wossHelper->SetAttribute (\"WossCleanWorkDir\", BooleanValue (false));\n  wossHelper->SetAttribute (\"WossWorkDirPath\", StringValue (\"./woss-aloha-example-output/work-dir/\"));\n  wossHelper->SetAttribute (\"WossSimTime\", StringValue (\"1|10|2012|0|1|1|1|10|2012|0|1|1\"));\n  wossHelper->SetAttribute (\"WossBellhopArrSyntax\", IntegerValue (2)); // Check woss::BellhopArrSyntax; 2 means bellhop output syntax >= march 2019\n  wossHelper->SetAttribute (\"WossBellhopShdSyntax\", IntegerValue (1));\n  wossHelper->SetAttribute (\"WossManagerTimeEvoActive\", BooleanValue (m_useTimeEvolution));\n  wossHelper->SetAttribute (\"WossManagerTotalThreads\", IntegerValue (4));\n  wossHelper->SetAttribute (\"WossManagerUseMultithread\", BooleanValue (m_useMultithread));\n\n  wossHelper->Initialize (wossProp);\n\n  if (m_databasePath == \"\")\n    {\n      wossHelper->SetCustomBathymetry (\"5|0.0|100.0|100.0|200.0|300.0|150.0|400.0|100.0|700.0|300.0\", txCoordZ);\n      wossHelper->SetCustomSediment (\"TestSediment|1560.0|200.0|1.5|0.9|0.8|300.0\");\n      wossHelper->SetCustomSsp (\"12|0|1508.42|10|1508.02|20|1507.71|30|1507.53|50|1507.03|75|1507.56|100|1508.08|125|1508.49|150|1508.91|200|1509.75|250|1510.58|300|1511.42\");\n    }\n\n}\n\nvoid\nExperiment::ReceivePacket (Ptr<Socket> socket)\n{\n  Ptr<Packet> packet;\n  while ((packet = socket->Recv ()))\n    {\n      NS_LOG_DEBUG (\"Received a packet of size \" << packet->GetSize () << \" bytes\");\n      m_bytesTotal += packet->GetSize ();\n    }\n}\n\n\n\nuint32_t\nExperiment::Run (uint32_t param)\n{\n  UanHelper uan;\n\n\n  uint32_t depth = 70;\n  double sinkLatitude = 42.59;\n  double sinkLongitude = 10.125;\n\n  woss::CoordZ sinkCoord = woss::CoordZ (sinkLatitude, sinkLongitude, depth);\n\n  m_bytesTotal = 0;\n\n  uint32_t nNodes = param;\n\n  Ptr<WossHelper> wossHelper = CreateObject<WossHelper> ();\n\n//   Ptr<UanPhyCalcSinrFhFsk> sinr = CreateObject<UanPhyCalcSinrFhFsk> ();\n  Ptr<UanPhyCalcSinrDefault> sinr = CreateObject<UanPhyCalcSinrDefault> ();\n\n  UanTxMode mode;\n//   mode = UanTxModeFactory::CreateMode (UanTxMode::FSK, 80, 80, 22000, 4000, 13, \"FSK\");\n  mode = UanTxModeFactory::CreateMode (UanTxMode::PSK, 200, 200, 22000, 4000, 4, \"QPSK\");\n\n  UanModesList myModes;\n  myModes.AppendMode (mode);\n\n  uan.SetPhy (\"ns3::UanPhyGen\",\n              \"SinrModel\", PointerValue (sinr),\n              \"SupportedModes\", UanModesListValue (myModes));\n\n  uan.SetMac (\"ns3::UanMacAloha\");\n\n  Ptr<WossPropModel> wossProp = CreateObjectWithAttributes<WossPropModel> ();\n  InitWossHelper (wossHelper, wossProp, sinkCoord);\n\n  Ptr<WossChannel> wossChannel = CreateObjectWithAttributes<WossChannel> (\"PropagationModel\", PointerValue (wossProp));\n  wossChannel->SetAttribute (\"ChannelEqSnrThresholdDb\", DoubleValue (-100.0));\n\n  NodeContainer sink;\n  sink.Create (1);\n  NetDeviceContainer sinkDev = uan.Install (sink, wossChannel);\n\n  NodeContainer nodes;\n  nodes.Create (nNodes);\n  NetDeviceContainer devices = uan.Install (nodes, wossChannel);\n\n  MobilityHelper mobilitySink, mobility;\n\n  Ptr<PositionAllocator> pos;\n\n  Ptr<WossListPositionAllocator> posSink = CreateObject<WossListPositionAllocator> ();\n  posSink->Add (sinkCoord);\n\n  if (m_posAllocSelector == 0)\n    {\n      pos = CreateObject<WossListPositionAllocator> ();\n      Ptr<WossListPositionAllocator> posCast = DynamicCast<WossListPositionAllocator> (pos);\n\n      for (uint32_t i = 0; i < nNodes; i++)\n        {\n          woss::CoordZ nodeCoord = woss::CoordZ (woss::Coord::getCoordFromBearing (sinkCoord, M_PI / 2.0, (i + 1) * 500.0), depth);\n          posCast->Add (nodeCoord);\n        }\n    }\n  else if (m_posAllocSelector == 1)\n    {\n      pos = CreateObject<WossGridPositionAllocator> ();\n\n      pos->SetAttribute (\"MinLatitude\", DoubleValue (sinkLatitude));\n      pos->SetAttribute (\"MinLongitude\", DoubleValue (sinkLongitude));\n      pos->SetAttribute (\"Depth\", DoubleValue (depth));\n      pos->SetAttribute (\"DeltaLatitude\", DoubleValue (500.0));\n      pos->SetAttribute (\"DeltaLongitude\", DoubleValue (500.0));\n      pos->SetAttribute (\"LayoutType\", EnumValue (WossGridPositionAllocator::COLUMN_FIRST));\n      pos->SetAttribute (\"GridWidth\", UintegerValue (2));\n    }\n  else if (m_posAllocSelector == 2)\n    {\n      pos = CreateObject<WossRandomRectanglePositionAllocator> ();\n\n      pos->SetAttribute (\"Latitude\", StringValue (\"ns3::UniformRandomVariable[Min=42.59|Max=42.6]\"));\n      pos->SetAttribute (\"Longitude\", StringValue (\"ns3::UniformRandomVariable[Min=10.125|Max=10.127]\"));\n      pos->SetAttribute (\"Depth\", DoubleValue (depth));\n    }\n  else if (m_posAllocSelector == 3)\n    {\n      pos = CreateObject<WossRandomDiscPositionAllocator> ();\n\n      pos->SetAttribute (\"Latitude\", DoubleValue (sinkLatitude));\n      pos->SetAttribute (\"Longitude\", DoubleValue (sinkLongitude));\n      pos->SetAttribute (\"Depth\", DoubleValue (depth));\n    }\n  else if (m_posAllocSelector == 4)\n    {\n      Ptr<WossUniformDiscPositionAllocator> pos = CreateObject<WossUniformDiscPositionAllocator> ();\n\n      pos->SetAttribute (\"Latitude\", DoubleValue (sinkLatitude));\n      pos->SetAttribute (\"Longitude\", DoubleValue (sinkLongitude));\n      pos->SetAttribute (\"Depth\", DoubleValue (depth));\n    }\n  else\n    {\n      NS_FATAL_ERROR (\"m_posAllocSelector:\" << m_posAllocSelector << \" > 4 provided!\");\n    }\n\n  mobilitySink.SetPositionAllocator (posSink);\n  mobility.SetPositionAllocator (pos);\n\n  mobilitySink.SetMobilityModel (\"ns3::WossWaypointMobilityModel\", \"InitialPositionIsWaypoint\", BooleanValue (true));\n  mobility.SetMobilityModel (\"ns3::ConstantPositionMobilityModel\");\n\n  mobilitySink.Install (sink);\n  mobility.Install (nodes);\n\n  Ptr<Node> nodeSink = sink.Get (0);\n  Ptr<WossWaypointMobilityModel> sinkMob = nodeSink->GetObject<WossWaypointMobilityModel> ();\n  NS_ASSERT (sinkMob != nullptr);\n\n  for (int cnt = 0; cnt < 5; ++cnt)\n    {\n      Waypoint wp ( Seconds ((cnt + 1.0) * 10.0), CreateVectorFromCoords (42.59, 10.125 + (cnt + 1.0) * 0.05, depth));\n      sinkMob->AddWaypoint (wp);\n    }\n\n  PacketSocketHelper pktskth;\n  pktskth.Install (nodes);\n  pktskth.Install (sink);\n\n  PacketSocketAddress socket;\n  socket.SetSingleDevice (sinkDev.Get (0)->GetIfIndex ());\n  socket.SetPhysicalAddress (sinkDev.Get (0)->GetAddress ());\n  socket.SetProtocol (0);\n\n  OnOffHelper app (\"ns3::PacketSocketFactory\", Address (socket));\n  app.SetAttribute (\"OnTime\", StringValue (\"ns3::ConstantRandomVariable[Constant=1]\"));\n  app.SetAttribute (\"OffTime\", StringValue (\"ns3::ConstantRandomVariable[Constant=0]\"));\n  app.SetAttribute (\"DataRate\", DataRateValue (m_totalRate));\n  app.SetAttribute (\"PacketSize\", UintegerValue (m_pktSize));\n\n  ApplicationContainer apps = app.Install (nodes);\n\n  apps.Start (Seconds (0.5));\n  apps.Stop (m_simTime + Seconds (0.5));\n\n  Ptr<Node> sinkNode = sink.Get (0);\n  TypeId psfid = TypeId::LookupByName (\"ns3::PacketSocketFactory\");\n\n  Ptr<Socket> sinkSocket = Socket::CreateSocket (sinkNode, psfid);\n  sinkSocket->Bind (socket);\n  sinkSocket->SetRecvCallback (MakeCallback (&Experiment::ReceivePacket, this));\n\n  Simulator::Stop (m_simTime + Seconds (0.6));\n  Simulator::Run ();\n  Simulator::Destroy ();\n\n  return m_bytesTotal;\n}\nint\nmain (int argc, char *argv[])\n{\n\n  LogComponentEnable (\"WossAlohaExample\", LOG_LEVEL_ALL);\n//  LogComponentEnable (\"WossHelper\", LOG_LEVEL_ALL);\n//  LogComponentEnable (\"WossChannel\", LOG_LEVEL_ALL);\n//  LogComponentEnable (\"WossPropModel\", LOG_LEVEL_ALL);\n//  LogComponentEnable (\"UanChannel\", LOG_LEVEL_ALL);\n//  LogComponentEnable (\"UanTransducerHd\", LOG_LEVEL_ALL);\n//  LogComponentEnable (\"UanPhyGen\", LOG_LEVEL_ALL);\n//  LogComponentEnable (\"UanPropModelThorp\", LOG_LEVEL_ALL);\n//  LogComponentEnable (\"WossPositionAllocator\", LOG_LEVEL_ALL);\n//  LogComponentEnable (\"WossWaypointMobilityModel\", LOG_LEVEL_ALL);\n\n  Experiment exp;\n\n  CommandLine cmd;\n  cmd.AddValue (\"TotalRate\", \"Total channel capacity\", exp.m_totalRate);\n  cmd.AddValue (\"PosAllocSelector\", \"Position Allocator Selector: 0 list, 1 grid, 2 random rectangle, 3 random disc, 4 uniform disc\", exp.m_posAllocSelector);\n  cmd.AddValue (\"UseMultithread\", \"flag to set the WOSS multithread option\", exp.m_useMultithread);\n  cmd.AddValue (\"UseTimeEvolution\", \"flag to set the WOSS time evolution option\", exp.m_useTimeEvolution);\n  cmd.AddValue (\"NumberNodes\", \"Number of nodes\", exp.m_numNodes);\n  cmd.AddValue (\"PktSize\", \"Packet size in bytes\", exp.m_pktSize);\n  cmd.AddValue (\"SimTime\", \"Simulation time per trial\", exp.m_simTime);\n  cmd.Parse (argc, argv);\n\n  uint32_t bytesRx = exp.Run (exp.m_numNodes);\n\n  NS_LOG_DEBUG (\"Received a total of \" << bytesRx << \" bytes at sink\");\n\n}\n\n#endif // NS3_WOSS_SUPPORT\n\n"
    }
  ]
}