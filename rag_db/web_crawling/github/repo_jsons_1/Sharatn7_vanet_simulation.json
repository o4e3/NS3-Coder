{
  "repo_name": "Sharatn7/vanet_simulation",
  "github_url": "https://github.com/Sharatn7/vanet_simulation",
  "readme": "# VANET Simulation\n\nThis project involves the real-time simulation of Vehicular Ad-Hoc Networks (VANET) using NS3 and SUMO.\n\n**WAVE (Wireless Access for Vehicular Environments)**\n\n## Tools Required\n\n- **Operating System**: Ubuntu 16.04 LTS\n- **NS3 Version**: ns-3.29\n- **SUMO Version**: Eclipse SUMO Version v1_5_0+1154-40cc386\n- **Additional Tool**: OpenStreetMap (osmWebWizard.py)\n\n## Steps:\n\n### Step 1: Open OSM Web Wizard\n\n```bash\n$ cd sumo/tools\n$ python osmWebWizard.py\n```\n\n### Step 2: Process and Generate vanettrace.xml\n\n```bash\n$ cd sumo/tools/2022-06-07-11-58-26/\n$ sumo -c osm.sumocfg --fcd-output vanettrace.xml\n```\n\n### Step 3: Generate vanetmobility.tcl\n\n```bash\n$ cd sumo/tools\n$ python traceExporter.py -i 2022-06-07-11-58-26/trace.xml --ns2mobility-output=2022-06-07-11-58-26/vanetmobility.tcl\n```\n\n### Step 4: Add NetAnimation File\n\n```cpp\n#include \"ns3/netanim-module.h\"\nAnimationInterface anim(\"Vanetanim.xml\"); // Add before Simulator::Run();\n```\n\n### Step 5: Add Performance Analysis Code\n\n```cpp\n// Network Performance Calculation\n// Add performance analysis code to the vanet program\n\n///////////////////////// Network Perfomance Calculation ///////////////////////\nuint32_t SentPackets = 0;\nuint32_t ReceivedPackets = 0;\nuint32_t LostPackets = 0;\nint j=0;\nfloat AvgThroughput = 0;\nTime Jitter;\nTime Delay;\n\nPtr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier> (flowmon.GetClassifier ());\n  std::map<FlowId, FlowMonitor::FlowStats> stats = monitor->GetFlowStats ();\n\n  for (std::map<FlowId, FlowMonitor::FlowStats>::const_iterator iter = stats.begin (); iter != stats.end (); ++iter)\n    {\n\t  Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow (iter->first);\n\nNS_LOG_UNCOND(\"----Flow ID:\" <<iter->first);\nNS_LOG_UNCOND(\"Src Addr\" <<t.sourceAddress << \"Dst Addr \"<< t.destinationAddress);\nNS_LOG_UNCOND(\"Sent Packets=\" <<iter->second.txPackets);\nNS_LOG_UNCOND(\"Received Packets =\" <<iter->second.rxPackets);\nNS_LOG_UNCOND(\"Lost Packets =\" <<iter->second.txPackets-iter->second.rxPackets);\nNS_LOG_UNCOND(\"Packet delivery ratio =\" <<iter->second.rxPackets*100/iter->second.txPackets << \"%\");\nNS_LOG_UNCOND(\"Packet loss ratio =\" << (iter->second.txPackets-iter->second.rxPackets)*100/iter->second.txPackets << \"%\");\nNS_LOG_UNCOND(\"Delay =\" <<iter->second.delaySum);\nNS_LOG_UNCOND(\"Jitter =\" <<iter->second.jitterSum);\nNS_LOG_UNCOND(\"Throughput =\" <<iter->second.rxBytes * 8.0/(iter->second.timeLastRxPacket.GetSeconds()-iter->second.timeFirstTxPacket.GetSeconds())/1024<<\"Kbps\");\n\nSentPackets = SentPackets +(iter->second.txPackets);\nReceivedPackets = ReceivedPackets + (iter->second.rxPackets);\nLostPackets = LostPackets + (iter->second.txPackets-iter->second.rxPackets);\nAvgThroughput = AvgThroughput + (iter->second.rxBytes * 8.0/(iter->second.timeLastRxPacket.GetSeconds()-iter->second.timeFirstTxPacket.GetSeconds())/1024);\nDelay = Delay + (iter->second.delaySum);\nJitter = Jitter + (iter->second.jitterSum);\n\nj = j + 1;\n\n}\n\nAvgThroughput = AvgThroughput/j;\nNS_LOG_UNCOND(\"--------Total Results of the simulation----------\"<<std::endl);\nNS_LOG_UNCOND(\"Total sent packets  =\" << SentPackets);\nNS_LOG_UNCOND(\"Total Received Packets =\" << ReceivedPackets);\nNS_LOG_UNCOND(\"Total Lost Packets =\" << LostPackets);\nNS_LOG_UNCOND(\"Packet Loss ratio =\" << ((LostPackets*100)/SentPackets)<< \"%\");\nNS_LOG_UNCOND(\"Packet delivery ratio =\" << ((ReceivedPackets*100)/SentPackets)<< \"%\");\nNS_LOG_UNCOND(\"Average Throughput =\" << AvgThroughput<< \"Kbps\");\nNS_LOG_UNCOND(\"End to End Delay =\" << Delay);\nNS_LOG_UNCOND(\"End to End Jitter delay =\" << Jitter);\nNS_LOG_UNCOND(\"Total Flod id \" << j);\nmonitor->SerializeToXmlFile(\"manet-routing.flowmon\", true, true);\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n```\n\n### Step 6: Configure Scenario 2\n\n```cpp\n// Configure scenario 2\nelse if (m_scenario == 2)\n {\n      // Realistic vehicular trace in KCT\n      // \"low density, 21 total vehicles\"\n      m_traceFile = \"/adhoc/sumo/tools/2022-06-07-11-58-26/vanetmobility.tcl\"; //path to \"vanetmobility.tcl\" file\n      m_logFile = \"vanet.log\";\n      m_mobility = 1;\n      m_nNodes = 21;\n      m_TotalSimTime = 150.01;\n      m_nodeSpeed = 0;\n      m_nodePause = 0;\n      m_CSVfileName = \"vanet.csv\";\n      m_CSVfileName = \"vanet2.csv\";\n    }\n\n```\n\n### Step 7: Run the Program\n\n```bash\n$ ./waf --run \"scratch/vanet-routing-compare --protocol=1 --scenario=2\"\n```\n\n### Step 8: Open NetAnim\n\n```bash\n$ cd ns-allinone-3.29/netanim\n$ ./NetAnim\n```\n\nLoad `Vanetanim.xml` file in NetAnim to visualize the network animation.\n\n---\n\nFeel free to reach out if you have any questions or need further assistance!\n",
  "examples": []
}