{
  "repo_name": "SoonyangZhang/DrainQueueCongestion",
  "github_url": "https://github.com/SoonyangZhang/DrainQueueCongestion",
  "readme": "# DrainQueueCongestion\n## Algorithms  \nCongestion control algorithms evaluation on ns3  \ncode is referenced from quic protocol for simulation purpose.   \nImplemented congestion control algorithms:  \n- [x] Reno cubic veno westwood c2tcp elastic  \n- [x] vegas tcp-lp copa  \n- [x] BBR PCC BBRv2(ecn)  \n- [x] DCTCP(ecn)  \n\n\nSupported multipath congstion control algorithms:  \n- [x] lia wvegas olia balia  \n- [x] couple BBR  \n## Configuration  \nAs for ns3 test case, the wscript gives clear hint how to arrange this file  \nin the right position in ns3.  \nAnd add the CPLUS_INCLUDE_PATH flag in /etc/profile, for example:  \n```\nexport DQC=/home/zsy/C_Test/ns-allinone-3.xx/ns-3.xx/src/dqc/model/thirdparty  \nexport CPLUS_INCLUDE_PATH=CPLUS_INCLUDE_PATH:$DQC/include/:$DQC/congestion/:$DQC/logging/  \n```\nThe path /home/zsy/C_Test/ is where I put ns-allinone-3.xx under, substituting it with your ns3 path.  \nCreate a file named \"traces\" under /xx/xx/ns-allinone-3.xx/ns-3.xx/ for data collection.  \n## Run  \nRun simulation on ns3.26:  \n```\nsudo su  \nsource /etc/profile  \n./waf --run \"scratch/bbr-var-eva-3.26 --it=1 --cc=bbr\"  \n```\nOf cource, the project can be running on newer version of ns3,  \nas long as the topology is built. For example, on ns3.30.  \n```\nsudo su  \nsource /etc/profile  \n./waf --run \"scratch/bbr-var-eva-3.30 --it=1 --cc=bbr\"  \n```\nThe difference is only in BuildExampleTopo function.  \n## Trace  \nThe code in dqc/model/dqc_trace.cc is used to collect send rate (E_DQC_BW),  \none way delay (E_DQC_OWD), raceived rate (E_DQC_GOODPUT).  \nIn bbr-var-eva-3.30.cc, the enable trace flag is:   \n```\ntrace1.Log(log,DqcTraceEnable::E_DQC_OWD|DqcTraceEnable::E_DQC_BW|DqcTraceEnable::E_DQC_GOODPUT);  \n```\nThe E_DQC_OWD will create file to collect data.   \nThe callback function (DqcTrace::OnOwd) is registered \nin InstallDqc function to write data to file.  \n```\nrecvApp->SetOwdTraceFuc(MakeCallback(&DqcTrace::OnOwd,trace));  \n```\nThe meaning of data in it_bbr_flowid_owd.txt can be found in DqcTrace::OnOwd.  \n```\nvoid DqcTrace::OnOwd(uint32_t seq,uint32_t owd,uint32_t size){\n    if(m_owd.is_open()){  \n        char line [256];  \n        memset(line,0,256);  \n        float now=Simulator::Now().GetSeconds();  \n        sprintf (line, \"%f %16d %16d %16d\",  \n                now,seq,owd,size);  \n        m_owd<<line<<std::endl;  \n    }    \n}  \n```\nthe receipt time of a packet, packet number, owd, packet size.  \n## Results  \nBBR simulation results:   \nTest with 3 flow in a point to point channel(3Mbps, one way delay 100ms, max queue length 300ms).  \nbandwidth fairness(drain_to_target_(false)):  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/bw.png)  \none way transmission delay  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/delay.png)  \nBBR with the parameter (drain_to_target_(true)):  \n```\n./waf --run \"scratch/dqc-test --it=1 --cc=bbrd\"  \n```\nrate dynamic:  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/drain_to_target_bw.png)  \none way transmission delay:  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/drain_to_target_delay.png)  \nBBRv2:  \nrate dynamic:  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/bbr2-bw.png)  \none way transmission delay:  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/bbr2-owd.png)  \nCubic simulation results:  \nbandwidth fairness:  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/cubic_1_bw.png)  \none way delay  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/cubic_1_delay.png)  \nThe paper on copa: Copa: Practical Delay-Based Congestion Control for the Internet.  \nCopa simulation results:  \nbandwidth fairness:  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/copa-1-bw-ability.png)  \none way delay  \n![avatar](https://github.com/SoonyangZhang/DrainQueueCongestion/blob/master/result/copa-1-delay-ability.png)  \nThere is a review papar to evaluate the performance of these algorithms(https://arxiv.org/abs/1909.03673).  \n\n",
  "examples": []
}