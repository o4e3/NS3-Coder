{
  "repo_name": "SoonyangZhang/rmcat-ns3",
  "github_url": "https://github.com/SoonyangZhang/rmcat-ns3",
  "readme": "# rmcat-ns3\nA comparison of rmcat protocol, namely NADA, GCC and SCReAM on ns3 platform. The version of ns is 3.26.   \nThe paper link https://arxiv.org/pdf/1809.00304.pdf   \nThe simulation code of NADA can get from https://github.com/cisco/ns3-rmcat  \nIn consideration that the author of NADA made an update to their code, I upload the code I used during writting of this paper. And I did test the performance of the newer code inplementation, but it seems the new version had introduce some bugs that the sender can get quite low throughput compared to the link capacity.  \nFor, I just release the SCReAM code modified from https://github.com/EricssonResearch/scream  \n\nthe code in screamex.cc sendApp->SetTraceFilePath(\"/you_path/trace_key.txt\"),is no use in experiment, but it should be configured in right path. trace_key.txt is from https://github.com/EricssonResearch/scream/tree/master/traces  \n\nthe mytrace module is used for data collecion. And a file named \"trace\" should be created first under the  path of ns-allinone-3.26/ns-3.26/  \n\nthe razor project is a c version of GCC release at https://github.com/yuanrongxi/razor. And I make some minor modification to get it running on ns3. Thanks to the author's contributions.  \n<h3 style=\"color:#ff0000\">Must running tips</h3>  \n<h3 style=\"color:#ff0000\">Or else the compiler will runnng into errer like: cannot find -lrtc_base... </h3>  \n\n\nTo run GCC congestion control algorithm, it depends on external library from webrtc and these files(webrtc-lib/webrtc) should be built first (The folder webrtc-lib can be put anywhere, for example /home/xxx/webrtc-lib).  \n```\ncd /home/xxx/webrtc-lib/webrtc/  \ncmake .  \nmake  \n```\nThen configure the environemnt variables:  \n```\nsudo su  \ngedit /etc/profile  \n```\nadd the following to /etc/profile:  \n```\nexport WEBRTC_LIB=/home/xxx/webrtc-lib  \nexport LD_LIBRARY_PATH=$WEBRTC_LIB/webrtc/system_wrappers:$WEBRTC_LIB/webrtc/rtc_base:$WEBRTC_LIB/webrtc/api:$WEBRTC_LIB/webrtc/logging:$WEBRTC_LIB/webrtc/modules/utility:$WEBRTC_LIB/webrtc/modules/pacing:$WEBRTC_LIB/webrtc/modules/congestion_controller:$WEBRTC_LIB/webrtc/modules/bitrate_controller:$WEBRTC_LIB/webrtc/modules/remote_bitrate_estimator:$WEBRTC_LIB/webrtc/modules/rtp_rtcp:$LD_LIBRARY_PATH  \nexport CPLUS_INCLUDE_PATH=CPLUS_INCLUDE_PATH:$WEBRTC_LIB/webrtc/:$WEBRTC_LIB/webrtc/system_wrappers:$WEBRTC_LIB/webrtc/rtc_base:$WEBRTC_LIB/webrtc/api:$WEBRTC_LIB/webrtc/logging:$WEBRTC_LIB/webrtc/modules/utility:$WEBRTC_LIB/webrtc/modules/pacing:$WEBRTC_LIB/webrtc/modules/congestion_controller:$WEBRTC_LIB/webrtc/modules/bitrate_controller:$WEBRTC_LIB/webrtc/modules/remote_bitrate_estimator:$WEBRTC_LIB/webrtc/modules/rtp_rtcp  \n```\nThe path about the headers and so libs in wscript(under webrtc-ns3) should also be changed accordingly:  \n```\n  conf.env.append_value('INCLUDES', ['/home/xxx/webrtc-lib/webrtc/'])\n  conf.env.append_value(\"LINKFLAGS\", ['-L/home/xxx/webrtc-ns3/webrtc/system_wrappers','-L/home/xxx/webrtc-ns3/webrtc/rtc_base','-L/home/xxx/webrtc-ns3/webrtc/api','-L/home/xxx/webrtc-ns3/webrtc/logging','-L/home/xxx/webrtc-ns3/webrtc/modules/utility','-L/home/xxx/webrtc-ns3/webrtc/modules/pacing','-L/home/xxx/webrtc-ns3/webrtc/modules/congestion_controller','-L/home/xxx/webrtc-ns3/webrtc/modules/bitrate_controller','-L/home/xxx/webrtc-ns3/webrtc/modules/remote_bitrate_estimator','-L/home/xxx/webrtc-ns3/webrtc/modules/rtp_rtcp'])\n```\nAnd the webrtc-ns3 module depends on multipathvideo, and multipathvideo should be put under src in ns3.  \nLocation:  \n![image](https://github.com/sonyangchang/rmcat-ns3/blob/master/webrtc-results/location.png)  \n\nIn simulation(razor-example/gcc_tcp.cc), a point to point channel was created. From the time of 20s to 100s, A reno TCP connection flows into the network. The first picture shows the kalman-gcc cannot complete fair bandiwdth share with tcp flow.  \n\n![image](https://github.com/sonyangchang/rmcat-ns3/blob/master/razor-example/gcc_razor_0remb.png)  \n![image](https://github.com/sonyangchang/rmcat-ns3/blob/master/razor-example/gcc_razor_1remb.png)  \nIf you quite interesting in this simualation, and think the above instrcution is quite complex, you could email me for the VM during the experiment.  \nsome simualtion example of GCC algorithms:  \nbandwidth fainress property:  \n![image](https://github.com/sonyangchang/rmcat-ns3/blob/master/webrtc-results/webrtc_4_bw.png)  \nowe way transmission delay:  \n![image](https://github.com/sonyangchang/rmcat-ns3/blob/master/webrtc-results/webrtc_4_delay.png)  \nIn some test case, gcc flows may not converge to the fairness line, case 1.  \nbandwidth fainress property:  \n![image](https://github.com/sonyangchang/rmcat-ns3/blob/master/webrtc-results/webrtc_1_bw.png)  \nowe way transmission delay:  \n![image](https://github.com/sonyangchang/rmcat-ns3/blob/master/webrtc-results/webrtc_1_delay.png)  \n\nThe command to get webrtc-tcp running:  \n```\nsudo su  \nsource /etc/profile  \n./waf --run \"scratch/webrtc-tcp --it=1\"  \n```\n",
  "examples": []
}