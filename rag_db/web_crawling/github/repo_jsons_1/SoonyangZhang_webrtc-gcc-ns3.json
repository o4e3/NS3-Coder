{
  "repo_name": "SoonyangZhang/webrtc-gcc-ns3",
  "github_url": "https://github.com/SoonyangZhang/webrtc-gcc-ns3",
  "readme": "# webrtc-gcc-ns3\ntest google congestion control algorithm on ns3.31\nThe ex-webrtc module depends on libwebrtc.a  \n## Preparation \nThere are three ways to get libwebtc.a  \n### The first approach  \nDownload offcial webrtc. This approch is not suggested. ex-webrtc is referred the code under /webrtc/test/scenario. It is small discrete event simulator and only suports to build two nodes topology (webrtc/test/scenario/network_node.cc). I copy some source files in test and api under ex-webrtc. Once these files are changed by webrtc, building error will encountered.    \n1 download webrtc.  \n```\nmkdir webrtc-checkout  \ncd webrtc-checkout  \nfetch --nohooks webrtc  \ngclient sync  \ncd src   \ngit checkout -b m84 refs/remotes/branch-heads/4147   \ngclient sync  \n```\n2 Add a flag in basic_types.h (third_party/libyuv/include/libyuv):\n```\n#define LIBYUV_LEGACY_TYPES  \n```\n3 Add two files to rtc_base library(BUILD.gn):  \n```\nrtc_library(\"rtc_base\") {\n  sources = [\n    ...\n    \"memory_stream.cc\",\n    \"memory_stream.h\",\n    \"memory_usage.cc\",\n    \"memory_usage.h\",\n    ....\n    ]\n}\n```\nRemove them out of the original library(rtc_library(\"rtc_base_tests_utils\")).  \nThe build flag rtc_include_tests is diabled, or else there will be errors when compiling.  \n4 Delete code in webrtc:  \n```\n//third_party/webrtc/modules/rtp_rtcp/source/rtp_rtcp_impl.cc   \nbool ModuleRtpRtcpImpl::TrySendPacket(RtpPacketToSend* packet,  \n                                      const PacedPacketInfo& pacing_info) {  \n  RTC_DCHECK(rtp_sender_);  \n  //if (!rtp_sender_->packet_generator.SendingMedia()) {   \n //   return false;  \n // }  \n  rtp_sender_->packet_sender.SendPacket(packet, pacing_info);  \n  return true;  \n}\n```\n5 Add code in webrtc(to get send bandwidth):  \n```\n//third_party/webrtc/call/call.h  \nclass Call {  \n    virtual uint32_t last_bandwidth_bps(){return 0;}  \n};  \n//third_party/webrtc/call/call.cc  \nnamespace internal {  \nclass Call{\n    uint32_t last_bandwidth_bps() override {return last_bandwidth_bps_;}  \n}\n}  \n```\n6  Built webrtc  with clang. [Get clang installed first](https://www.jianshu.com/p/3c7eae5c0c68).   \n- first step:    \n\n```\ncd webrtc/src  \ngn gen out/m84 --args='is_debug=false is_component_build=false is_clang=true rtc_include_tests=false rtc_use_h264=true rtc_enable_protobuf=false use_rtti=true use_custom_libcxx=false treat_warnings_as_errors=false use_ozone=true'   \n```\n- second step:  \n\n```\ncd webrtc/src  \nninja -C out/m84  \n```\n### The second approach  \nDownload the webrtc I upload. This approach to build libwertc.a is suggested for these intending to make some change in webrtc source code.    \nurl: https://pan.baidu.com/s/18F26BAmZhj_CAQzKNUeDSA  \nauth code: j4ts  \nAfter download the code, decompress it:  \n```\ncat webrtc.tar.gz* |tar zx  \n```\nBuilt webrtc  with clang (refer to step 6 above).  \n### The third approach\nI upload webrtc header and libwebrtc.a on github for fast prototype.  \nNo bother is needed to build webrtc.  \ndownload it here: https://github.com/SoonyangZhang/webrtc-header-lib  \n## Build ns3.31\n1 Add environment variable   \n```\nsudo gedit source /etc/profile   \nexport WEBRTC_SRC_DIR=/xx/xx/xx/webrtc/src   \n```\nWEBRTC_SRC_DIR is the path where you put webrtc source code.  \nThe reason for this can be found in ex-webrtc/wscript.. \n```\nwebrtc_code_path = os.environ['WEBRTC_SRC_DIR']  \nwebrtc_lib_path = os.path.join(webrtc_code_path, 'out', 'm84', 'obj')  \nwebrtc_absl_path = os.path.join(webrtc_code_path, 'third_party', 'abseil-cpp')  \n```\n2 Change the warning flags in ns3 (ns-allinone-3.31/ns-3.31/waf-tools/cflags.h).  \n```\nself.warnings_flags = [['-Wall'], ['-Wno-unused-parameter'], ['-Wextra']]\n```\nThe origin content can be seen [here](https://github.com/nsnam/ns-3-dev-git/blob/ns-3.31/waf-tools/cflags.py#L22).  \n4 Put the folder ex-webrtc under ns-allinone-3.31/ns-3.31/src.  \n5 Build ns3 with clang++  \n```\ncd ns-allinone-3.31/ns-3.31  \nsource /etc/profile  \nCXX=\"clang++\"  \nCXXFLAGS=\"-std=c++14\" \n./waf configure  \n./waf build  \n```\n## Run example:\n1 Put the file webrtc-static.cc under ns-allinone-3.31/ns-3.31/scratch/.  \n2 Rebuild ns3  \n```\ncd ns-allinone-3.31/ns-3.31  \nsource /etc/profile  \nCXX=\"clang++\"  \n./waf configure  \n./waf build  \n\n```\n3 Create a folder named traces under ns-allinone-3.31/ns-3.31/. The traced data can be found there.  \n4 Run the example in simulation mode (ns3 event time):\n```\n./waf --run \"scratch/webrtc-static --m=simu --it=1\"  \n```\n5 Run the example in emulation mode (real clock):   \n```\n ./waf --run \"scratch/webrtc-static --m=emu --it=1\"  \n```\nThe code here is used by [gym](https://github.com/OpenNetLab/gym) to build reinforce learning based congestion controller.  \n## Results:  \nIn simulation mode:  \n![avatar](https://github.com/SoonyangZhang/webrtc-gcc-ns3/blob/main/results/gcc-simu-bw.png)  \nIn Emulation mode:  \n![avatar](https://github.com/SoonyangZhang/webrtc-gcc-ns3/blob/main/results/gcc-emu-bw.png)  \nThe difference is clear.  \n## Reference:  \n[1] [build webrtc with gcc](https://mediasoup.org/documentation/v3/libmediasoupclient/installation/)   \n[2] [the blog in chinese to configure this code on ns3](https://blog.csdn.net/u010643777/article/details/107237315)   \n[3] [gym-Build reinforce learning congestion control controller for webrtc](https://github.com/OpenNetLab/gym)\n",
  "examples": []
}