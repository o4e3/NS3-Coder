{
  "repo_name": "bobzhuyb/ns3-rdma",
  "github_url": "https://github.com/bobzhuyb/ns3-rdma",
  "readme": "# NS-3 simulator for RDMA\nThis is an NS-3 simulator for RDMA over Converged Ethernet v2 (RoCEv2). It includes the implementation of DCQCN, TIMELY, PFC, ECN and Broadcom shared buffer switch.\n\nIt is based on NS-3 version 3.17, and ported to Visual Studio environment, as explained [here](https://www.nsnam.org/wiki/Ns-3_on_Visual_Studio_2012).  \n\n## Note\nTIMELY implementation is in \"timely\" branch and hasn't been merged into the master branch. So, you may not be able to simulate DCQCN and TIMELY simultaneously at this moment.\n\n## Quick Start\n\n### Build\nTo compile it out-of-the-box, you need Visual Studio *2015* (not 2013 or 2017). \nPeople have successfully built it with *free* version, \nwhich can be downloaded [here](https://imagine.microsoft.com/en-us/Catalog/Product/101). \nOpen windows/ns-3-dev/ns-3-dev.sln, just build the whole solution.\n\nIf you cannot get a Windows machine or Visual Studio for any reason, you may try building it with the original Makefile. We have done it a while back, but now you probably need to edit a few things in waf to make it work.\n\n### Run\nThe binary will be generated at windows/ns-3-dev/x64/Release/main.exe.\nWe include a sample configuration file at windows/ns-3-dev/x64/Release/mix/config.txt\nExecute main.exe in windows/ns-3-dev/x64/Release/:\n```\ncd windows\\ns-3-dev\\x64\\Release\\\nmain.exe mix\\config.txt\n```\n\nIt runs a 2:1 incast at 40Gbps for 1 second. Please allow a few minutes for it to finish.\nThe trace will be generated at mix/mix.tr, as defined by mix/config.txt\n\nThere are quite a few options in mix/config.txt. We will gradually add documentation.\nFor your own convenience you can just check the code, \nproject \"main\" -- source files -- \"third.cc\", and see how these options are parsed.\nYou can also raise issues if you have any questions.\n\n## What did we add exactly?\n\n**point-to-point/model/qbb-net-device.cc** and all other qbb-* files: \n\nDCQCN and PFC implementation.\nIt also includes go-back-to-N and go-back-to-0 that handle packet drop due to corruption.\n\nIn 2013, we got a very basic NS-3 PFC implementation somewhere, and developed based on it. \nWe cannot find the original repository anymore.\n\n**network/model/broadcom-node.cc** and **.h**: \n\nThis implements a Broadcom ASIC switch model, which\nis mostly doing all kinds of buffer threshold-related operations. These include deciding \nwhether PFC should be triggered, ECN should be marked, buffer is too full so packets should\nbe dropped, etc. It supports both static and dynamic thresholds for PFC.\n\n*Disclaim: this module is purely based on authors' personal understanding of Broadcom ASIC. It does not reflect any official confirmation from either Microsoft or Broadcom.*\n\n**network/utils/broadcom-egress-queue.cc** and **.h**: \n\nThis is the actual MMU buffering packets.\nIt also includes switch scheduler, i.e., when upper layer ask for a packet to send, it will\ndecide which queue to be dequeued. Strategies like strict priority and round robin are supported.\n\n**applications/model/udp-echo-client.cc**: \n\nWe implement the RDMA client here, which aligns \nwith the fact that RoCEv2 includes UDP header. In particular, original UDP client has troubles\nwhen PFC pause the link. Original UDP client keeps sending packets at line rate, soon\nit builds up huge queue and memory runs out. Here we throttle the sending rate if it gets\npushed back by PFC.\n\n**internet/model/seq-ts-header.cc** and **.h**: \n\nWe didn't implement the full InfiniBand\nheader. Instead, what we really need is just the sequence number (for detecting corruption\ndrops, and also help us understand the throughput) and timestamp (required by TIMELY.) \nThis is where we encode this information into packets.\n\n**main/third.cc**: \n\nThe main() function.\n\nThere may be other edits here and there, especially the trace generation is scattered\namong various network stacks. But above are the major ones.\n\n## Q&A\n\n**Q: Why do you port it to Windows?**\n\nA: This is a Microsoft project. Visual Studio, including the free version, works well.\n\n**Q: Fine. What if I want to run it on Linux, and do not want to spend time changing the build process?**\n\nA: You can build it using Visual Studio and run the .exe using WINE. We have tested WINE 1.6.2 and it works well.\n\n**Q: I don't understand ... (some part of the code or configuration)**\n\nA: Raise issues on GitHub, so that your questions can also help others. If you really do\nnot want others know you are working on this, you can email yibzh@microsoft.com\n\n**Q: What papers should I cite, if I also publish?**\n\nA: Below are the ones you should definitely check. They are ranked from most relevant to \nless. That said, all of them are quite relevant:\n\n*ECN or Delay: Lessons Learnt from Analysis of DCQCN and TIMELY*, CoNEXT'16 (this project is released with this paper, we ask you to at least cite this paper if you use this code.)\n\n*Congestion Control for Large-scale RDMA Deployments*, SIGCOMM'15 (DCQCN)\n\n*TIMELY: RTT-based Congestion Control for the Datacenter*, SIGCOMM'15 (TIMELY)\n\n*RDMA over Commodity Ethernet at Scale*, SIGCOMM'16 (discussed go-back-to-N)\n\n*Deadlocks in Datacenter Networks: Why Do They Form, and How to Avoid Them*, HotNets'16 (PFC deadlock analysis, directly used this simulator.)\n",
  "examples": []
}