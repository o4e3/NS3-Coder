{
  "repo_name": "bupt-ipcr/RL4Net-TE",
  "github_url": "https://github.com/bupt-ipcr/RL4Net-TE",
  "readme": "<!--\n * @author: Jiawei Wu\n * @create time: 2020-03-19 20:58\n * @edit time: 2020-04-20 21:16\n * @FilePath: /README.md\n -->\n# RL4Net: A Packet-Level Network Simulator for Reinforcement Learning Based Cognitive Routing\n\n## 1. Introduction\n\n### 1.1 Motivation\n\nThe RL4Net simulator is developed based on the OpenAI Gym and ns-3, which specializes in facilitating the training of reinforcement learning based algorithms for cognitive routing problems.\n\n### 1.2 Architecture\n\nThe general architecture of the RL4Net is illustrated below:\n\n<p align=\"center\">\n<img src=\"doc/RL4Net_architecture.png\" alt=\"drawing\" width=\"600\"/>\n</p>\n\nRL4Net is composed of two functional blocks:  \n\n- <b>Environment</b>: Environment is built on widely used ns3 network simulator [ns3](https://www.nsnam.org/). We extend ns3 with six components:   \n    - <b>Metric Extractor</b> for computing quality metrics like delay and loss from ns3;   \n    - <b>Computers</b> for translating quality metrics to DRL state and reward;  \n    - <b>Action Operator</b> to get action commands from agent;  \n    - <b>Action Executor</b> for perform ns3 operations by actions;   \n    - <b>ns3Env</b> for transforming the ns3 object into DRL environment;   \n    - <b>envInterface</b> to translate between ns3 data and DRL factors.     \n- <b>Agent</b>: Agent is container of a DRL-based cognitive routing algorithm. A agent can built on various deep learning frameworks like pyTorch and Tensorflow.\n\n### 1.3 Folders\n\n- <b>./ns3-addon</b>: Files to be copied into ns3 source file folder for extension. It includes:\n    - ns3-src/action-executor: code for Action Executor\n    - ns3-src/metric-extractor: code for Metric Extractor\n    - rapidjson: an open source JSON parser and generator\n    - ns3-scratch: several examples of experiments on RL4Net\n- <b>./ns3-env</b>: File for ns3Env block. It cinludes:\n    - env-interface: code for envInterface\n    - ns3-python-connector: code for connecting python and ns3 c++\n- <b>./RL4Net-lib</b>: Libaray files developed by us\n- <b>./TE-trainer</b>: Files for traning agents\n- <b>./RLAgent</b>: Files of agents\n\n## 2. Installation  \n\n**Attention:** Switch to user root before installation is strongly recommended.  \n\n### 2.1 Download RL4Net\n\nFirst of all, you should download RL4Net from Github:  \n\n```bash\ngit clone https://github.com/bupt-ipcr/RL4Net\n```\n\nby default, source code will be download into ./RL4Net folder.\n\n### 2.2 Install dependent packages\n\nTo combine python and ns-3, RL4Net requires ZMQ and libprotoc. You can install as follow:  \n\n```bash\n# to install protobuf-3.6 on ubuntu 16.04:\nsudo add-apt-repository ppa:maarten-fonville/protobuf\nsudo apt-get update\napt-get install libzmq5 libzmq5-dev\napt-get install libprotobuf-dev\napt-get install protobuf-compiler\n```\n\n**Notice**: libprotoc version is 3.6 if you download this way.   The c++ file compiled will change \nat after version 3.7. Potential error will explain later.\n\n### 2.3 Python requirements\n\nHere we have requirements for python:\n\n- To use RL4Net-lib, you need python>=3.6 for f-string.  \n\n- To test the project, module `pytest` is required\n  you can install `pytest` by:  \n\n  ```bash\n  pip install pytest -U\n  ```\n\n- (Optional) create conda enviornment\n  You can use conda help you to manage above by:  \n\n  ```bash\n  conda create -n NAME python=VERSION\n  ```\n\n  which `NAME` means your environment name and valid `VERSION` for this project is `3.6` and `3.7`.  \n\n- (Required) Install pytorch and cuda using appropriate instructions  \n  You can checkout the install command in https://pytorch.org/  \n  It will help you manage pytorch and cuda.  \n  The recommended pytorch version is 1.4.0.\n\n### 2.4 Install ns3  \n\nSince RL4Net is based on ns-3, you need to install ns-3 before use RL4Net.  \nThe introcuction of ns-3 and how to install can be find at the [official website](https://www.nsnam.org/) of ns-3.  \nAs a recommendation, you can:  \n\n1. Install dependencies  \n   You can install ns-3 dependencies by following [official guide](https://www.nsnam.org/docs/release/3.30/tutorial/html/getting-started.html#prerequisites).  \n2. Use git to install **ns-3-dev**  \n   see: [downloading-ns-3-using-git](https://www.nsnam.org/docs/release/3.30/tutorial/html/getting-started.html#downloading-ns-3-using-git)  \n   *you can also install a specific version od ns-3, such as ns-3.30, but we prefer ns-3-dev.*  \n\nAnother possible guide is wiki of ns-3, see: [wiki](https://www.nsnam.org/wiki/Installation#Installation) of installation\n\n### 2.5 Install ns3 addon files\n\nNow suppose you have successfuly installed ns-3-dev, you can start to install RL4Net.  \n\nAs recommendation, deactivate your conda env before run setup script.  \nConda may install libprotoc in your virtual environment with version >= 3.6, while your system libprotoc version is 3.6.  \nThus when configure, protoc head file will read version >= 3.6 and when build, protoc head file will read libprotoc v3.6 and cause error.\n\n```bash\npython ns3_setup.py --wafdir=YOUR_WAFPATH\n```\n\nthe `YOUR_WAFPATH` is correspond to the introduction of ns-3 installation, where you can execute `./waf build`, typically `ns-3-allinone/ns-3-dev`. Remember to use absolute path.  \n\nThe default value of  wafdir is `/ns-3-dev` (notice it is subdir of '/'). As an alternative, you can copy the folder into `/ns-3-dev`, then run  \n\n```bash\npython ns3_setup.py\n```\n\n### 2.6 Install pyns3\n\npyns3 is the python module that connect python and ns3. Use pip(or pip3) to install this module with your python env(maybe conda).  \n\n```bash\npip install ns3-env/ns3-python-connector\n```\n\n### 2.7 Install wjwgym\n\nwjwgym is a lab that helps build reinforcement learning algorithms. See: [Github](https://github.com/LampV/Reinforcement-Learning)  \nInstall it with pip and your python env:  \n\n```bash\npip install RL4Net-lib/wjwgym-home\n```\n\nThe lab need numpy, torch and tensorboard. You can pre-install them, especially pytorch, by which you can choose pip/conda.\n\n### 2.8 Validate installation and run an test\n\nThe test file can help you check if you have every in place. You can run test by:  \n\n```bash\npytest\n```\n\ninside folder `RL4Net`, it will automatically detect test files.  \nYou can also specify file like:\n\n```bash\npytest test_installation.py\n```\n\n# Contact\n\nJun Liu (liujun@bupt.edu.cn), Beijing University of Posts and Telecommunications, China\n",
  "examples": []
}