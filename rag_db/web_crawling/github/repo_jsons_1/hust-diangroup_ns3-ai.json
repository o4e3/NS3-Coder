{
  "repo_name": "hust-diangroup/ns3-ai",
  "github_url": "https://github.com/hust-diangroup/ns3-ai",
  "readme": "# ns3-ai\n\n## Introduction\n\n[ns\u20133](https://www.nsnam.org/) is widely recognized as an excellent open-source networking simulation\ntool utilized in network research and education. In recent times, there has been a growing interest in\nintegrating AI algorithms into network research, with many researchers opting for open-source frameworks\nsuch as [TensorFlow](https://www.tensorflow.org/) and [PyTorch](https://pytorch.org/). Integrating the\nML frameworks with simulation tools in source code level has proven to be a challenging task due to their\nindependent development. As a result, it is more practical and convenient to establish a connection\nbetween the two through interprocess data transmission.\n\n<p align=\"center\">\n    <img src=\"./docs/architecture.png\" alt=\"arch\" width=\"500\"/>\n</p>\n\nOur model offers an efficient solution to facilitate the data exchange between ns-3 and Python-based\nAI frameworks. It does not implement any specific AI algorithms. Instead, it focuses on enabling\ninterconnectivity between Python and C++. Therefore, it is necessary to separately install the desired AI\nframework. Then, by cloning or downloading our work and importing the relevant Python modules, you can\nseamlessly exchange data between ns-3 and your AI algorithms.\n\nThe approach for enabling this data exchange is inspired by [ns3-gym](https://github.com/tkn-tub/ns3-gym),\nbut it utilizes a shared-memory-based approach, which not only ensures faster execution but also provides\ngreater flexibility.\n\n### Features\n\n- High-performance data interaction module in both C++ and Python side.\n- A high-level [Gym interface](model/gym-interface) for using Gymnasium APIs, and a low-level\n  [message interface](model/msg-interface) for customizing the shared data.\n- Useful skeleton code to easily integrate with AI frameworks on Python side.\n\n## Installation\n\nCheck out [install.md](./docs/install.md) for how to install and setup ns3-ai.\n\n## Quickstart on ns3-ai\n\n### Demo\n\nTo get started on ns3-ai, check out the [A-Plus-B](examples/a-plus-b) example. This example shows how\nC++ passes two numbers to Python and their sum is passed back to C++, with the implementation using\nall available interfaces: Gym interface, message interface (struct-based) and message\ninterface (vector-based).\n\n### Documentation\n\nReady to deploy ns3-ai in your own research? Before you code, please go over the tutorials on\n[Gym interface](model/gym-interface) and [message interface](model/msg-interface). They provide\nstep-by-step guidance on writing C++-Python interfaces, with some useful code snippets.\n\nWe also created some **pure C++** examples, which uses C++-based ML frameworks to train\nmodels. They don't rely on interprocess communication, so there is no overhead in serialization\nand interprocess communication. See [using-pure-cpp](docs/using-pure-cpp.md) for details.\n\n## Examples\n\nPlease refer to the README.md in corresponding directories for more information.\n\n### [A-Plus-B](examples/a-plus-b)\n\nThis example show how you can use ns3-ai by a very simple case that you transfer `a` and `b` from ns-3 (C++) to Python\nand calculate `a + b` in Python to put back the results.\n\n### [Multi-BSS](examples/multi-bss)\n\nThis example simulates a VR gaming scenario. We change the CCA threshold using DQN\nto meet VR delay and throughput requirements. Model optimization is in progress.\n\n### [RL-TCP](examples/rl-tcp/)\n\nThis example is inspired by [ns3-gym example](https://github.com/tkn-tub/ns3-gym#rl-tcp). We build this example for the\n[benchmarking](./docs/benchmarking) and to compare with their module.\n\n### [Rate-Control](examples/rate-control)\n\nThis is an example that shows how to develop a new rate control algorithm for the ns-3 Wi-Fi module using ns3-ai.\nAvailable examples are Constant Rate and Thompson Sampling.\n\n### [LTE-CQI](examples/lte-cqi/)\n\nThis original work is done based on [5G NR](https://5g-lena.cttc.es/) branch in ns-3. We made some changes to make it\nalso run in LTE codebase in ns-3 mainline. We didn't reproduce all the experiments on LTE, and the results in our paper\nare based on NR work.\n\n## Other materials\n\n### Google Summer of Code 2023\n\n'ns3-ai improvements' has been chosen as one of the [project ideas](https://www.nsnam.org/wiki/GSOC2023Projects)\nfor the ns-3 projects in [GSoC 2023](https://summerofcode.withgoogle.com/programs/2023). The project\ndeveloped the message interface (struct-based & vector-based) and Gym interface, provided more examples\nand enhanced stability and usability.\n\n- Project wiki page: [GSOC2023ns3-ai](https://www.nsnam.org/wiki/GSOC2023ns3-ai)\n\n### Online tutorial\n\nNote: this tutorial explains the original design, which is not up to date with the newer interface.\n\nJoin us in this [online recording](https://vimeo.com/566296651) to get better knowledge about ns3-ai.\nThe slides introducing the ns3-ai model could also be found [here](https://www.nsnam.org/wp-content/uploads/2021/tutorials/ns3-ai-tutorial-June-2021.pdf).\n\n## Cite Our Work\n\nPlease use the following bibtex:\n\n```\n@inproceedings{10.1145/3389400.3389404,\nauthor = {Yin, Hao and Liu, Pengyu and Liu, Keshu and Cao, Liu and Zhang, Lytianyang and Gao, Yayu and Hei, Xiaojun},\ntitle = {Ns3-Ai: Fostering Artificial Intelligence Algorithms for Networking Research},\nyear = {2020},\nisbn = {9781450375375},\npublisher = {Association for Computing Machinery},\naddress = {New York, NY, USA},\nurl = {https://doi.org/10.1145/3389400.3389404},\ndoi = {10.1145/3389400.3389404},\nbooktitle = {Proceedings of the 2020 Workshop on Ns-3},\npages = {57\u201364},\nnumpages = {8},\nkeywords = {AI, network simulation, ns-3},\nlocation = {Gaithersburg, MD, USA},\nseries = {WNS3 2020}\n}\n\n```",
  "examples": []
}