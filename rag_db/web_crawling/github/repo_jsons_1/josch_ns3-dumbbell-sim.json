{
  "repo_name": "josch/ns3-dumbbell-sim",
  "github_url": "https://github.com/josch/ns3-dumbbell-sim",
  "readme": "Simulation of a dumbbell topology using ns3 3.17\n------------------------------------------------\n\ndependencies (on Debian based distros):\n\n\tlibns3-dev (= 3.17)\n\ncompilation:\n\n\tmake\n\nexample execution:\n\n\t$ cat << END | ./dumbbell-sim > log\n\tUR TCP 536 0.0 1250\n\tUR TCP 536 250 500\n\tLR UDP 1000 750 1000 0.9Mbps\n\tEND\n\nThe file `log` then contains traces with the first column being the timestamp,\nthe second column being the ns3 context and the third column being the traced\nvalue of this context. The traced values are TCP congestion window size\nchanges, received packets and queue drops.\n\nThe traffic description is done via standard input. Each line represents one\nflow and the dumbbell will be created such that it has as many clients on each\nside as there are flows. Each flow will originate from a unique node N on the\nleft side of the dumbbell and reach node N on the right side of the dumbbell.\nThis way, every node is involved in exactly one flow and the connection in the\ncenter of the dumbbell serves as the bottleneck.\n\nSo above example would create the following topology:\n\n\t L1                R1\n\t   \\              /\n\t    \\+--+    +--+/\n\tL2---|LR|----|RR|---R2\n\t    /+--+    +--|\\\n\t   /              \\\n\t L3                R3\n\nThe flow given in the first line would originate from `L1`, go through the\nbottleneck link between the left and right router (`LR` and `RR`, respectively)\nand end at `R1`. The flow given in the second line would go from `L2` to `R2`\nand the last one from `L3` to `R3`.\n\nFlow description format\n-----------------------\n\nEach line represents one flow between two unique nodes of the dumbbell, flowing\nfrom left to right. Each line is split by their white spaces. The first element\nrepresents the type of flow. There are three flow types.\n\n**LR**: this type stands for \"limited rate\" and allows to specify traffic which\nis limited by transmission rate. Start and stop times govern the duration of\nthis traffic.\n\n**UR**: this type stands for \"unlimited rate\" and allows to specify traffic\nwhich is sent as fast as possible. Only TCP traffic is allowed. Start and stop\ntimes govern the duration of this traffic.\n\n**LT**: this type stands for \"limited transfer\" and allows to specify traffic\nwhich is sent as fast as possible. Only TCP traffic is allowed. The amount of\ndata to transfer governs when this flow stops transmitting.\n\nThe second element in each line is the transport type an can be either \"TCP\" or\n\"UDP\". Observe the restrictions of transport type with respect to the flow\ntype.\n\nThe third element is the package size to send. For TCP traffic this will also\nadapt the segment size of the underlying socket.\n\nThe fourth element is the start time of the flow given in seconds.\n\nFor `LR` and `UR` flow types, the fifth element is the stop time given in\nseconds. For the `LT` type, the fifth element is the maximum transfer size,\ngiven in bytes. For all types, the fifth element governs when the flow will\nstop.\n\nThe `LR` type takes a sixth element, specifying the desired transmission rate.\nThis value is given with a unit like \"Mbps\".\n\nCommandline Arguments\n---------------------\n\nWhile flow descriptions are read from standard input, commandline arguments\nallow to setup properties of the dumbbell topology. By default, the error rate\nof the involved links is 0.0, which means no packet is dropped by the physical\nlinks. The default TCP congestion-avoidance algorithm is NewReno and other\noptions are Tahoe, Reno, Westwood and WestwoodPlus. The default bandwith and\nlatency of the bottleneck link is 1Mbps and 50ms, respectively. The default\nbandwidth and latency of the access links of the nodes to the routers is 10Mbps\nand 1ms, respectively.\n\nWhen giving an error rate other than 0.0, a random element is introduced. It is\npossible to make this randomness deterministic by using the `--run` option\nwhich allows to make deterministic runs with the same outcome, given the same\nrun number.\n\nDepending on the flow definitions you might want to start the simulation early.\nThis is possible with the `--simstop` argument.\n\nYou can enable pcap tracing of all links with the `--tracing` option.\n",
  "examples": []
}