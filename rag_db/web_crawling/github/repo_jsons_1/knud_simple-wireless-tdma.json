{
  "repo_name": "knud/simple-wireless-tdma",
  "github_url": "https://github.com/knud/simple-wireless-tdma",
  "readme": "simple-wireless-tdma\n====================\n\nThis is an ns3 (nsnam.org) module that originated with Hemanth Narra.\nIt has been updated to work under ns3 3.24.1.\n\n## Example\nI have been able to run the tdma-example.cc by placing it under the \nscratch directory so that \n\n./waf --run tdma-example\n\nwill run. A configuration setting is missing somewhere to allow it to\nrun from the src/simple-wireless-tdma/example directory.\n",
  "examples": [
    {
      "file_path": "examples/tdma-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2011 Hemanth Narra\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Hemanth Narra <hemanthnarra222@gmail.com>\n *\n * James P.G. Sterbenz <jpgs@ittc.ku.edu>, director\n * ResiliNets Research Group  http://wiki.ittc.ku.edu/resilinets\n * Information and Telecommunication Technology Center (ITTC)\n * and Department of Electrical Engineering and Computer Science\n * The University of Kansas Lawrence, KS USA.\n *\n * Work supported in part by NSF FIND (Future Internet Design) Program\n * under grant CNS-0626918 (Postmodern Internet Architecture),\n * NSF grant CNS-1050226 (Multilayer Network Resilience Analysis and Experimentation on GENI),\n * US Department of Defense (DoD), and ITTC at The University of Kansas.\n */\n#include \"ns3/core-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/applications-module.h\"\n#include \"ns3/mobility-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/wifi-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/simple-wireless-tdma-module.h\"\n#include \"ns3/dsdv-module.h\"\n#include <iostream>\n#include <cmath>\n\nusing namespace ns3;\n\nuint16_t port = 9;\n\nNS_LOG_COMPONENT_DEFINE (\"TdmaExample\");\n\nclass TdmaExample\n{\npublic:\n  TdmaExample ();\n  void CaseRun (uint32_t nWifis,\n                uint32_t nSinks,\n                double totalTime,\n                std::string rate,\n                std::string phyMode,\n                uint32_t nodeSpeed,\n                uint32_t periodicUpdateInterval,\n                uint32_t settlingTime,\n                double dataStart,\n                std::string CSVfileName,\n                bool usingWifi,\n                double txpDistance,\n                uint32_t nSlots,\n                uint32_t slotTime,\n                uint32_t guardTime,\n                uint32_t interFrameGap);\n\nprivate:\n  uint32_t m_nWifis;\n  uint32_t m_nSinks;\n  double m_totalTime;\n  std::string m_rate;\n  std::string m_phyMode;\n  uint32_t m_nodeSpeed;\n  uint32_t m_periodicUpdateInterval;\n  uint32_t m_settlingTime;\n  double m_dataStart;\n  uint32_t bytesTotal;\n  uint32_t packetsReceived;\n  std::string m_CSVfileName;\n  uint32_t m_slots;\n  uint32_t m_slotTime;\n  uint32_t m_guardTime;\n  uint32_t m_interFrameGap;\n\n  std::map<double, double> m_transmitRangeMap;\n\n  NodeContainer nodes;\n  NetDeviceContainer devices;\n  Ipv4InterfaceContainer interfaces;\n\nprivate:\n  void CreateNodes ();\n  void CreateDevices (std::string tr_name, bool usingWifi, double txpDistance);\n  void InstallInternetStack ();\n  void InstallApplications ();\n  void SetupMobility ();\n  void ReceivePacket (Ptr <Socket> );\n  Ptr <Socket> SetupPacketReceive (Ipv4Address, Ptr <Node> );\n  void CheckThroughput ();\n  void InsertIntoTxp (void);\n\n};\n\nint main (int argc, char **argv)\n{\n  TdmaExample test;\n  uint32_t nWifis = 4;\n  uint32_t nSinks = 1;\n  double totalTime = 100.0;\n  std::string rate (\"8kbps\");\n  std::string phyMode (\"DsssRate11Mbps\");\n  uint32_t nodeSpeed = 10; //in m/s\n  std::string appl = \"all\";\n  uint32_t periodicUpdateInterval = 15;\n  uint32_t settlingTime = 6;\n  double dataStart = 50.0;\n  std::string CSVfileName = \"TdmaExample.csv\";\n  bool usingWifi = false;\n  double txpDistance = 400.0;\n\n  // tdma parameters\n  uint32_t nSlots = nWifis;\n  // slotTime is at least the number of bytes in a packet * 8 bits/byte / bit rate * 1e6 microseconds\n  uint32_t slotTime = 1000 * 8 / 8000 * 1000000; // us\n  uint32_t interFrameGap = 0;\n  uint32_t guardTime = 0;\n\n  CommandLine cmd;\n  cmd.AddValue (\"nWifis\", \"Number of wifi nodes[Default:30]\", nWifis);\n  cmd.AddValue (\"nSinks\", \"Number of wifi sink nodes[Default:10]\", nSinks);\n  cmd.AddValue (\"usingWifi\", \"Do you want to use WifiMac(1/0)[Default:false(0)]\", usingWifi);\n  cmd.AddValue (\"totalTime\", \"Total Simulation time[Default:100]\", totalTime);\n  cmd.AddValue (\"phyMode\", \"Wifi Phy mode[Default:DsssRate11Mbps]\", phyMode);\n  cmd.AddValue (\"rate\", \"CBR traffic rate[Default:8kbps]\", rate);\n  cmd.AddValue (\"nodeSpeed\", \"Node speed in RandomWayPoint model[Default:10]\", nodeSpeed);\n  cmd.AddValue (\"periodicUpdateInterval\", \"Periodic Interval Time[Default=15]\", periodicUpdateInterval);\n  cmd.AddValue (\"settlingTime\", \"Settling Time before sending out an update for changed metric[Default=6]\", settlingTime);\n  cmd.AddValue (\"dataStart\", \"Time at which nodes start to transmit data[Default=50.0]\", dataStart);\n  cmd.AddValue (\"CSVfileName\", \"The name of the CSV output file name[Default:TdmaExample.csv]\", CSVfileName);\n  cmd.AddValue (\"txpDistance\", \"MaxRange for the node transmissions [Default:400.0]\", txpDistance);\n  cmd.AddValue (\"nSlots\", \"Number of slots per gframe [Default:nWifis]\", nSlots);\n  cmd.AddValue (\"slotTime\", \"Slot transmission Time [Default(us):1000]\", slotTime);\n  cmd.AddValue (\"guardTime\", \"Duration to wait between slots [Default(us):0]\", guardTime);\n  cmd.AddValue (\"interFrameGap\", \"Duration between frames [Default(us):0]\", interFrameGap);\n  cmd.Parse (argc, argv);\n\n  std::ofstream out (CSVfileName.c_str ());\n  out << \"SimulationSecond,\" <<\n  \"ReceiveRate,\" <<\n  \"PacketsReceived,\" <<\n  \"NumberOfSinks,\" <<\n  std::endl;\n  out.close ();\n\n  SeedManager::SetSeed (12345);\n\n  Config::SetDefault (\"ns3::OnOffApplication::PacketSize\", StringValue (\"1000\")); // bytes!\n  Config::SetDefault (\"ns3::OnOffApplication::DataRate\", StringValue (rate));\n\n  LogComponentEnable (\"TdmaExample\", LOG_LEVEL_DEBUG);\n\n  test = TdmaExample ();\n  test.CaseRun (nWifis, nSinks, totalTime, rate, phyMode, nodeSpeed, periodicUpdateInterval,\n                settlingTime, dataStart,CSVfileName,usingWifi,txpDistance, nSlots, slotTime, guardTime, interFrameGap);\n\n  return 0;\n}\n\nTdmaExample::TdmaExample ()\n  : m_nWifis(30),\n\t\tm_nSinks(10),\n\t\tm_totalTime(100),\n\t  m_rate (\"8kbps\"),\n\t  m_phyMode (\"DsssRate11Mbps\"),\n\t  m_nodeSpeed (10),\n\t  m_periodicUpdateInterval (15),\n\t\tm_settlingTime (6),\n\t  m_dataStart (50.0),\n\t\tbytesTotal (10000),\n    packetsReceived (0),\n\t  m_CSVfileName (\"tdmaExample.csv\"),\n\t  m_slots(30),\n\t  m_slotTime (1000),\n    m_guardTime (0),\n\t  m_interFrameGap (0)\n\n{\n  NS_LOG_FUNCTION (this);\n}\n\nvoid\nTdmaExample::ReceivePacket (Ptr <Socket> socket)\n{\n  NS_LOG_UNCOND (Simulator::Now ().GetSeconds () << \" Received one packet!\");\n  Ptr <Packet> packet;\n  while ((packet = socket->Recv ()))\n    {\n      bytesTotal += packet->GetSize ();\n      packetsReceived += 1;\n    }\n}\n\nvoid\nTdmaExample::CheckThroughput ()\n{\n  double kbs = (bytesTotal * 8.0) / 1000;\n  bytesTotal = 0;\n\n  std::ofstream out (m_CSVfileName.c_str (), std::ios::app);\n\n  out << (Simulator::Now ()).GetSeconds () << \",\" << kbs << \",\" << packetsReceived << \",\" << m_nSinks << std::endl;\n\n  out.close ();\n  packetsReceived = 0;\n  Simulator::Schedule (Seconds (1.0), &TdmaExample::CheckThroughput, this);\n}\n\nPtr <Socket>\nTdmaExample::SetupPacketReceive (Ipv4Address addr, Ptr <Node> node)\n{\n\n  TypeId tid = TypeId::LookupByName (\"ns3::UdpSocketFactory\");\n  Ptr <Socket> sink = Socket::CreateSocket (node, tid);\n  InetSocketAddress local = InetSocketAddress (addr, port);\n  sink->Bind (local);\n  sink->SetRecvCallback (MakeCallback ( &TdmaExample::ReceivePacket, this));\n\n  return sink;\n}\n\nvoid\nTdmaExample::CaseRun (uint32_t nWifis, uint32_t nSinks, double totalTime, std::string rate,\n                      std::string phyMode, uint32_t nodeSpeed, uint32_t periodicUpdateInterval, uint32_t settlingTime,\n                      double dataStart, std::string CSVfileName, bool usingWifi, double txpDistance, uint32_t nSlots,\n                      uint32_t slotTime, uint32_t guardTime, uint32_t interFrameGap)\n{\n  m_nWifis = nWifis;\n  m_nSinks = nSinks;\n  m_totalTime = totalTime;\n  m_rate = rate;\n  m_phyMode = phyMode;\n  m_nodeSpeed = nodeSpeed;\n  m_periodicUpdateInterval = periodicUpdateInterval;\n  m_settlingTime = settlingTime;\n  m_dataStart = dataStart;\n  m_CSVfileName = CSVfileName;\n  m_slots = nSlots;\n  m_slotTime = slotTime;\n  m_guardTime = guardTime;\n  m_interFrameGap = interFrameGap;\n\n  std::stringstream ss;\n  ss << m_nWifis;\n  std::string t_nodes = ss.str ();\n\n  std::stringstream ss2;\n  ss2 << m_totalTime;\n  std::string sTotalTime = ss2.str ();\n\n  std::stringstream ss3;\n  ss3 << txpDistance;\n  std::string t_txpDistance = ss3.str ();\n\n  std::string macProtocol = \"\";\n  if (usingWifi)\n    {\n      macProtocol = \"wifi\";\n    }\n  else\n    {\n      macProtocol = \"tdma\";\n    }\n\n  std::string tr_name = \"Dsdv_Manet_\"\n    + t_nodes + \"Nodes_\"\n    + macProtocol + \"_\"\n    + t_txpDistance + \"txDistance_\"\n    + sTotalTime + \"SimTime\";\n  std::cout << \"Trace file generated is \" << tr_name << \".tr\\n\";\n\n  InsertIntoTxp ();\n  CreateNodes ();\n  CreateDevices (tr_name,usingWifi,txpDistance);\n  SetupMobility ();\n  InstallInternetStack ();\n  InstallApplications ();\n\n  std::cout << \"\\nStarting simulation for \" << m_totalTime << \" s ...\\n\";\n\n  CheckThroughput ();\n\n  Simulator::Stop (Seconds (m_totalTime));\n  Simulator::Run ();\n  Simulator::Destroy ();\n}\n\nvoid\nTdmaExample::CreateNodes ()\n{\n  std::cout << \"Creating \" << (unsigned) m_nWifis << \" nodes.\\n\";\n  nodes.Create (m_nWifis);\n  NS_ASSERT_MSG (m_nWifis > m_nSinks, \"Sinks must be less or equal to the number of nodes in network\");\n}\n\nvoid\nTdmaExample::SetupMobility ()\n{\n  MobilityHelper mobility;\n/*  ObjectFactory pos;\n  pos.SetTypeId (\"ns3::RandomRectanglePositionAllocator\");\n  pos.Set (\"X\", RandomVariableValue (UniformVariable (0, 1000)));\n  pos.Set (\"Y\", RandomVariableValue (UniformVariable (0, 1000)));\n\n  Ptr <PositionAllocator> positionAlloc = pos.Create ()->GetObject <PositionAllocator> ();\n  mobility.SetMobilityModel (\"ns3::RandomWaypointMobilityModel\", \"Speed\", RandomVariableValue (ConstantVariable (m_nodeSpeed)),\n      \"Pause\", RandomVariableValue (ConstantVariable (2.0)), \"PositionAllocator\", PointerValue (positionAlloc));\n  mobility.SetPositionAllocator (positionAlloc);*/\n\n  ObjectFactory pos;\n  pos.SetTypeId (\"ns3::RandomRectanglePositionAllocator\");\n  pos.Set (\"X\", StringValue (\"ns3::UniformRandomVariable[Min=0.0|Max=300.0]\"));\n  pos.Set (\"Y\", StringValue (\"ns3::UniformRandomVariable[Min=0.0|Max=1500.0]\"));\n\n  Ptr<PositionAllocator> positionAlloc = pos.Create ()->GetObject<PositionAllocator> ();\n  mobility.SetPositionAllocator (positionAlloc);\n  mobility.SetMobilityModel (\"ns3::ConstantPositionMobilityModel\");\n  mobility.Install (nodes);\n}\n\nvoid\nTdmaExample::CreateDevices (std::string tr_name, bool usingWifi, double txpDistance)\n{\n  if (usingWifi)\n    {\n      Config::SetDefault (\"ns3::WifiRemoteStationManager::NonUnicastMode\", StringValue (m_phyMode));\n      Config::SetDefault (\"ns3::WifiRemoteStationManager::RtsCtsThreshold\", StringValue (\"2000\"));\n\n      double txp;\n      if (m_transmitRangeMap.find (txpDistance) == m_transmitRangeMap.end ())\n        {\n          txp = 0.0;\n        }\n      else\n        {\n          txp = m_transmitRangeMap[txpDistance];\n        }\n\n      NqosWifiMacHelper wifiMac = NqosWifiMacHelper::Default ();\n      wifiMac.SetType (\"ns3::AdhocWifiMac\");\n      YansWifiPhyHelper wifiPhy = YansWifiPhyHelper::Default ();\n      YansWifiChannelHelper wifiChannel;\n      wifiChannel.SetPropagationDelay (\"ns3::ConstantSpeedPropagationDelayModel\");\n      wifiChannel.AddPropagationLoss (\"ns3::FriisPropagationLossModel\");\n      wifiPhy.SetChannel (wifiChannel.Create ());\n      WifiHelper wifi;\n      wifi.SetStandard (WIFI_PHY_STANDARD_80211b);\n      wifi.SetRemoteStationManager (\"ns3::ConstantRateWifiManager\",\n                                    \"DataMode\", StringValue (m_phyMode),\n                                    \"ControlMode\", StringValue (m_phyMode));\n      //set the tx range based on txpDistance\n      wifiPhy.Set (\"TxPowerStart\", DoubleValue (txp));\n      wifiPhy.Set (\"TxPowerEnd\", DoubleValue (txp));\n\n      devices = wifi.Install (wifiPhy, wifiMac, nodes);\n\n      AsciiTraceHelper ascii;\n      wifiPhy.EnableAsciiAll (ascii.CreateFileStream (tr_name + \".tr\"));\n      wifiPhy.EnablePcapAll (tr_name);\n    }\n  else\n    {\n      Config::SetDefault (\"ns3::SimpleWirelessChannel::MaxRange\", DoubleValue (txpDistance));\n      // default allocation, each node gets a slot to transmit\n//      TdmaHelper tdma = TdmaHelper (nodes.GetN (),nodes.GetN ()); // in this case selected, numSlots = nodes\n      /* can make custom allocation through simulation script\n       * will override default allocation\n       */\n      /*tdma.SetSlots(4,\n          0,1,1,0,0,\n          1,0,0,0,0,\n          2,0,0,1,0,\n          3,0,0,0,1);*/\n      // if TDMA slot assignment is through a file\n      TdmaHelper tdma = TdmaHelper (\"tdmaSlots.txt\");\n      TdmaControllerHelper controller;\n      controller.Set (\"SlotTime\", TimeValue (MicroSeconds (1100)));\n      controller.Set (\"GuardTime\", TimeValue (MicroSeconds (100)));\n      controller.Set (\"InterFrameTime\", TimeValue (MicroSeconds (0)));\n      tdma.SetTdmaControllerHelper (controller);\n      devices = tdma.Install (nodes);\n\n      AsciiTraceHelper ascii;\n      Ptr<OutputStreamWrapper> stream = ascii.CreateFileStream (tr_name + \".tr\");\n      tdma.EnableAsciiAll (stream);\n    }\n}\n\nvoid\nTdmaExample::InstallInternetStack ()\n{\n  DsdvHelper dsdv;\n  dsdv.Set (\"PeriodicUpdateInterval\", TimeValue (Seconds (m_periodicUpdateInterval)));\n  dsdv.Set (\"SettlingTime\", TimeValue (Seconds (m_settlingTime)));\n  InternetStackHelper stack;\n  stack.SetRoutingHelper (dsdv);\n  stack.Install (nodes);\n  Ipv4AddressHelper address;\n  address.SetBase (\"10.1.1.0\", \"255.255.255.0\");\n  interfaces = address.Assign (devices);\n}\n\nvoid\nTdmaExample::InstallApplications ()\n{\n  for (uint32_t i = 0; i <= m_nSinks - 1; i++ )\n    {\n      Ptr<Node> node = NodeList::GetNode (i);\n      Ipv4Address nodeAddress = node->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ();\n      Ptr<Socket> sink = SetupPacketReceive (nodeAddress, node);\n    }\n\n  for (uint32_t clientNode = 0; clientNode <= m_nWifis - 1; clientNode++ )\n    {\n      for (uint32_t j = 0; j <= m_nSinks - 1; j++ )\n        {\n          OnOffHelper onoff1 (\"ns3::UdpSocketFactory\", Address (InetSocketAddress (interfaces.GetAddress (j), port)));\n          onoff1.SetAttribute (\"OnTime\", StringValue (\"ns3::ConstantRandomVariable[Constant=1.0]\"));\n          onoff1.SetAttribute (\"OffTime\", StringValue (\"ns3::ConstantRandomVariable[Constant=0.0]\"));\n\n          if (j != clientNode)\n            {\n              ApplicationContainer apps1 = onoff1.Install (nodes.Get (clientNode));\n              Ptr<UniformRandomVariable> var = CreateObject<UniformRandomVariable> ();\n              apps1.Start (Seconds (var->GetValue (m_dataStart, m_dataStart + 1)));\n              apps1.Stop (Seconds (m_totalTime));\n            }\n        }\n    }\n}\n\nvoid\nTdmaExample::InsertIntoTxp ()\n{\n  m_transmitRangeMap.insert (std::pair<double, double> (100.0, 1.2251));\n  m_transmitRangeMap.insert (std::pair<double, double> (130.0, 3.5049));\n  m_transmitRangeMap.insert (std::pair<double, double> (150.0, 4.7478));\n  m_transmitRangeMap.insert (std::pair<double, double> (180.0, 6.3314));\n  m_transmitRangeMap.insert (std::pair<double, double> (200.0, 7.2457));\n  m_transmitRangeMap.insert (std::pair<double, double> (300.0, 10.7675));\n  m_transmitRangeMap.insert (std::pair<double, double> (350.0, 12.1065));\n  m_transmitRangeMap.insert (std::pair<double, double> (400.0, 13.2663));\n  m_transmitRangeMap.insert (std::pair<double, double> (450.0, 14.2893));\n  m_transmitRangeMap.insert (std::pair<double, double> (500.0, 15.2045));\n  m_transmitRangeMap.insert (std::pair<double, double> (550.0, 16.0323));\n  m_transmitRangeMap.insert (std::pair<double, double> (600.0, 16.7881));\n  m_transmitRangeMap.insert (std::pair<double, double> (650.0, 17.4834));\n  m_transmitRangeMap.insert (std::pair<double, double> (700.0, 18.1271));\n  m_transmitRangeMap.insert (std::pair<double, double> (800.0, 19.2869));\n  m_transmitRangeMap.insert (std::pair<double, double> (900.0, 20.3099));\n  m_transmitRangeMap.insert (std::pair<double, double> (950.0, 20.7796));\n  m_transmitRangeMap.insert (std::pair<double, double> (1000.0, 21.2251));\n  m_transmitRangeMap.insert (std::pair<double, double> (27800.0, 50.0));\n}\n\n"
    }
  ]
}