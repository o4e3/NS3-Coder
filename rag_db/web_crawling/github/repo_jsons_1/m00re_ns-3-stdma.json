{
  "repo_name": "m00re/ns-3-stdma",
  "github_url": "https://github.com/m00re/ns-3-stdma",
  "readme": "NS-3 STDMA: Self-organizing TDMA implementation for NS-3\n========================================================\n\nThis is an implementation of the protocol Self-Organizing TDMA (STDMA) in \n[NS-3](http://www.nsnam.org/) and is envisioned to be used as a replacement\nfor the CSMA-based MAC protocol used in the 'wifi' module of NS-3. As such, \nthe provided 'stdma' module of this repository re-uses the existing \nWifiPhy-based implementation of the official NS-3 distribution.\n\nSTDMA is a time-division multiplexing based protocol initially developed for \nand standardized in the Automatic Identification System (AIS) as well as in \nVDL Mode 4 to periodically exchange positioning information between ships \nand aircrafts.\n\nIn contrast to CSMA, which employs a random access based scheme to the wireless \nchannel, STDMA implements a reservation based scheme: time is divided in so \ncalled frames that last for a certain duration, and those frames are further\nivided into equally sized transmission slots that accommodate a single packet \ntransmission. The protocol is therefore well suited to be used in active safety \nsystems such as Intelligent Transportation Systems (ITS) in general or VANETs \nin particular.\n\n1) Implementation Overview\n--------------------------\n\nThe current implementation was developed against version 3.18 of NS-3 and has \nnot been tested for more recent and neither for earlier versions of NS-3.\n\nSwitching from the CSMA-based implementation of the NS-3 wifi module to the \nabove STDMA implementation is quite simple and requires only a few line changes \nin your simulation script (see section 2 below). \n\nWhat should be kept in mind when using the STDMA implementation:\n\n - Nodes/applications need to generate packets on a periodic basis and it is \n   necessary that there is always one packet ready to be transmitted if a \n   reserved transmission slot is awaiting.\n - The minimum transmission rate supported is 2 packets per frame\n - Variable transmission rates are not supported\n\n2) How to use the STDMA implementation\n--------------------------------------\n\nIf you have the following lines of code to configure your Wifi nodes\n\n```C++\n#include \"ns3/wifi-module.h\"\n\nusing namespace ns3;\n\n// Create 10 nodes\nNodeContainer m_nodes;\nm_nodes.Create(10);\n\n// Create Wifi MAC helpers...\nWifiHelper wifiHelper = WifiHelper::Default ();\nNqosWifiMacHelper wifiMac = NqosWifiMacHelper::Default ();\n// ... and configure them as desired\nwifiHelper.SetStandard(WIFI_PHY_STANDARD_80211p_CCH);\nwifiMac.SetType (\"ns3::AdhocWifiMac\");\nwifiHelper.SetRemoteStationManager (\"ns3::ConstantRateWifiManager\",\n                                    \"DataMode\", StringValue (datarate),\n                                    \"NonUnicastMode\", StringValue (datarate));\n\n// Create the wireless channel configuration\nYansWifiChannelHelper wifiChannel;\nwifiChannel.AddPropagationLoss(\"ns3::RangePropagationLossModel\");\nwifiChannel.SetPropagationDelay(\"ns3::ConstantSpeedPropagationDelayModel\");\nYansWifiPhyHelper wifiPhy = YansWifiPhyHelper::Default();\nwifiPhy.SetChannel(wifiChannel.Create());\n\n// And finally install/apply the Wifi configuration on all nodes\nwifiHelper.Install(wifiPhy, wifiMac, m_nodes);\n```\n\nyou simply need to change the above code block to look like the one below\n\n```C++\n#include \"ns3/wifi-module.h\"\n#include \"ns3/stdma-module.h\"\n\nusing namespace ns3;\n\n// Create 10 nodes\nNodeContainer m_nodes;\nm_nodes.Create(10);\n\n// Create Wifi MAC helpers...\nstdma::StdmaHelper stdmaHelper;\nstdma::StdmaMacHelper stdmaMac = stdma::StdmaMacHelper::Default();\n// ... and configure them as desired\nstdmaHelper.SetStandard(WIFI_PHY_STANDARD_80211p_CCH);\n\n// Create the wireless channel configuration\nYansWifiChannelHelper wifiChannel;\nwifiChannel.AddPropagationLoss(\"ns3::RangePropagationLossModel\");\nwifiChannel.SetPropagationDelay(\"ns3::ConstantSpeedPropagationDelayModel\");\nYansWifiPhyHelper wifiPhy = YansWifiPhyHelper::Default();\nwifiPhy.SetChannel(wifiChannel.Create());\n\n// And finally install/apply the Wifi configuration on all nodes\nstdmaHelper.Install(wifiPhy, stdmaMac, m_nodes, startupTimes);\n```\n\nand you are ready to go. \n\n3) Complete example scenario\n--------------------------------------\n\nThe module ships with a simple but fully functional example scenario that is built\nas long as NS-3 is built with examples enabled. The source code to this example is\nlocated in src/stdma/examples/simple-stdma-example.cc and consists of a scenario\nin which 10 nodes startup simultaneously and then transmit 10 packets/sec over a \ntime duration of 20 seconds.\n",
  "examples": []
}