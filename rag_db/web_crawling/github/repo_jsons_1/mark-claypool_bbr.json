{
  "repo_name": "mark-claypool/bbr",
  "github_url": "https://github.com/mark-claypool/bbr",
  "readme": "# README\n\nBBR' source code and test scripts for ns-3 (version 3.27).\n\nSee the [WNS3 Workshop paper (CCL18b)](#ccl18b) for a peer-reviewed\noverview.\n\nSee the [Technical Report (CCL18a)](#ccl18a) for details.\n\n-- Mark Claypool [claypool@cs.wpi.edu](claypool@cs.wpi.edu)\n\n-----------------------------------\n[Directories](#dir) | [Install](#inst) | [Misc](#misc) | [ToDo](#todo) | [Referenes](#refs)\n<hr>\n\n\n## <a name=\"dir\"></a>DIRECTORIES\n\ntests/ - test scripts for BBR'.\n\nsrc/ - BBR' source code and ns-3 source files that need changes.\n\npatch/ - directory with patchfile for ns-3 allinone tree.\n\n\n## <a name=\"inst\"></a>INSTALL\n\nThese instructions are to install BBR' to the ns-allinone package\n(version 3.27).  Mileage may vary for alternate uses.\n\n**ROOT** = ns-3 all-in-one directory\n\n    e.g., /home/claypool/ns-allinone-3.27\n\n**REPO** = this git repository\n\nTo install, either see [Applying Repository Patch](#apply) or [Linking\nto Repository](#link).\n\n### <a name=\"apply\">Applying Repository Patch</a>\n\n0) Download the latest \"all in one\" zip file from:\n\n    https://www.nsnam.org/releases/\n\n1) Extract:\n\n    tar xvjf *.tar.bz2\n\n2) Apply patch:\n\n    patch -p0 < REPO/patch/*.patch\n\n2) Go to ROOT and build:\n\n    cd ROOT/\n\n    ./build.py --enable-examples --enable-tests\n\n3) Run and analyze.  Example:\n\n    cd ROOT/ns-3.27/\n\n    ./waf --run bulk \n\n### <a name=\"apply\"></a>Linking to Repository\n\n0) Download the latest \"all in one\" zip file from:\n\n    https://www.nsnam.org/releases/\n\n1) Extract:\n\n    tar xvjf *.tar.bz2\n\n2) Go to ROOT and build:\n\n    cd ROOT/\n\n    ./build.py --enable-examples --enable-tests\n\n3) Go to ROOT source(s) and link in BBR' and supporting files:\n\n    cd ROOT/ns-3.27/src/internet/model\n\n    ln -s REPO/src/bbr/*.cc .\n\n    ln -s REPO/src/bbr/*.h .\n\n    ln -sf REPO/src/internet/*.cc .\n\n    ln -sf REPO/src/internet/*.h .\n\n    ln -sf REPO/src/internet/*.h .\n\n(If using APP_PACING config, do below):\n\n    cd ROOT/ns-3.27/src/applications/model\n\n    ln -sf REPO/src/applications/*.cc .\n\n    ln -sf REPO/src/applications/*.h .\n\n4) Edit script file to build BBR':\n\n    edit ROOT/ns-3.27/src/internet/wscript\n\n  Add (line 152):\n\n        'model/tcp-bbr.cc',\n\n        'model/tcp-bbr-state.cc',\n\n  Add (line 380):\n\n          'model/tcp-bbr.h',\n\n          'model/tcp-bbr-state.h',\n\n5) Link BBR' script test:\n\n    cd ROOT/ns-3.27/examples/\n\n    ln -s REPOSITORY/bbr-tests .\n\n6) Run and analyze.  Example:\n\n    cd ROOT/ns-3.27/\n\n    ./waf --run bulk \n\n\n## <a name=\"misc\"></a>MISC\n\n### Configurations\n\n#### Pacing\n\nThere are three possible pacing configurations for BBR':\n\n1) TCP_PACING. Packet pacing is done in TCP, as per the BBR' Technical\nReport [CCL18a](#ccl18a).  This is the default configuration.\n\n2) APP_PACING. Packet pacing is NOT done in TCP.  BBR changes the\npacing rate and still expects packets to be paced, but in this\nconfiguration, the application layer must do the pacing.  The\napplication directory provides a BulkSendApplication that does pacing.\n\n3) NO_PACING. Pacing is not done at all.  In this configuration, the\nBBR' code changes slightly.  Instead of having a larger cwnd and\nhaving the pacing rate control the bandwidth, the cwnd itself is used\nto control the bandwidth.  Thus, the cwnd is set to the BDP (with any\nneeded gain adjustments) as the sole way of controlling the rate.\n\nConfigurations are controlled via PACING_CONFIG in:\n\n    ROOT/ns-3.27/src/internet/model/tcp-socket-base.h\n\ne.g., \n\n    const enum_pacing_config PACING_CONFIG = NO_PACING;\n\n#### Timing\n\nThere are two possible configurations for the round-trip time\nused in culling the bandwidth window.\n\n1) PACKET_TIME. Bandwidth window culling is done with a count of\n\"packet-timed\" round-trips, as described in [CCYJ17](#ccyj17).  This\nis the default configuration.\n\n2) WALLCLOCK_TIME.  Bandwidth window culling is done using the\nwall-clock for timing.  In this configuration, bandwidth estimates\nthat are older than the minimum round-trip time are removed from the\nbandwidth window.\n\nTime configurations for bandwidth culling are controlled via \nTIMING_CONFIG, defined in tcp-bbr.h. e.g.,\n  \n    const enum_time_config TIME_CONFIG = PACKET_TIME;\n\n\n### Buffer Limits\n\nNote, the fixed limits TCP receive and send buffers can restrict\nthroughput for some ns-3 simulations (and real TCP connections).  In\norder to have the congestion window (i.e., the bottleneck bandwidth)\nbe the limit instead, the send/receive buffers can be increased from\ntheir defaults (128k in ns-3).\n\nTo do so, change the ns-3 attributes \"SndBufSize\" and \"RcvBufSize\" via\nscript parameters.  For example, to double the default size (131072\nbytes):\n\n    Config::SetDefault(\"ns3::TcpSocket::RcvBufSize\", UintegerValue(131072*2));\n\n    Config::SetDefault(\"ns3::TcpSocket::SndBufSize\", UintegerValue(131072*2));\n\nFor reference, the source file that sets these values is:\n\n    ROOT/ns-3.27/src/internet/model/tcp-socket.cc\n\n\n## <a name=\"todo\"></a>TODO\n\nBelow are BBR features *not* currently supported by BBR' (section\nnumbers below refer to [CCYJ17](#ccyj17)):\n\n+ BBR' assumes that the application always has data to send, thus the\ntransmission rate is limited by the congestion control algorithm, not\nthe application.  BBR includes features to handle transmissions that\nare application-limited.  See Section 4.1.1.4.  This also means BBR'\ndoes not support restarting a flow from idle, a special case in BBR.\nSee Section 4.3.4.4.\n\n+ BBR' only transitions to/from PROBE_RTT from PROBE_BW, while BBR has\nadditional transitions for PROBE_RTT.  See Section 4.3.5.\n\n+ BBR' does not include the \"send quantum\" in BBR which is used to\namortize per-packet host overheads involved in the sending process.\nThe send quantum parameter can be helpful at low rates with small\npackets.  See Section 4.2.2.\n\n## <a name=\"refs\"></a>REFERENCES\n\n[CCG+17] N. Cardwell, Y. Cheng, C.S. Gunn, S.H. Yeganeh, and\nV. Jacobson.  [BBR: Congestion-Based Congestion\nControl](https://goo.gl/PLN3fA), *Communications of the ACM*, 60(2),\nFebruary 2017.\n\n[<a name=\"ccl18a\">CCL18a</a>] M. Claypool, J.W. Chung, and F. Li.\n\"BBR' - An Implementation of Bottleneck Bandwidth and Round-trip Time\nCongestion Control for ns-3\", Technical Report WPI-CS-TR-18-01,\nComputer Science, Worcester Polytechnic Institute, January 2018.\nOnline: ftp://ftp.cs.wpi.edu/pub/techreports/pdf/18-01.pdf\n\n[<a name=\"ccl18b\">CCL18b</a>] M. Claypool, J.W. Chung, and F. Li.\n[BBR' - An Implementation of Bottleneck Bandwidth and Round-trip Time\nCongestion Control for\nns-3](http://www.cs.wpi.edu/~claypool/papers/bbr-prime/), In\nProceedings of the Workshop on ns-3 (WNS3), Mangalore, India,\nJune 2018. \n\n\"BBR' - An Implementation of Bottleneck Bandwidth and Round-trip Time\nCongestion Control for ns-3\", Technical Report WPI-CS-TR-18-01,\nComputer Science, Worcester Polytechnic Institute, January 2018.\nOnline: ftp://ftp.cs.wpi.edu/pub/techreports/pdf/18-01.pdf\n\n[<a name=\"ccyj17\">CCYJ17</a>] N. Cardwell, Y. Cheng, S. H. Yeganeh,\nand V. Jacobson.  [BBR Congestion Control](https://goo.gl/dxV24D),\nIETF Draft draft-cardwell-iccrg-bbr-congestion-control-00, July 2017.\n\n-----------------------------------\n[Directories](#dir) | [Install](#inst) | [Misc](#misc) | [ToDo](#todo) | [Referenes](#refs)\n<hr>\n\n",
  "examples": []
}