{
  "repo_name": "quic-interop/quic-network-simulator",
  "github_url": "https://github.com/quic-interop/quic-network-simulator",
  "readme": "# Network Simulator for QUIC benchmarking\n\nThis project builds a test framework that can be used for benchmarking and\nmeasuring the performance of QUIC implementations under various network\nconditions. It uses the [ns-3](https://www.nsnam.org/) network simulator for\nsimulating network conditions and cross-traffic, and for bridging the real world\nwith the simulated world. It uses docker for isolating and coercing traffic\nbetween the client and server to flow through the simulated network.\n\n## Framework\n\nThe framework uses docker-compose to compose three docker images: the network\nsimulator (as found in the [sim](sim) directory), and a client and a server (as\nfound in the individual QUIC implementation directories, or for a simple shell,\nthe [endpoint](endpoint) directory).\n\nThe framework uses two networks on the host machine: `leftnet` (IPv4\n193.167.0.0/24, IPv6 fd00:cafe:cafe:0::/64) and `rightnet` (IPv4\n193.167.100.0/24, IPv6 fd00:cafe:cafe:100::/64). `leftnet` is connected to the\nclient docker image, and `rightnet` is connected to the server. The ns-3\nsimulation sits in the middle and forwards packets between `leftnet` and\n`rightnet`.\n\n```\n      +-----------------------+\n      |      client eth0      |\n      |                       |\n      |     193.167.0.100     |\n      | fd00:cafe:cafe:0::100 |\n      +----------+------------+\n                 |\n                 |\n      +----------+------------+\n      |     docker-bridge     |\n      |                       |\n      |      193.167.0.1      |\n      |  fd00:cafe:cafe:0::1  |\n+-----------------------------------+\n|     |         eth0          |     |\n|     |                       |     |\n|     |      193.167.0.2      |     |\n|     |  fd00:cafe:cafe:0::2  |     |\n|     +----------+------------+     |\n|                |                  |\n|                |                  |\n|     +----------+------------+     |\n|     |         ns3           |     |\n|     +----------+------------+     |\n|                |                  |\n|                |                  |\n|     +----------+------------+     |\n|     |         eth1          |     |\n|     |                       |     |\n|     |     193.167.100.2     |     |\n|     | fd00:cafe:cafe:100::2 |  sim|\n+-----------------------------------+\n      |     docker-bridge     |\n      |                       |\n      |     193.167.100.1     |\n      | fd00:cafe:cafe:100::1 |\n      +----------+------------+\n                 |\n                 |\n      +----------+------------+\n      |      server eth0      |\n      |                       |\n      |    193.167.100.100    |\n      |fd00:cafe:cafe:100::100|\n      +-----------------------+\n```\n\n\n## Building your own QUIC docker image\n\nThe [endpoint](endpoint) directory contains the base Docker image for an\nendpoint Docker container.  The pre-built image of this container is available\non\n[dockerhub](https://hub.docker.com/r/martenseemann/quic-network-simulator-endpoint).\n\nFollow these steps to set up your own QUIC implementation:\n\n1. Create a new directory for your implementation (say, my_quic_impl). You will\n   create two files in this directory: `Dockerfile` and `run_endpoint.sh`, as\n   described below.\n\n1.  Copy the Dockerfile below and add the commands to build your QUIC\n    implementation.\n\n    ```dockerfile\n    FROM martenseemann/quic-network-simulator-endpoint:latest\n\n    # download and build your QUIC implementation\n    # [ DO WORK HERE ]\n\n    # copy run script and run it\n    COPY run_endpoint.sh .\n    RUN chmod +x run_endpoint.sh\n    ENTRYPOINT [ \"./run_endpoint.sh\" ]\n    ```\n\n1. Now, copy the script below into `run_endpoint.sh`, and add commands as\n   instructed. Logs should be recorded in `/logs` for them to be available\n   after simulation completion (more on this later).\n\n    ```bash\n    #!/bin/bash\n    \n    # Set up the routing needed for the simulation\n    /setup.sh\n\n    # The following variables are available for use:\n    # - ROLE contains the role of this execution context, client or server\n    # - SERVER_PARAMS contains user-supplied command line parameters\n    # - CLIENT_PARAMS contains user-supplied command line parameters\n\n    if [ \"$ROLE\" == \"client\" ]; then\n        # Wait for the simulator to start up.\n        /wait-for-it.sh sim:57832 -s -t 30\n        [ INSERT COMMAND TO RUN YOUR QUIC CLIENT ]\n    elif [ \"$ROLE\" == \"server\" ]; then\n        [ INSERT COMMAND TO RUN YOUR QUIC SERVER ]\n    fi\n    ```\n\nFor an example, have a look at the [quic-go\nsetup](https://github.com/marten-seemann/quic-go-docker) or the [quicly\nsetup](https://github.com/h2o/h2o-qns).\n\n\n## Running a Simulation\n\n1. From the quic-network-simulator directory, first build the necessary images:\n\n   ```\n   CLIENT=[client directory name] \\\n   SERVER=[server directory name] \\\n   docker-compose build\n   ```\n\n   Note that you will need to run this build command any time you change the\n   client or server implementation, `Dockerfile`, or `run_endpoint.sh` file.\n\n   For instance:\n\n   ```\n   CLIENT=\"my_quic_impl\" \\\n   SERVER=\"another_quic_impl\" \\\n   docker-compose build\n   ```\n\n1. You will want to run the setup with a scenario. The scenarios that are\n   currently provided are listed below:\n   \n   * [Simple point-to-point link, with configurable link properties](sim/scenarios/simple-p2p)\n\n   * [Single TCP connection running over a configurable point-to-point link](sim/scenarios/tcp-cross-traffic)\n\n   You can now run the experiment as follows:\n   ```\n   CLIENT=[client directory name] \\\n   CLIENT_PARAMS=[params to client] \\\n   SERVER=[server directory name] \\\n   SERVER_PARAMS=[params to server] \\\n   SCENARIO=[scenario] \\\n   docker-compose up\n   ```\n\n   SERVER_PARAMS and CLIENT_PARAMS may be omitted if the corresponding QUIC\n   implementations do not require them.\n\n   For instance, the following command runs a simple point-to-point scenario and\n   specifies a command line parameter for only the client implementation:\n\n   ```\n   CLIENT=\"my_quic_impl\" \\\n   CLIENT_PARAMS=\"-p /10000.txt\" \\\n   SERVER=\"another_quic_impl\" \\\n   SCENARIO=\"simple-p2p --delay=15ms --bandwidth=10Mbps --queue=25\" \\\n   docker-compose up\n   ```\n\n   A mounted directory is provided for recording logs from the endpoints.\n   docker-compose creates a `logs/server` and `logs/client` directory from\n   the directory from which it is run. Inside the docker container, the\n   directory is available as `/logs`.\n\n\n## Debugging and FAQs\n\n1. With the server (similarly for the client) up and running, you can get a root\n   shell in the server docker container using the following:\n\n   ```bash\n   docker exec -it server /bin/bash\n   ```\n",
  "examples": []
}