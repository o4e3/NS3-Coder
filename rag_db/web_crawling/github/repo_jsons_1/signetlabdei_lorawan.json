{
  "repo_name": "signetlabdei/lorawan",
  "github_url": "https://github.com/signetlabdei/lorawan",
  "readme": "# LoRaWAN ns-3 module\n\n[![CI](https://github.com/signetlabdei/lorawan/actions/workflows/per-commit.yml/badge.svg)](https://github.com/signetlabdei/lorawan/actions)\n[![codecov](https://codecov.io/gh/signetlabdei/lorawan/graph/badge.svg?token=EVBlTb4LgQ)](https://codecov.io/gh/signetlabdei/lorawan)\n\nThis is an [ns-3](https://www.nsnam.org \"ns-3 Website\") module that can be used\nto perform simulations of a [LoRaWAN](https://lora-alliance.org/about-lorawan\n\"LoRa Alliance\") network.\n\nQuick links:\n\n* [Simulation Model Overview](https://signetlabdei.github.io/lorawan/models/build/html/lorawan.html)\n\n* [API Documentation](https://signetlabdei.github.io/lorawan/html/d5/d00/group__lorawan.html)\n\n## Getting started\n\n### Prerequisites\n\nTo run simulations using this module, you first need to install ns-3. If you are on Ubuntu/Debian/Mint, you can install the minimal required packages as follows:\n\n```bash\nsudo apt install g++ python3 cmake ninja-build git ccache\n```\n\nOtherwise please directly refer to the [prerequisites section of the ns-3 installation page](https://www.nsnam.org/wiki/Installation#Prerequisites).\n\n> Note: While the `ccache` package is not strictly required, it is highly recommended. It can significantly enhance future compilation times by saving tens of minutes, albeit with a higher disk space cost of approximately 5GB. This disk space usage can be eventually reduced through a setting.\n\nThen, you need to:\n\n1. Clone the main ns-3 codebase,\n1. Clone this repository inside the `src` directory therein, and\n1. Checkout the current ns-3 version supported by this module.\n\nTo install this module at the latest commit, you can use the following all-in-one command:\n\n```bash\ngit clone https://gitlab.com/nsnam/ns-3-dev.git && cd ns-3-dev &&\ngit clone https://github.com/signetlabdei/lorawan src/lorawan &&\ntag=$(< src/lorawan/NS3-VERSION) && tag=${tag#release } && git checkout $tag -b $tag\n```\n\n**Note**: When switching to any previous commit, *including the latest release*, always make sure to also checkout ns-3 to the correct version (`NS3-VERSION` file at the root of this repository) supported at that point in time.\n\n### Compilation\n\nNs-3 adopts a development-oriented philosophy. Before you can run anything, you'll need to compile the ns-3 code. You have two options:\n\n1. **Compile ns-3 as a whole:** Make all simulation modules available by configuring and building as follows (ensure you are in the `ns-3-dev` folder!):\n\n   ```bash\n   ./ns3 configure --enable-tests --enable-examples &&\n   ./ns3 build\n   ```\n\n1. **Focus exclusively on the lorawan module:** To expedite the compilation process, as it can take more than 30/40 minutes on slow hardware, change the configuration as follows:\n\n   ```bash\n   ./ns3 clean &&\n   ./ns3 configure --enable-tests --enable-examples --enable-modules lorawan &&\n   ./ns3 build\n   ```\n\n   The first line ensures you start from a clean build state.\n\nFinally, ensure tests run smoothly with:\n\n```bash\n./test.py\n```\n\nIf the script reports that all tests passed you are good to go.\n\nIf some tests fail or crash, consider filing an issue.\n\n## Usage examples\n\nThe module includes the following examples:\n\n* `simple-network-example`\n* `complete-network-example`\n* `network-server-example`\n* `adr-example`\n* `aloha-throughput`\n* `frame-counter-update`\n* `lora-energy-model-example`\n* `parallel-reception-example`\n\nExamples can be run via the `./ns3 run example-name` command (refer to `./ns3 run --help` for more options).\n\n## Documentation\n\n* [Simulation Model Overview](https://signetlabdei.github.io/lorawan/models/build/html/lorawan.html): A description of the foundational models of this module (source file located at `doc/lorawan.rst`).\n* [API Documentation](https://signetlabdei.github.io/lorawan/html/d5/d00/group__lorawan.html): documentation of all classes, member functions and variables generated from Doxygen comments in the source code.\n\nOther useful documentation sources:\n\n* [Ns-3 tutorial](https://www.nsnam.org/docs/tutorial/html/ \"ns-3 Tutorial\"): **Start here if you are new to ns-3!**\n* [Ns-3 manual](https://www.nsnam.org/docs/manual/html/ \"ns-3 Manual\"): Overview of the fundamental tools and abstractions in ns-3.\n* The LoRaWAN specification can be downloaded at the [LoRa Alliance\n  website](http://www.lora-alliance.org).\n\n## Getting help\n\nTo discuss and get help on how to use this module, you can open an issue here.\n\n## Contributing\n\nRefer to the [contribution guidelines](.github/CONTRIBUTING.md) for information\nabout how to contribute to this module.\n\n## Authors\n\n* Davide Magrin\n* Martina Capuzzo\n* Stefano Romagnolo\n* Michele Luvisotto\n\n## License\n\nThis software is licensed under the terms of the GNU GPLv2 (the same license\nthat is used by ns-3). See the LICENSE.md file for more details.\n\n## Acknowledgments and relevant publications\n\nThe initial version of this code was developed as part of a master's thesis at\nthe [University of Padova](https://unipd.it \"Unipd homepage\"), under the\nsupervision of Prof. Lorenzo Vangelista, Prof. Michele Zorzi and with the help\nof Marco Centenaro.\n\nPublications:\n\n* D. Magrin, M. Capuzzo and A. Zanella, \"A Thorough Study of LoRaWAN Performance Under Different\n  Parameter Settings,\" in IEEE Internet of Things Journal. 2019.\n  [Link](http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=8863372&isnumber=6702522).\n* M. Capuzzo, D. Magrin and A. Zanella, \"Confirmed traffic in LoRaWAN: Pitfalls\n  and countermeasures,\" 2018 17th Annual Mediterranean Ad Hoc Networking\n  Workshop (Med-Hoc-Net), Capri, 2018. [Link](https://ieeexplore.ieee.org/abstract/document/8407095).\n* D. Magrin, M. Centenaro and L. Vangelista, \"Performance evaluation of LoRa\n  networks in a smart city scenario,\" 2017 IEEE International Conference On\n  Communications (ICC), Paris, 2017. [Link](http://ieeexplore.ieee.org/document/7996384/).\n* Network level performances of a LoRa system (Master thesis). [Link](http://tesi.cab.unipd.it/53740/1/dissertation.pdf).\n",
  "examples": [
    {
      "file_path": "examples/adr-example.cc",
      "code": "/*\n * Copyright (c) 2018 University of Padova\n *\n * SPDX-License-Identifier: GPL-2.0-only\n *\n * Author: Davide Magrin <magrinda@dei.unipd.it>\n */\n\n/*\n * This program creates a simple network which uses an Adaptive Data Rate (ADR) algorithm to set up\n * the Spreading Factors of the devices in the Network.\n */\n\n#include \"ns3/command-line.h\"\n#include \"ns3/config.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/forwarder-helper.h\"\n#include \"ns3/gateway-lora-phy.h\"\n#include \"ns3/hex-grid-position-allocator.h\"\n#include \"ns3/log.h\"\n#include \"ns3/lora-channel.h\"\n#include \"ns3/lora-device-address-generator.h\"\n#include \"ns3/lora-helper.h\"\n#include \"ns3/lora-phy-helper.h\"\n#include \"ns3/lorawan-mac-helper.h\"\n#include \"ns3/mobility-helper.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/network-server-helper.h\"\n#include \"ns3/periodic-sender-helper.h\"\n#include \"ns3/periodic-sender.h\"\n#include \"ns3/point-to-point-module.h\"\n#include \"ns3/random-variable-stream.h\"\n#include \"ns3/rectangle.h\"\n#include \"ns3/string.h\"\n\nusing namespace ns3;\nusing namespace lorawan;\n\nNS_LOG_COMPONENT_DEFINE(\"AdrExample\");\n\n/**\n * Record a change in the data rate setting on an end device.\n *\n * @param oldDr The previous data rate value.\n * @param newDr The updated data rate value.\n */\nvoid\nOnDataRateChange(uint8_t oldDr, uint8_t newDr)\n{\n    NS_LOG_DEBUG(\"DR\" << unsigned(oldDr) << \" -> DR\" << unsigned(newDr));\n}\n\n/**\n * Record a change in the transmission power setting on an end device.\n *\n * @param oldTxPower The previous transmission power value.\n * @param newTxPower The updated transmission power value.\n */\nvoid\nOnTxPowerChange(double oldTxPower, double newTxPower)\n{\n    NS_LOG_DEBUG(oldTxPower << \" dBm -> \" << newTxPower << \" dBm\");\n}\n\nint\nmain(int argc, char* argv[])\n{\n    bool verbose = false;\n    bool adrEnabled = true;\n    bool initializeSF = false;\n    int nDevices = 400;\n    int nPeriodsOf20Minutes = 20;\n    double mobileNodeProbability = 0;\n    double sideLengthMeters = 10000;\n    int gatewayDistanceMeters = 5000;\n    double maxRandomLossDb = 10;\n    double minSpeedMetersPerSecond = 2;\n    double maxSpeedMetersPerSecond = 16;\n    std::string adrType = \"ns3::AdrComponent\";\n\n    CommandLine cmd(__FILE__);\n    cmd.AddValue(\"verbose\", \"Whether to print output or not\", verbose);\n    cmd.AddValue(\"MultipleGwCombiningMethod\", \"ns3::AdrComponent::MultipleGwCombiningMethod\");\n    cmd.AddValue(\"MultiplePacketsCombiningMethod\",\n                 \"ns3::AdrComponent::MultiplePacketsCombiningMethod\");\n    cmd.AddValue(\"HistoryRange\", \"ns3::AdrComponent::HistoryRange\");\n    cmd.AddValue(\"MType\", \"ns3::EndDeviceLorawanMac::MType\");\n    cmd.AddValue(\"EDDRAdaptation\", \"ns3::EndDeviceLorawanMac::EnableEDDataRateAdaptation\");\n    cmd.AddValue(\"ChangeTransmissionPower\", \"ns3::AdrComponent::ChangeTransmissionPower\");\n    cmd.AddValue(\"AdrEnabled\", \"Whether to enable Adaptive Data Rate (ADR)\", adrEnabled);\n    cmd.AddValue(\"nDevices\", \"Number of devices to simulate\", nDevices);\n    cmd.AddValue(\"PeriodsToSimulate\", \"Number of periods (20m) to simulate\", nPeriodsOf20Minutes);\n    cmd.AddValue(\"MobileNodeProbability\",\n                 \"Probability of a node being a mobile node\",\n                 mobileNodeProbability);\n    cmd.AddValue(\"sideLength\",\n                 \"Length (m) of the side of the rectangle nodes will be placed in\",\n                 sideLengthMeters);\n    cmd.AddValue(\"maxRandomLoss\",\n                 \"Maximum amount (dB) of the random loss component\",\n                 maxRandomLossDb);\n    cmd.AddValue(\"gatewayDistance\", \"Distance (m) between gateways\", gatewayDistanceMeters);\n    cmd.AddValue(\"initializeSF\", \"Whether to initialize the SFs\", initializeSF);\n    cmd.AddValue(\"MinSpeed\", \"Minimum speed (m/s) for mobile devices\", minSpeedMetersPerSecond);\n    cmd.AddValue(\"MaxSpeed\", \"Maximum speed (m/s) for mobile devices\", maxSpeedMetersPerSecond);\n    cmd.AddValue(\"MaxTransmissions\", \"ns3::EndDeviceLorawanMac::MaxTransmissions\");\n    cmd.Parse(argc, argv);\n\n    int gatewayRings = 2 + (std::sqrt(2) * sideLengthMeters) / (gatewayDistanceMeters);\n    int nGateways = 3 * gatewayRings * gatewayRings - 3 * gatewayRings + 1;\n\n    // Logging\n    //////////\n\n    LogComponentEnable(\"AdrExample\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraPacketTracker\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"NetworkServer\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"NetworkController\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"NetworkScheduler\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"NetworkStatus\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"EndDeviceStatus\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"AdrComponent\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"ClassAEndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LogicalLoraChannelHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"MacCommand\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"AdrExploraSf\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"AdrExploraAt\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"EndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    LogComponentEnableAll(LOG_PREFIX_FUNC);\n    LogComponentEnableAll(LOG_PREFIX_NODE);\n    LogComponentEnableAll(LOG_PREFIX_TIME);\n\n    // Set the end devices to allow data rate control (i.e. adaptive data rate) from the network\n    // server\n    Config::SetDefault(\"ns3::EndDeviceLorawanMac::ADR\", BooleanValue(true));\n\n    // Create a simple wireless channel\n    ///////////////////////////////////\n\n    Ptr<LogDistancePropagationLossModel> loss = CreateObject<LogDistancePropagationLossModel>();\n    loss->SetPathLossExponent(3.76);\n    loss->SetReference(1, 7.7);\n\n    Ptr<UniformRandomVariable> x = CreateObject<UniformRandomVariable>();\n    x->SetAttribute(\"Min\", DoubleValue(0.0));\n    x->SetAttribute(\"Max\", DoubleValue(maxRandomLossDb));\n\n    Ptr<RandomPropagationLossModel> randomLoss = CreateObject<RandomPropagationLossModel>();\n    randomLoss->SetAttribute(\"Variable\", PointerValue(x));\n\n    loss->SetNext(randomLoss);\n\n    Ptr<PropagationDelayModel> delay = CreateObject<ConstantSpeedPropagationDelayModel>();\n\n    Ptr<LoraChannel> channel = CreateObject<LoraChannel>(loss, delay);\n\n    // Helpers\n    //////////\n\n    // End device mobility\n    MobilityHelper mobilityEd;\n    MobilityHelper mobilityGw;\n    mobilityEd.SetPositionAllocator(\"ns3::RandomRectanglePositionAllocator\",\n                                    \"X\",\n                                    PointerValue(CreateObjectWithAttributes<UniformRandomVariable>(\n                                        \"Min\",\n                                        DoubleValue(-sideLengthMeters),\n                                        \"Max\",\n                                        DoubleValue(sideLengthMeters))),\n                                    \"Y\",\n                                    PointerValue(CreateObjectWithAttributes<UniformRandomVariable>(\n                                        \"Min\",\n                                        DoubleValue(-sideLengthMeters),\n                                        \"Max\",\n                                        DoubleValue(sideLengthMeters))));\n\n    // // Gateway mobility\n    // Ptr<ListPositionAllocator> positionAllocGw = CreateObject<ListPositionAllocator> ();\n    // positionAllocGw->Add (Vector (0.0, 0.0, 15.0));\n    // positionAllocGw->Add (Vector (-5000.0, -5000.0, 15.0));\n    // positionAllocGw->Add (Vector (-5000.0, 5000.0, 15.0));\n    // positionAllocGw->Add (Vector (5000.0, -5000.0, 15.0));\n    // positionAllocGw->Add (Vector (5000.0, 5000.0, 15.0));\n    // mobilityGw.SetPositionAllocator (positionAllocGw);\n    // mobilityGw.SetMobilityModel (\"ns3::ConstantPositionMobilityModel\");\n    Ptr<HexGridPositionAllocator> hexAllocator =\n        CreateObject<HexGridPositionAllocator>(gatewayDistanceMeters / 2);\n    mobilityGw.SetPositionAllocator(hexAllocator);\n    mobilityGw.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n\n    // Create the LoraPhyHelper\n    LoraPhyHelper phyHelper = LoraPhyHelper();\n    phyHelper.SetChannel(channel);\n\n    // Create the LorawanMacHelper\n    LorawanMacHelper macHelper = LorawanMacHelper();\n\n    // Create the LoraHelper\n    LoraHelper helper = LoraHelper();\n    helper.EnablePacketTracking();\n\n    ////////////////\n    // Create gateways //\n    ////////////////\n\n    NodeContainer gateways;\n    gateways.Create(nGateways);\n    mobilityGw.Install(gateways);\n\n    // Create the LoraNetDevices of the gateways\n    phyHelper.SetDeviceType(LoraPhyHelper::GW);\n    macHelper.SetDeviceType(LorawanMacHelper::GW);\n    helper.Install(phyHelper, macHelper, gateways);\n\n    // Create end devices\n    /////////////\n\n    NodeContainer endDevices;\n    endDevices.Create(nDevices);\n\n    // Install mobility model on fixed nodes\n    mobilityEd.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n    int fixedPositionNodes = double(nDevices) * (1 - mobileNodeProbability);\n    for (int i = 0; i < fixedPositionNodes; ++i)\n    {\n        mobilityEd.Install(endDevices.Get(i));\n    }\n    // Install mobility model on mobile nodes\n    mobilityEd.SetMobilityModel(\n        \"ns3::RandomWalk2dMobilityModel\",\n        \"Bounds\",\n        RectangleValue(\n            Rectangle(-sideLengthMeters, sideLengthMeters, -sideLengthMeters, sideLengthMeters)),\n        \"Distance\",\n        DoubleValue(1000),\n        \"Speed\",\n        PointerValue(CreateObjectWithAttributes<UniformRandomVariable>(\n            \"Min\",\n            DoubleValue(minSpeedMetersPerSecond),\n            \"Max\",\n            DoubleValue(maxSpeedMetersPerSecond))));\n    for (int i = fixedPositionNodes; i < (int)endDevices.GetN(); ++i)\n    {\n        mobilityEd.Install(endDevices.Get(i));\n    }\n\n    // Create a LoraDeviceAddressGenerator\n    uint8_t nwkId = 54;\n    uint32_t nwkAddr = 1864;\n    Ptr<LoraDeviceAddressGenerator> addrGen =\n        CreateObject<LoraDeviceAddressGenerator>(nwkId, nwkAddr);\n\n    // Create the LoraNetDevices of the end devices\n    phyHelper.SetDeviceType(LoraPhyHelper::ED);\n    macHelper.SetDeviceType(LorawanMacHelper::ED_A);\n    macHelper.SetAddressGenerator(addrGen);\n    macHelper.SetRegion(LorawanMacHelper::EU);\n    helper.Install(phyHelper, macHelper, endDevices);\n\n    // Install applications in end devices\n    int appPeriodSeconds = 1200; // One packet every 20 minutes\n    PeriodicSenderHelper appHelper = PeriodicSenderHelper();\n    appHelper.SetPeriod(Seconds(appPeriodSeconds));\n    ApplicationContainer appContainer = appHelper.Install(endDevices);\n\n    // Do not set spreading factors up: we will wait for the network server to do this\n    if (initializeSF)\n    {\n        LorawanMacHelper::SetSpreadingFactorsUp(endDevices, gateways, channel);\n    }\n\n    ////////////\n    // Create network server\n    ////////////\n\n    Ptr<Node> networkServer = CreateObject<Node>();\n\n    // PointToPoint links between gateways and server\n    PointToPointHelper p2p;\n    p2p.SetDeviceAttribute(\"DataRate\", StringValue(\"5Mbps\"));\n    p2p.SetChannelAttribute(\"Delay\", StringValue(\"2ms\"));\n    // Store network server app registration details for later\n    P2PGwRegistration_t gwRegistration;\n    for (auto gw = gateways.Begin(); gw != gateways.End(); ++gw)\n    {\n        auto container = p2p.Install(networkServer, *gw);\n        auto serverP2PNetDev = DynamicCast<PointToPointNetDevice>(container.Get(0));\n        gwRegistration.emplace_back(serverP2PNetDev, *gw);\n    }\n\n    // Install the NetworkServer application on the network server\n    NetworkServerHelper networkServerHelper;\n    networkServerHelper.EnableAdr(adrEnabled);\n    networkServerHelper.SetAdr(adrType);\n    networkServerHelper.SetGatewaysP2P(gwRegistration);\n    networkServerHelper.SetEndDevices(endDevices);\n    networkServerHelper.Install(networkServer);\n\n    // Install the Forwarder application on the gateways\n    ForwarderHelper forwarderHelper;\n    forwarderHelper.Install(gateways);\n\n    // Connect our traces\n    Config::ConnectWithoutContext(\n        \"/NodeList/*/DeviceList/0/$ns3::LoraNetDevice/Mac/$ns3::EndDeviceLorawanMac/TxPower\",\n        MakeCallback(&OnTxPowerChange));\n    Config::ConnectWithoutContext(\n        \"/NodeList/*/DeviceList/0/$ns3::LoraNetDevice/Mac/$ns3::EndDeviceLorawanMac/DataRate\",\n        MakeCallback(&OnDataRateChange));\n\n    // Activate printing of end device MAC parameters\n    Time stateSamplePeriod = Seconds(1200);\n    helper.EnablePeriodicDeviceStatusPrinting(endDevices,\n                                              gateways,\n                                              \"nodeData.txt\",\n                                              stateSamplePeriod);\n    helper.EnablePeriodicPhyPerformancePrinting(gateways, \"phyPerformance.txt\", stateSamplePeriod);\n    helper.EnablePeriodicGlobalPerformancePrinting(\"globalPerformance.txt\", stateSamplePeriod);\n\n    LoraPacketTracker& tracker = helper.GetPacketTracker();\n\n    // Start simulation\n    Time simulationTime = Seconds(1200 * nPeriodsOf20Minutes);\n    Simulator::Stop(simulationTime);\n    Simulator::Run();\n    Simulator::Destroy();\n\n    std::cout << tracker.CountMacPacketsGlobally(Seconds(1200 * (nPeriodsOf20Minutes - 2)),\n                                                 Seconds(1200 * (nPeriodsOf20Minutes - 1)))\n              << std::endl;\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/aloha-throughput.cc",
      "code": "/*\n * Copyright (c) 2017 University of Padova\n *\n * SPDX-License-Identifier: GPL-2.0-only\n *\n * Author: Davide Magrin <magrinda@dei.unipd.it>\n */\n\n#include \"ns3/building-allocator.h\"\n#include \"ns3/building-penetration-loss.h\"\n#include \"ns3/buildings-helper.h\"\n#include \"ns3/callback.h\"\n#include \"ns3/command-line.h\"\n#include \"ns3/constant-position-mobility-model.h\"\n#include \"ns3/correlated-shadowing-propagation-loss-model.h\"\n#include \"ns3/double.h\"\n#include \"ns3/end-device-lora-phy.h\"\n#include \"ns3/end-device-lorawan-mac.h\"\n#include \"ns3/forwarder-helper.h\"\n#include \"ns3/gateway-lora-phy.h\"\n#include \"ns3/gateway-lorawan-mac.h\"\n#include \"ns3/log.h\"\n#include \"ns3/lora-device-address.h\"\n#include \"ns3/lora-frame-header.h\"\n#include \"ns3/lora-helper.h\"\n#include \"ns3/lora-net-device.h\"\n#include \"ns3/lora-phy.h\"\n#include \"ns3/lorawan-mac-header.h\"\n#include \"ns3/mobility-helper.h\"\n#include \"ns3/network-server-helper.h\"\n#include \"ns3/node-container.h\"\n#include \"ns3/periodic-sender-helper.h\"\n#include \"ns3/pointer.h\"\n#include \"ns3/position-allocator.h\"\n#include \"ns3/random-variable-stream.h\"\n#include \"ns3/simulator.h\"\n\n#include <algorithm>\n#include <ctime>\n\nusing namespace ns3;\nusing namespace lorawan;\n\nNS_LOG_COMPONENT_DEFINE(\"AlohaThroughput\");\n\n// Network settings\nint nDevices = 200;                 //!< Number of end device nodes to create\nint nGateways = 1;                  //!< Number of gateway nodes to create\ndouble radiusMeters = 1000;         //!< Radius (m) of the deployment\ndouble simulationTimeSeconds = 100; //!< Scenario duration (s) in simulated time\n\n// Channel model\nbool realisticChannelModel = false; //!< Whether to use a more realistic channel model with\n                                    //!< buildings and correlated shadowing\n\n/** Record received pkts by Data Rate (DR) [index 0 -> DR5, index 5 -> DR0]. */\nauto packetsSent = std::vector<int>(6, 0);\n/** Record received pkts by Data Rate (DR) [index 0 -> DR5, index 5 -> DR0]. */\nauto packetsReceived = std::vector<int>(6, 0);\n\n/**\n * Record the beginning of a transmission by an end device.\n *\n * @param packet A pointer to the packet sent.\n * @param senderNodeId Node id of the sender end device.\n */\nvoid\nOnTransmissionCallback(Ptr<const Packet> packet, uint32_t senderNodeId)\n{\n    NS_LOG_FUNCTION(packet << senderNodeId);\n    LoraTag tag;\n    packet->PeekPacketTag(tag);\n    packetsSent.at(tag.GetSpreadingFactor() - 7)++;\n}\n\n/**\n * Record the correct reception of a packet by a gateway.\n *\n * @param packet A pointer to the packet received.\n * @param receiverNodeId Node id of the receiver gateway.\n */\nvoid\nOnPacketReceptionCallback(Ptr<const Packet> packet, uint32_t receiverNodeId)\n{\n    NS_LOG_FUNCTION(packet << receiverNodeId);\n    LoraTag tag;\n    packet->PeekPacketTag(tag);\n    packetsReceived.at(tag.GetSpreadingFactor() - 7)++;\n}\n\nint\nmain(int argc, char* argv[])\n{\n    std::string interferenceMatrix = \"aloha\";\n\n    CommandLine cmd(__FILE__);\n    cmd.AddValue(\"nDevices\", \"Number of end devices to include in the simulation\", nDevices);\n    cmd.AddValue(\"simulationTime\", \"Simulation Time (s)\", simulationTimeSeconds);\n    cmd.AddValue(\"interferenceMatrix\",\n                 \"Interference matrix to use [aloha, goursaud]\",\n                 interferenceMatrix);\n    cmd.AddValue(\"radius\", \"Radius (m) of the deployment\", radiusMeters);\n    cmd.Parse(argc, argv);\n\n    int appPeriodSeconds = simulationTimeSeconds;\n\n    // Set up logging\n    LogComponentEnable(\"AlohaThroughput\", LOG_LEVEL_ALL);\n\n    // Make all devices use SF7 (i.e., DR5)\n    // Config::SetDefault (\"ns3::EndDeviceLorawanMac::DataRate\", UintegerValue (5));\n\n    if (interferenceMatrix == \"aloha\")\n    {\n        LoraInterferenceHelper::collisionMatrix = LoraInterferenceHelper::ALOHA;\n    }\n    else if (interferenceMatrix == \"goursaud\")\n    {\n        LoraInterferenceHelper::collisionMatrix = LoraInterferenceHelper::GOURSAUD;\n    }\n\n    /***********\n     *  Setup  *\n     ***********/\n\n    // Mobility\n    MobilityHelper mobility;\n    mobility.SetPositionAllocator(\"ns3::UniformDiscPositionAllocator\",\n                                  \"rho\",\n                                  DoubleValue(radiusMeters),\n                                  \"X\",\n                                  DoubleValue(0.0),\n                                  \"Y\",\n                                  DoubleValue(0.0));\n    mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n\n    /************************\n     *  Create the channel  *\n     ************************/\n\n    // Create the lora channel object\n    Ptr<LogDistancePropagationLossModel> loss = CreateObject<LogDistancePropagationLossModel>();\n    loss->SetPathLossExponent(3.76);\n    loss->SetReference(1, 7.7);\n\n    if (realisticChannelModel)\n    {\n        // Create the correlated shadowing component\n        Ptr<CorrelatedShadowingPropagationLossModel> shadowing =\n            CreateObject<CorrelatedShadowingPropagationLossModel>();\n\n        // Aggregate shadowing to the logdistance loss\n        loss->SetNext(shadowing);\n\n        // Add the effect to the channel propagation loss\n        Ptr<BuildingPenetrationLoss> buildingLoss = CreateObject<BuildingPenetrationLoss>();\n\n        shadowing->SetNext(buildingLoss);\n    }\n\n    Ptr<PropagationDelayModel> delay = CreateObject<ConstantSpeedPropagationDelayModel>();\n\n    Ptr<LoraChannel> channel = CreateObject<LoraChannel>(loss, delay);\n\n    /************************\n     *  Create the helpers  *\n     ************************/\n\n    // Create the LoraPhyHelper\n    LoraPhyHelper phyHelper = LoraPhyHelper();\n    phyHelper.SetChannel(channel);\n\n    // Create the LorawanMacHelper\n    LorawanMacHelper macHelper = LorawanMacHelper();\n    macHelper.SetRegion(LorawanMacHelper::ALOHA);\n\n    // Create the LoraHelper\n    LoraHelper helper = LoraHelper();\n    helper.EnablePacketTracking(); // Output filename\n\n    // Create the NetworkServerHelper\n    NetworkServerHelper nsHelper = NetworkServerHelper();\n\n    // Create the ForwarderHelper\n    ForwarderHelper forHelper = ForwarderHelper();\n\n    /************************\n     *  Create End Devices  *\n     ************************/\n\n    // Create a set of nodes\n    NodeContainer endDevices;\n    endDevices.Create(nDevices);\n\n    // Assign a mobility model to each node\n    mobility.Install(endDevices);\n\n    // Make it so that nodes are at a certain height > 0\n    for (auto j = endDevices.Begin(); j != endDevices.End(); ++j)\n    {\n        Ptr<MobilityModel> mobility = (*j)->GetObject<MobilityModel>();\n        Vector position = mobility->GetPosition();\n        position.z = 1.2;\n        mobility->SetPosition(position);\n    }\n\n    // Create the LoraNetDevices of the end devices\n    uint8_t nwkId = 54;\n    uint32_t nwkAddr = 1864;\n    Ptr<LoraDeviceAddressGenerator> addrGen =\n        CreateObject<LoraDeviceAddressGenerator>(nwkId, nwkAddr);\n\n    // Create the LoraNetDevices of the end devices\n    macHelper.SetAddressGenerator(addrGen);\n    phyHelper.SetDeviceType(LoraPhyHelper::ED);\n    macHelper.SetDeviceType(LorawanMacHelper::ED_A);\n    helper.Install(phyHelper, macHelper, endDevices);\n\n    // Now end devices are connected to the channel\n\n    // Connect trace sources\n    for (auto j = endDevices.Begin(); j != endDevices.End(); ++j)\n    {\n        Ptr<Node> node = *j;\n        Ptr<LoraNetDevice> loraNetDevice = DynamicCast<LoraNetDevice>(node->GetDevice(0));\n        Ptr<LoraPhy> phy = loraNetDevice->GetPhy();\n    }\n\n    /*********************\n     *  Create Gateways  *\n     *********************/\n\n    // Create the gateway nodes (allocate them uniformly on the disc)\n    NodeContainer gateways;\n    gateways.Create(nGateways);\n\n    Ptr<ListPositionAllocator> allocator = CreateObject<ListPositionAllocator>();\n    // Make it so that nodes are at a certain height > 0\n    allocator->Add(Vector(0.0, 0.0, 15.0));\n    mobility.SetPositionAllocator(allocator);\n    mobility.Install(gateways);\n\n    // Create a netdevice for each gateway\n    phyHelper.SetDeviceType(LoraPhyHelper::GW);\n    macHelper.SetDeviceType(LorawanMacHelper::GW);\n    helper.Install(phyHelper, macHelper, gateways);\n\n    NS_LOG_DEBUG(\"Completed configuration\");\n\n    /*********************************************\n     *  Install applications on the end devices  *\n     *********************************************/\n\n    Time appStopTime = Seconds(simulationTimeSeconds);\n    int packetSize = 50;\n    PeriodicSenderHelper appHelper = PeriodicSenderHelper();\n    appHelper.SetPeriod(Seconds(appPeriodSeconds));\n    appHelper.SetPacketSize(packetSize);\n    ApplicationContainer appContainer = appHelper.Install(endDevices);\n\n    appContainer.Start(Time(0));\n    appContainer.Stop(appStopTime);\n\n    std::ofstream outputFile;\n    // Delete contents of the file as it is opened\n    outputFile.open(\"durations.txt\", std::ofstream::out | std::ofstream::trunc);\n    for (uint8_t sf = 7; sf <= 12; sf++)\n    {\n        LoraTxParameters txParams;\n        txParams.sf = sf;\n        txParams.headerDisabled = false;\n        txParams.codingRate = 1;\n        txParams.bandwidthHz = 125000;\n        txParams.nPreamble = 8;\n        txParams.crcEnabled = true;\n        txParams.lowDataRateOptimizationEnabled = LoraPhy::GetTSym(txParams) > MilliSeconds(16);\n        Ptr<Packet> pkt = Create<Packet>(packetSize);\n\n        LoraFrameHeader frameHdr = LoraFrameHeader();\n        frameHdr.SetAsUplink();\n        frameHdr.SetFPort(1);\n        frameHdr.SetAddress(LoraDeviceAddress());\n        frameHdr.SetAdr(false);\n        frameHdr.SetAdrAckReq(false);\n        frameHdr.SetFCnt(0);\n        pkt->AddHeader(frameHdr);\n\n        LorawanMacHeader macHdr = LorawanMacHeader();\n        macHdr.SetMType(LorawanMacHeader::UNCONFIRMED_DATA_UP);\n        macHdr.SetMajor(1);\n        pkt->AddHeader(macHdr);\n\n        outputFile << LoraPhy::GetOnAirTime(pkt, txParams).GetMicroSeconds() << \" \";\n    }\n    outputFile.close();\n\n    /**************************\n     *  Create network server  *\n     ***************************/\n\n    // Create the network server node\n    Ptr<Node> networkServer = CreateObject<Node>();\n\n    // PointToPoint links between gateways and server\n    PointToPointHelper p2p;\n    p2p.SetDeviceAttribute(\"DataRate\", StringValue(\"5Mbps\"));\n    p2p.SetChannelAttribute(\"Delay\", StringValue(\"2ms\"));\n    // Store network server app registration details for later\n    P2PGwRegistration_t gwRegistration;\n    for (auto gw = gateways.Begin(); gw != gateways.End(); ++gw)\n    {\n        auto container = p2p.Install(networkServer, *gw);\n        auto serverP2PNetDev = DynamicCast<PointToPointNetDevice>(container.Get(0));\n        gwRegistration.emplace_back(serverP2PNetDev, *gw);\n    }\n\n    // Create a network server for the network\n    nsHelper.SetGatewaysP2P(gwRegistration);\n    nsHelper.SetEndDevices(endDevices);\n    nsHelper.Install(networkServer);\n\n    // Create a forwarder for each gateway\n    forHelper.Install(gateways);\n\n    // Install trace sources\n    for (auto node = gateways.Begin(); node != gateways.End(); node++)\n    {\n        DynamicCast<LoraNetDevice>((*node)->GetDevice(0))\n            ->GetPhy()\n            ->TraceConnectWithoutContext(\"ReceivedPacket\", MakeCallback(OnPacketReceptionCallback));\n    }\n\n    // Install trace sources\n    for (auto node = endDevices.Begin(); node != endDevices.End(); node++)\n    {\n        DynamicCast<LoraNetDevice>((*node)->GetDevice(0))\n            ->GetPhy()\n            ->TraceConnectWithoutContext(\"StartSending\", MakeCallback(OnTransmissionCallback));\n    }\n\n    LorawanMacHelper::SetSpreadingFactorsUp(endDevices, gateways, channel);\n\n    ////////////////\n    // Simulation //\n    ////////////////\n\n    Simulator::Stop(appStopTime + Hours(1));\n\n    NS_LOG_INFO(\"Running simulation...\");\n    Simulator::Run();\n\n    Simulator::Destroy();\n\n    /////////////////////////////\n    // Print results to stdout //\n    /////////////////////////////\n    NS_LOG_INFO(\"Computing performance metrics...\");\n\n    for (int i = 0; i < 6; i++)\n    {\n        std::cout << packetsSent.at(i) << \" \" << packetsReceived.at(i) << std::endl;\n    }\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/complete-network-example.cc",
      "code": "/*\n * Copyright (c) 2017 University of Padova\n *\n * SPDX-License-Identifier: GPL-2.0-only\n *\n * Author: Davide Magrin <magrinda@dei.unipd.it>\n */\n\n/*\n * This script simulates a complex scenario with multiple gateways and end\n * devices. The metric of interest for this script is the throughput of the\n * network.\n */\n\n#include \"ns3/building-allocator.h\"\n#include \"ns3/building-penetration-loss.h\"\n#include \"ns3/buildings-helper.h\"\n#include \"ns3/class-a-end-device-lorawan-mac.h\"\n#include \"ns3/command-line.h\"\n#include \"ns3/constant-position-mobility-model.h\"\n#include \"ns3/correlated-shadowing-propagation-loss-model.h\"\n#include \"ns3/double.h\"\n#include \"ns3/end-device-lora-phy.h\"\n#include \"ns3/forwarder-helper.h\"\n#include \"ns3/gateway-lora-phy.h\"\n#include \"ns3/gateway-lorawan-mac.h\"\n#include \"ns3/log.h\"\n#include \"ns3/lora-helper.h\"\n#include \"ns3/mobility-helper.h\"\n#include \"ns3/network-server-helper.h\"\n#include \"ns3/node-container.h\"\n#include \"ns3/periodic-sender-helper.h\"\n#include \"ns3/pointer.h\"\n#include \"ns3/position-allocator.h\"\n#include \"ns3/random-variable-stream.h\"\n#include \"ns3/simulator.h\"\n\n#include <algorithm>\n#include <ctime>\n\nusing namespace ns3;\nusing namespace lorawan;\n\nNS_LOG_COMPONENT_DEFINE(\"ComplexLorawanNetworkExample\");\n\n// Network settings\nint nDevices = 200;                 //!< Number of end device nodes to create\nint nGateways = 1;                  //!< Number of gateway nodes to create\ndouble radiusMeters = 6400;         //!< Radius (m) of the deployment\ndouble simulationTimeSeconds = 600; //!< Scenario duration (s) in simulated time\n\n// Channel model\nbool realisticChannelModel = false; //!< Whether to use a more realistic channel model with\n                                    //!< Buildings and correlated shadowing\n\nint appPeriodSeconds = 600; //!< Duration (s) of the inter-transmission time of end devices\n\n// Output control\nbool printBuildingInfo = true; //!< Whether to print building information\n\nint\nmain(int argc, char* argv[])\n{\n    CommandLine cmd(__FILE__);\n    cmd.AddValue(\"nDevices\", \"Number of end devices to include in the simulation\", nDevices);\n    cmd.AddValue(\"radius\", \"The radius (m) of the area to simulate\", radiusMeters);\n    cmd.AddValue(\"realisticChannel\",\n                 \"Whether to use a more realistic channel model\",\n                 realisticChannelModel);\n    cmd.AddValue(\"simulationTime\", \"The time (s) for which to simulate\", simulationTimeSeconds);\n    cmd.AddValue(\"appPeriod\",\n                 \"The period in seconds to be used by periodically transmitting applications\",\n                 appPeriodSeconds);\n    cmd.AddValue(\"print\", \"Whether or not to print building information\", printBuildingInfo);\n    cmd.Parse(argc, argv);\n\n    // Set up logging\n    LogComponentEnable(\"ComplexLorawanNetworkExample\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LoraChannel\", LOG_LEVEL_INFO);\n    // LogComponentEnable(\"LoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"EndDeviceLoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"GatewayLoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LoraInterferenceHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"EndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"ClassAEndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"GatewayLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LogicalLoraChannelHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LogicalLoraChannel\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LoraHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LoraPhyHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LorawanMacHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"PeriodicSenderHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"PeriodicSender\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LorawanMacHeader\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LoraFrameHeader\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"NetworkScheduler\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"NetworkServer\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"NetworkStatus\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"NetworkController\", LOG_LEVEL_ALL);\n\n    /***********\n     *  Setup  *\n     ***********/\n\n    // Create the time value from the period\n    Time appPeriod = Seconds(appPeriodSeconds);\n\n    // Mobility\n    MobilityHelper mobility;\n    mobility.SetPositionAllocator(\"ns3::UniformDiscPositionAllocator\",\n                                  \"rho\",\n                                  DoubleValue(radiusMeters),\n                                  \"X\",\n                                  DoubleValue(0.0),\n                                  \"Y\",\n                                  DoubleValue(0.0));\n    mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n\n    /************************\n     *  Create the channel  *\n     ************************/\n\n    // Create the lora channel object\n    Ptr<LogDistancePropagationLossModel> loss = CreateObject<LogDistancePropagationLossModel>();\n    loss->SetPathLossExponent(3.76);\n    loss->SetReference(1, 7.7);\n\n    if (realisticChannelModel)\n    {\n        // Create the correlated shadowing component\n        Ptr<CorrelatedShadowingPropagationLossModel> shadowing =\n            CreateObject<CorrelatedShadowingPropagationLossModel>();\n\n        // Aggregate shadowing to the logdistance loss\n        loss->SetNext(shadowing);\n\n        // Add the effect to the channel propagation loss\n        Ptr<BuildingPenetrationLoss> buildingLoss = CreateObject<BuildingPenetrationLoss>();\n\n        shadowing->SetNext(buildingLoss);\n    }\n\n    Ptr<PropagationDelayModel> delay = CreateObject<ConstantSpeedPropagationDelayModel>();\n\n    Ptr<LoraChannel> channel = CreateObject<LoraChannel>(loss, delay);\n\n    /************************\n     *  Create the helpers  *\n     ************************/\n\n    // Create the LoraPhyHelper\n    LoraPhyHelper phyHelper = LoraPhyHelper();\n    phyHelper.SetChannel(channel);\n\n    // Create the LorawanMacHelper\n    LorawanMacHelper macHelper = LorawanMacHelper();\n\n    // Create the LoraHelper\n    LoraHelper helper = LoraHelper();\n    helper.EnablePacketTracking(); // Output filename\n    // helper.EnableSimulationTimePrinting ();\n\n    // Create the NetworkServerHelper\n    NetworkServerHelper nsHelper = NetworkServerHelper();\n\n    // Create the ForwarderHelper\n    ForwarderHelper forHelper = ForwarderHelper();\n\n    /************************\n     *  Create End Devices  *\n     ************************/\n\n    // Create a set of nodes\n    NodeContainer endDevices;\n    endDevices.Create(nDevices);\n\n    // Assign a mobility model to each node\n    mobility.Install(endDevices);\n\n    // Make it so that nodes are at a certain height > 0\n    for (auto j = endDevices.Begin(); j != endDevices.End(); ++j)\n    {\n        Ptr<MobilityModel> mobility = (*j)->GetObject<MobilityModel>();\n        Vector position = mobility->GetPosition();\n        position.z = 1.2;\n        mobility->SetPosition(position);\n    }\n\n    // Create the LoraNetDevices of the end devices\n    uint8_t nwkId = 54;\n    uint32_t nwkAddr = 1864;\n    Ptr<LoraDeviceAddressGenerator> addrGen =\n        CreateObject<LoraDeviceAddressGenerator>(nwkId, nwkAddr);\n\n    // Create the LoraNetDevices of the end devices\n    macHelper.SetAddressGenerator(addrGen);\n    phyHelper.SetDeviceType(LoraPhyHelper::ED);\n    macHelper.SetDeviceType(LorawanMacHelper::ED_A);\n    helper.Install(phyHelper, macHelper, endDevices);\n\n    // Now end devices are connected to the channel\n\n    // Connect trace sources\n    for (auto j = endDevices.Begin(); j != endDevices.End(); ++j)\n    {\n        Ptr<Node> node = *j;\n        Ptr<LoraNetDevice> loraNetDevice = DynamicCast<LoraNetDevice>(node->GetDevice(0));\n        Ptr<LoraPhy> phy = loraNetDevice->GetPhy();\n    }\n\n    /*********************\n     *  Create Gateways  *\n     *********************/\n\n    // Create the gateway nodes (allocate them uniformly on the disc)\n    NodeContainer gateways;\n    gateways.Create(nGateways);\n\n    Ptr<ListPositionAllocator> allocator = CreateObject<ListPositionAllocator>();\n    // Make it so that nodes are at a certain height > 0\n    allocator->Add(Vector(0.0, 0.0, 15.0));\n    mobility.SetPositionAllocator(allocator);\n    mobility.Install(gateways);\n\n    // Create a netdevice for each gateway\n    phyHelper.SetDeviceType(LoraPhyHelper::GW);\n    macHelper.SetDeviceType(LorawanMacHelper::GW);\n    helper.Install(phyHelper, macHelper, gateways);\n\n    /**********************\n     *  Handle buildings  *\n     **********************/\n\n    double xLength = 130;\n    double deltaX = 32;\n    double yLength = 64;\n    double deltaY = 17;\n    int gridWidth = 2 * radiusMeters / (xLength + deltaX);\n    int gridHeight = 2 * radiusMeters / (yLength + deltaY);\n    if (!realisticChannelModel)\n    {\n        gridWidth = 0;\n        gridHeight = 0;\n    }\n    Ptr<GridBuildingAllocator> gridBuildingAllocator;\n    gridBuildingAllocator = CreateObject<GridBuildingAllocator>();\n    gridBuildingAllocator->SetAttribute(\"GridWidth\", UintegerValue(gridWidth));\n    gridBuildingAllocator->SetAttribute(\"LengthX\", DoubleValue(xLength));\n    gridBuildingAllocator->SetAttribute(\"LengthY\", DoubleValue(yLength));\n    gridBuildingAllocator->SetAttribute(\"DeltaX\", DoubleValue(deltaX));\n    gridBuildingAllocator->SetAttribute(\"DeltaY\", DoubleValue(deltaY));\n    gridBuildingAllocator->SetAttribute(\"Height\", DoubleValue(6));\n    gridBuildingAllocator->SetBuildingAttribute(\"NRoomsX\", UintegerValue(2));\n    gridBuildingAllocator->SetBuildingAttribute(\"NRoomsY\", UintegerValue(4));\n    gridBuildingAllocator->SetBuildingAttribute(\"NFloors\", UintegerValue(2));\n    gridBuildingAllocator->SetAttribute(\n        \"MinX\",\n        DoubleValue(-gridWidth * (xLength + deltaX) / 2 + deltaX / 2));\n    gridBuildingAllocator->SetAttribute(\n        \"MinY\",\n        DoubleValue(-gridHeight * (yLength + deltaY) / 2 + deltaY / 2));\n    BuildingContainer bContainer = gridBuildingAllocator->Create(gridWidth * gridHeight);\n\n    BuildingsHelper::Install(endDevices);\n    BuildingsHelper::Install(gateways);\n\n    // Print the buildings\n    if (printBuildingInfo)\n    {\n        std::ofstream myfile;\n        myfile.open(\"buildings.txt\");\n        std::vector<Ptr<Building>>::const_iterator it;\n        int j = 1;\n        for (it = bContainer.Begin(); it != bContainer.End(); ++it, ++j)\n        {\n            Box boundaries = (*it)->GetBoundaries();\n            myfile << \"set object \" << j << \" rect from \" << boundaries.xMin << \",\"\n                   << boundaries.yMin << \" to \" << boundaries.xMax << \",\" << boundaries.yMax\n                   << std::endl;\n        }\n        myfile.close();\n    }\n\n    /**********************************************\n     *  Set up the end device's spreading factor  *\n     **********************************************/\n\n    LorawanMacHelper::SetSpreadingFactorsUp(endDevices, gateways, channel);\n\n    NS_LOG_DEBUG(\"Completed configuration\");\n\n    /*********************************************\n     *  Install applications on the end devices  *\n     *********************************************/\n\n    Time appStopTime = Seconds(simulationTimeSeconds);\n    PeriodicSenderHelper appHelper = PeriodicSenderHelper();\n    appHelper.SetPeriod(Seconds(appPeriodSeconds));\n    appHelper.SetPacketSize(23);\n    Ptr<RandomVariableStream> rv =\n        CreateObjectWithAttributes<UniformRandomVariable>(\"Min\",\n                                                          DoubleValue(0),\n                                                          \"Max\",\n                                                          DoubleValue(10));\n    ApplicationContainer appContainer = appHelper.Install(endDevices);\n\n    appContainer.Start(Time(0));\n    appContainer.Stop(appStopTime);\n\n    /**************************\n     *  Create network server  *\n     ***************************/\n\n    // Create the network server node\n    Ptr<Node> networkServer = CreateObject<Node>();\n\n    // PointToPoint links between gateways and server\n    PointToPointHelper p2p;\n    p2p.SetDeviceAttribute(\"DataRate\", StringValue(\"5Mbps\"));\n    p2p.SetChannelAttribute(\"Delay\", StringValue(\"2ms\"));\n    // Store network server app registration details for later\n    P2PGwRegistration_t gwRegistration;\n    for (auto gw = gateways.Begin(); gw != gateways.End(); ++gw)\n    {\n        auto container = p2p.Install(networkServer, *gw);\n        auto serverP2PNetDev = DynamicCast<PointToPointNetDevice>(container.Get(0));\n        gwRegistration.emplace_back(serverP2PNetDev, *gw);\n    }\n\n    // Create a network server for the network\n    nsHelper.SetGatewaysP2P(gwRegistration);\n    nsHelper.SetEndDevices(endDevices);\n    nsHelper.Install(networkServer);\n\n    // Create a forwarder for each gateway\n    forHelper.Install(gateways);\n\n    ////////////////\n    // Simulation //\n    ////////////////\n\n    Simulator::Stop(appStopTime + Hours(1));\n\n    NS_LOG_INFO(\"Running simulation...\");\n    Simulator::Run();\n\n    Simulator::Destroy();\n\n    ///////////////////////////\n    // Print results to file //\n    ///////////////////////////\n    NS_LOG_INFO(\"Computing performance metrics...\");\n\n    LoraPacketTracker& tracker = helper.GetPacketTracker();\n    std::cout << tracker.CountMacPacketsGlobally(Time(0), appStopTime + Hours(1)) << std::endl;\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/frame-counter-update.cc",
      "code": "/*\n * Copyright (c) 2017 University of Padova\n *\n * SPDX-License-Identifier: GPL-2.0-only\n *\n * Author: Davide Magrin <magrinda@dei.unipd.it>\n */\n\n/*\n * This script simulates a complex scenario with multiple gateways and end\n * devices. The metric of interest for this script is the throughput of the\n * network.\n */\n\n#include \"ns3/building-allocator.h\"\n#include \"ns3/building-penetration-loss.h\"\n#include \"ns3/buildings-helper.h\"\n#include \"ns3/callback.h\"\n#include \"ns3/class-a-end-device-lorawan-mac.h\"\n#include \"ns3/command-line.h\"\n#include \"ns3/constant-position-mobility-model.h\"\n#include \"ns3/correlated-shadowing-propagation-loss-model.h\"\n#include \"ns3/double.h\"\n#include \"ns3/end-device-lora-phy.h\"\n#include \"ns3/forwarder-helper.h\"\n#include \"ns3/gateway-lora-phy.h\"\n#include \"ns3/gateway-lorawan-mac.h\"\n#include \"ns3/log.h\"\n#include \"ns3/lora-helper.h\"\n#include \"ns3/lorawan-mac-header.h\"\n#include \"ns3/mobility-helper.h\"\n#include \"ns3/network-server-helper.h\"\n#include \"ns3/node-container.h\"\n#include \"ns3/one-shot-sender-helper.h\"\n#include \"ns3/periodic-sender-helper.h\"\n#include \"ns3/pointer.h\"\n#include \"ns3/position-allocator.h\"\n#include \"ns3/random-variable-stream.h\"\n#include \"ns3/simulator.h\"\n\n#include <algorithm>\n#include <ctime>\n\nusing namespace ns3;\nusing namespace lorawan;\n\nNS_LOG_COMPONENT_DEFINE(\"FrameCounterUpdateExample\");\n\n// Network settings\nint nGateways = 1;                   //!< Number of gateway nodes to create\ndouble simulationTimeSeconds = 3600; //!< Scenario duration (s) in simulated time\n\n/**\n * Record a packet TX start by the PHY layer of an end device\n *\n * @param packet The packet being transmitted.\n * @param index Id of end device transmitting the packet.\n */\nvoid\nOnPhySentPacket(Ptr<const Packet> packet, uint32_t index)\n{\n    Ptr<Packet> packetCopy = packet->Copy();\n\n    LorawanMacHeader mHdr;\n    packetCopy->RemoveHeader(mHdr);\n    LoraFrameHeader fHdr;\n    packetCopy->RemoveHeader(fHdr);\n\n    NS_LOG_DEBUG(\"Sent a packet with Frame Counter \" << fHdr.GetFCnt());\n    // NS_LOG_DEBUG (\"MAC Header:\");\n    // NS_LOG_DEBUG (mHdr);\n    // NS_LOG_DEBUG (\"Frame Header:\");\n    // NS_LOG_DEBUG (fHdr);\n}\n\n/**\n * Record the exit status of a MAC layer packet retransmission process of an end device\n *\n * @param transmissions Number of transmissions attempted during the process.\n * @param successful Whether the retransmission procedure was successful.\n * @param firstAttempt Timestamp of the initial transmission attempt.\n * @param packet The packet being retransmitted.\n */\nvoid\nOnMacPacketOutcome(uint8_t transmissions, bool successful, Time firstAttempt, Ptr<Packet> packet)\n{\n    if (successful)\n    {\n        NS_LOG_INFO(\"Packet was successful\");\n    }\n    else\n    {\n        NS_LOG_INFO(\"Giving up\");\n    }\n}\n\n/**\n * Set the position of an end device as either in range or out of range.\n *\n * @param endDevice A pointer to the Node of the end device.\n * @param inRange Whether to set the end device in range or out of range.\n */\nvoid\nChangeEndDevicePosition(Ptr<Node> endDevice, bool inRange)\n{\n    if (inRange)\n    {\n        NS_LOG_INFO(\"Moving end device in range\");\n        endDevice->GetObject<MobilityModel>()->SetPosition(Vector(0.0, 0.0, 0.0));\n    }\n    else\n    {\n        NS_LOG_INFO(\"Moving end device out of range\");\n        endDevice->GetObject<MobilityModel>()->SetPosition(Vector(10000.0, 0.0, 0.0));\n    }\n}\n\nint\nmain(int argc, char* argv[])\n{\n    CommandLine cmd(__FILE__);\n    cmd.AddValue(\"simulationTime\", \"The time (s) for which to simulate\", simulationTimeSeconds);\n    cmd.AddValue(\"MaxTransmissions\", \"ns3::EndDeviceLorawanMac::MaxTransmissions\");\n    cmd.AddValue(\"MType\", \"ns3::EndDeviceLorawanMac::MType\");\n    cmd.Parse(argc, argv);\n\n    // Set up logging\n    LogComponentEnable(\"FrameCounterUpdateExample\", LOG_LEVEL_ALL);\n\n    /***********\n     *  Setup  *\n     ***********/\n\n    // Mobility\n    MobilityHelper mobility;\n    Ptr<ListPositionAllocator> allocator = CreateObject<ListPositionAllocator>();\n    // Make it so that nodes are at a certain height > 0\n    allocator->Add(Vector(100000.0, 0.0, 15.0)); // End device position\n    allocator->Add(Vector(0.0, 0.0, 15.0));      // Gateway position\n    mobility.SetPositionAllocator(allocator);\n    mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n\n    /************************\n     *  Create the channel  *\n     ************************/\n\n    // Create the lora channel object\n    Ptr<LogDistancePropagationLossModel> loss = CreateObject<LogDistancePropagationLossModel>();\n    loss->SetPathLossExponent(3.76);\n    loss->SetReference(1, 7.7);\n\n    Ptr<PropagationDelayModel> delay = CreateObject<ConstantSpeedPropagationDelayModel>();\n\n    Ptr<LoraChannel> channel = CreateObject<LoraChannel>(loss, delay);\n\n    /************************\n     *  Create the helpers  *\n     ************************/\n\n    // Create the LoraPhyHelper\n    LoraPhyHelper phyHelper = LoraPhyHelper();\n    phyHelper.SetChannel(channel);\n\n    // Create the LorawanMacHelper\n    LorawanMacHelper macHelper = LorawanMacHelper();\n\n    // Create the LoraHelper\n    LoraHelper helper = LoraHelper();\n    helper.EnablePacketTracking(); // Output filename\n\n    // Create the NetworkServerHelper\n    NetworkServerHelper nsHelper = NetworkServerHelper();\n\n    // Create the ForwarderHelper\n    ForwarderHelper forHelper = ForwarderHelper();\n\n    /************************\n     *  Create End Devices  *\n     ************************/\n\n    // Create a set of nodes\n    NodeContainer endDevices;\n    endDevices.Create(1);\n\n    // Assign a mobility model to each node\n    mobility.Install(endDevices);\n\n    // Make it so that nodes are at a certain height > 0\n    for (auto j = endDevices.Begin(); j != endDevices.End(); ++j)\n    {\n        Ptr<MobilityModel> mobility = (*j)->GetObject<MobilityModel>();\n        Vector position = mobility->GetPosition();\n        position.z = 1.2;\n        mobility->SetPosition(position);\n    }\n\n    // Create the LoraNetDevices of the end devices\n    uint8_t nwkId = 54;\n    uint32_t nwkAddr = 1864;\n    Ptr<LoraDeviceAddressGenerator> addrGen =\n        CreateObject<LoraDeviceAddressGenerator>(nwkId, nwkAddr);\n\n    // Create the LoraNetDevices of the end devices\n    macHelper.SetAddressGenerator(addrGen);\n    phyHelper.SetDeviceType(LoraPhyHelper::ED);\n    macHelper.SetDeviceType(LorawanMacHelper::ED_A);\n    macHelper.Set(\"DataRate\", UintegerValue(5));\n    helper.Install(phyHelper, macHelper, endDevices);\n\n    // Connect trace sources\n    for (auto j = endDevices.Begin(); j != endDevices.End(); ++j)\n    {\n        Ptr<Node> node = *j;\n        Ptr<LoraNetDevice> loraNetDevice = DynamicCast<LoraNetDevice>(node->GetDevice(0));\n        Ptr<LoraPhy> phy = loraNetDevice->GetPhy();\n        Ptr<EndDeviceLorawanMac> mac = DynamicCast<EndDeviceLorawanMac>(loraNetDevice->GetMac());\n        phy->TraceConnectWithoutContext(\"StartSending\", MakeCallback(&OnPhySentPacket));\n        mac->TraceConnectWithoutContext(\"RequiredTransmissions\", MakeCallback(&OnMacPacketOutcome));\n    }\n\n    // Create the gateway nodes (allocate them uniformly on the disc)\n    NodeContainer gateways;\n    gateways.Create(nGateways);\n\n    // Make it so that nodes are at a certain height > 0\n    mobility.SetPositionAllocator(allocator);\n    mobility.Install(gateways);\n\n    // Create a netdevice for each gateway\n    phyHelper.SetDeviceType(LoraPhyHelper::GW);\n    macHelper.SetDeviceType(LorawanMacHelper::GW);\n    helper.Install(phyHelper, macHelper, gateways);\n\n    NS_LOG_INFO(\"Completed configuration\");\n\n    /*********************************************\n     *  Install applications on the end devices  *\n     *********************************************/\n\n    Time appStopTime = Seconds(simulationTimeSeconds);\n    OneShotSenderHelper appHelper = OneShotSenderHelper();\n    appHelper.SetSendTime(Time(0));\n    ApplicationContainer appContainer = appHelper.Install(endDevices);\n    appHelper.SetSendTime(Seconds(100));\n    appContainer.Add(appHelper.Install(endDevices));\n    appHelper.SetSendTime(Seconds(200));\n    appContainer.Add(appHelper.Install(endDevices));\n\n    appContainer.Start(Time(0));\n    appContainer.Stop(appStopTime);\n\n    Simulator::Schedule(Seconds(110), &ChangeEndDevicePosition, endDevices.Get(0), true);\n    Simulator::Schedule(Seconds(201), &ChangeEndDevicePosition, endDevices.Get(0), false);\n    Simulator::Schedule(Seconds(204), &ChangeEndDevicePosition, endDevices.Get(0), true);\n\n    /**************************\n     *  Create network server  *\n     ***************************/\n\n    // Create the network server node\n    Ptr<Node> networkServer = CreateObject<Node>();\n\n    // PointToPoint links between gateways and server\n    PointToPointHelper p2p;\n    p2p.SetDeviceAttribute(\"DataRate\", StringValue(\"5Mbps\"));\n    p2p.SetChannelAttribute(\"Delay\", StringValue(\"2ms\"));\n    // Store network server app registration details for later\n    P2PGwRegistration_t gwRegistration;\n    for (auto gw = gateways.Begin(); gw != gateways.End(); ++gw)\n    {\n        auto container = p2p.Install(networkServer, *gw);\n        auto serverP2PNetDev = DynamicCast<PointToPointNetDevice>(container.Get(0));\n        gwRegistration.emplace_back(serverP2PNetDev, *gw);\n    }\n\n    // Create a network server for the network\n    nsHelper.SetGatewaysP2P(gwRegistration);\n    nsHelper.SetEndDevices(endDevices);\n    nsHelper.Install(networkServer);\n\n    // Create a forwarder for each gateway\n    forHelper.Install(gateways);\n\n    ////////////////\n    // Simulation //\n    ////////////////\n\n    Simulator::Stop(appStopTime + Hours(1));\n\n    NS_LOG_INFO(\"Running simulation...\");\n    Simulator::Run();\n\n    Simulator::Destroy();\n\n    ///////////////////////////\n    // Print results to file //\n    ///////////////////////////\n\n    LoraPacketTracker& tracker = helper.GetPacketTracker();\n    NS_LOG_INFO(\"Printing total sent MAC-layer packets and successful MAC-layer packets\");\n    std::cout << tracker.CountMacPacketsGlobally(Time(0), appStopTime + Hours(1)) << std::endl;\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/lorawan-energy-model-example.cc",
      "code": "/*\n * Copyright (c) 2017 University of Padova\n *\n * SPDX-License-Identifier: GPL-2.0-only\n *\n * Author: Davide Magrin <magrinda@dei.unipd.it>\n */\n\n/*\n * This script simulates a simple network to explain how the Lora energy model\n * works.\n */\n\n#include \"ns3/basic-energy-source-helper.h\"\n#include \"ns3/class-a-end-device-lorawan-mac.h\"\n#include \"ns3/command-line.h\"\n#include \"ns3/constant-position-mobility-model.h\"\n#include \"ns3/end-device-lora-phy.h\"\n#include \"ns3/file-helper.h\"\n#include \"ns3/gateway-lora-phy.h\"\n#include \"ns3/gateway-lorawan-mac.h\"\n#include \"ns3/log.h\"\n#include \"ns3/lora-helper.h\"\n#include \"ns3/lora-radio-energy-model-helper.h\"\n#include \"ns3/mobility-helper.h\"\n#include \"ns3/names.h\"\n#include \"ns3/node-container.h\"\n#include \"ns3/periodic-sender-helper.h\"\n#include \"ns3/position-allocator.h\"\n#include \"ns3/simulator.h\"\n\n#include <algorithm>\n#include <ctime>\n\nusing namespace ns3;\nusing namespace lorawan;\n\nNS_LOG_COMPONENT_DEFINE(\"LoraEnergyModelExample\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Set up logging\n    LogComponentEnable(\"LoraEnergyModelExample\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraRadioEnergyModel\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraChannel\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"LoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"EndDeviceLoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"GatewayLoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraInterferenceHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"EndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"ClassAEndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"GatewayLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LogicalLoraChannelHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LogicalLoraChannel\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraPhyHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LorawanMacHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"OneShotSenderHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"OneShotSender\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LorawanMacHeader\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraFrameHeader\", LOG_LEVEL_ALL);\n    LogComponentEnableAll(LOG_PREFIX_FUNC);\n    LogComponentEnableAll(LOG_PREFIX_NODE);\n    LogComponentEnableAll(LOG_PREFIX_TIME);\n\n    /************************\n     *  Create the channel  *\n     ************************/\n\n    NS_LOG_INFO(\"Creating the channel...\");\n\n    // Create the lora channel object\n    Ptr<LogDistancePropagationLossModel> loss = CreateObject<LogDistancePropagationLossModel>();\n    loss->SetPathLossExponent(3.76);\n    loss->SetReference(1, 7.7);\n\n    Ptr<PropagationDelayModel> delay = CreateObject<ConstantSpeedPropagationDelayModel>();\n\n    Ptr<LoraChannel> channel = CreateObject<LoraChannel>(loss, delay);\n\n    /************************\n     *  Create the helpers  *\n     ************************/\n\n    NS_LOG_INFO(\"Setting up helpers...\");\n\n    MobilityHelper mobility;\n    Ptr<ListPositionAllocator> allocator = CreateObject<ListPositionAllocator>();\n    allocator->Add(Vector(100, 0, 0));\n    allocator->Add(Vector(0, 0, 0));\n    mobility.SetPositionAllocator(allocator);\n    mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n\n    // Create the LoraPhyHelper\n    LoraPhyHelper phyHelper = LoraPhyHelper();\n    phyHelper.SetChannel(channel);\n\n    // Create the LorawanMacHelper\n    LorawanMacHelper macHelper = LorawanMacHelper();\n\n    // Create the LoraHelper\n    LoraHelper helper = LoraHelper();\n\n    /************************\n     *  Create End Devices  *\n     ************************/\n\n    NS_LOG_INFO(\"Creating the end device...\");\n\n    // Create a set of nodes\n    NodeContainer endDevices;\n    endDevices.Create(1);\n\n    // Assign a mobility model to the node\n    mobility.Install(endDevices);\n\n    // Create the LoraNetDevices of the end devices\n    phyHelper.SetDeviceType(LoraPhyHelper::ED);\n    macHelper.SetDeviceType(LorawanMacHelper::ED_A);\n    NetDeviceContainer endDevicesNetDevices = helper.Install(phyHelper, macHelper, endDevices);\n\n    /*********************\n     *  Create Gateways  *\n     *********************/\n\n    NS_LOG_INFO(\"Creating the gateway...\");\n    NodeContainer gateways;\n    gateways.Create(1);\n\n    mobility.SetPositionAllocator(allocator);\n    mobility.Install(gateways);\n\n    // Create a netdevice for each gateway\n    phyHelper.SetDeviceType(LoraPhyHelper::GW);\n    macHelper.SetDeviceType(LorawanMacHelper::GW);\n    helper.Install(phyHelper, macHelper, gateways);\n\n    LorawanMacHelper::SetSpreadingFactorsUp(endDevices, gateways, channel);\n\n    /*********************************************\n     *  Install applications on the end devices  *\n     *********************************************/\n\n    // OneShotSenderHelper oneShotSenderHelper;\n    // oneShotSenderHelper.SetSendTime (Seconds (10));\n\n    // oneShotSenderHelper.Install (endDevices);\n\n    PeriodicSenderHelper periodicSenderHelper;\n    periodicSenderHelper.SetPeriod(Seconds(5));\n\n    periodicSenderHelper.Install(endDevices);\n\n    /************************\n     * Install Energy Model *\n     ************************/\n\n    BasicEnergySourceHelper basicSourceHelper;\n    LoraRadioEnergyModelHelper radioEnergyHelper;\n\n    // configure energy source\n    basicSourceHelper.Set(\"BasicEnergySourceInitialEnergyJ\", DoubleValue(10000)); // Energy in J\n    basicSourceHelper.Set(\"BasicEnergySupplyVoltageV\", DoubleValue(3.3));\n\n    radioEnergyHelper.Set(\"StandbyCurrentA\", DoubleValue(0.0014));\n    radioEnergyHelper.Set(\"TxCurrentA\", DoubleValue(0.028));\n    radioEnergyHelper.Set(\"SleepCurrentA\", DoubleValue(0.0000015));\n    radioEnergyHelper.Set(\"RxCurrentA\", DoubleValue(0.0112));\n\n    radioEnergyHelper.SetTxCurrentModel(\"ns3::ConstantLoraTxCurrentModel\",\n                                        \"TxCurrent\",\n                                        DoubleValue(0.028));\n\n    // install source on end devices' nodes\n    EnergySourceContainer sources = basicSourceHelper.Install(endDevices);\n    Names::Add(\"/Names/EnergySource\", sources.Get(0));\n\n    // install device model\n    DeviceEnergyModelContainer deviceModels =\n        radioEnergyHelper.Install(endDevicesNetDevices, sources);\n\n    /**************\n     * Get output *\n     **************/\n    FileHelper fileHelper;\n    fileHelper.ConfigureFile(\"battery-level\", FileAggregator::SPACE_SEPARATED);\n    fileHelper.WriteProbe(\"ns3::DoubleProbe\", \"/Names/EnergySource/RemainingEnergy\", \"Output\");\n\n    /****************\n     *  Simulation  *\n     ****************/\n\n    Simulator::Stop(Hours(24));\n\n    Simulator::Run();\n\n    Simulator::Destroy();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/network-server-example.cc",
      "code": "/*\n * Copyright (c) 2017 University of Padova\n *\n * SPDX-License-Identifier: GPL-2.0-only\n *\n * Author: Davide Magrin <magrinda@dei.unipd.it>\n */\n\n/*\n * This example creates a simple network in which all LoRaWAN components are\n * simulated: end devices, some gateways and a network server.\n * Two end devices are already configured to send unconfirmed and confirmed messages respectively.\n */\n\n#include \"ns3/command-line.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/forwarder-helper.h\"\n#include \"ns3/gateway-lora-phy.h\"\n#include \"ns3/log.h\"\n#include \"ns3/lora-channel.h\"\n#include \"ns3/lora-device-address-generator.h\"\n#include \"ns3/lora-helper.h\"\n#include \"ns3/lora-phy-helper.h\"\n#include \"ns3/lorawan-mac-helper.h\"\n#include \"ns3/mobility-helper.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/network-server-helper.h\"\n#include \"ns3/one-shot-sender-helper.h\"\n#include \"ns3/periodic-sender-helper.h\"\n#include \"ns3/periodic-sender.h\"\n#include \"ns3/point-to-point-module.h\"\n#include \"ns3/string.h\"\n\nusing namespace ns3;\nusing namespace lorawan;\n\nNS_LOG_COMPONENT_DEFINE(\"NetworkServerExample\");\n\nint\nmain(int argc, char* argv[])\n{\n    bool verbose = false;\n\n    CommandLine cmd(__FILE__);\n    cmd.AddValue(\"verbose\", \"Whether to print output or not\", verbose);\n    cmd.Parse(argc, argv);\n\n    // Logging\n    //////////\n\n    LogComponentEnable(\"NetworkServerExample\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"NetworkServer\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"GatewayLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LoraFrameHeader\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LorawanMacHeader\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"MacCommand\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"GatewayLoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LoraChannel\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"EndDeviceLoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"LogicalLoraChannelHelper\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"EndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"ClassAEndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"OneShotSender\", LOG_LEVEL_ALL);\n    // LogComponentEnable(\"PointToPointNetDevice\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"Forwarder\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"OneShotSender\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"DeviceStatus\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"GatewayStatus\", LOG_LEVEL_ALL);\n    LogComponentEnableAll(LOG_PREFIX_FUNC);\n    LogComponentEnableAll(LOG_PREFIX_NODE);\n    LogComponentEnableAll(LOG_PREFIX_TIME);\n\n    // Create a simple wireless channel\n    ///////////////////////////////////\n\n    Ptr<LogDistancePropagationLossModel> loss = CreateObject<LogDistancePropagationLossModel>();\n    loss->SetPathLossExponent(3.76);\n    loss->SetReference(1, 7.7);\n\n    Ptr<PropagationDelayModel> delay = CreateObject<ConstantSpeedPropagationDelayModel>();\n\n    Ptr<LoraChannel> channel = CreateObject<LoraChannel>(loss, delay);\n\n    // Helpers\n    //////////\n\n    // End device mobility\n    MobilityHelper mobilityEd;\n    MobilityHelper mobilityGw;\n    Ptr<ListPositionAllocator> positionAllocEd = CreateObject<ListPositionAllocator>();\n    positionAllocEd->Add(Vector(6000.0, 0.0, 0.0));\n    positionAllocEd->Add(Vector(0.0, 100.0, 0.0));\n    mobilityEd.SetPositionAllocator(positionAllocEd);\n    mobilityEd.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n\n    // Gateway mobility\n    Ptr<ListPositionAllocator> positionAllocGw = CreateObject<ListPositionAllocator>();\n    positionAllocGw->Add(Vector(0.0, 0.0, 0.0));\n    positionAllocGw->Add(Vector(-2000.0, 0.0, 0.0));\n    positionAllocGw->Add(Vector(500.0, 0.0, 0.0));\n    mobilityGw.SetPositionAllocator(positionAllocGw);\n    mobilityGw.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n\n    // Create the LoraPhyHelper\n    LoraPhyHelper phyHelper = LoraPhyHelper();\n    phyHelper.SetChannel(channel);\n\n    // Create the LorawanMacHelper\n    LorawanMacHelper macHelper = LorawanMacHelper();\n\n    // Create the LoraHelper\n    LoraHelper helper = LoraHelper();\n\n    // Create end devices\n    /////////////\n\n    NodeContainer endDevices;\n    endDevices.Create(2);\n    mobilityEd.Install(endDevices);\n\n    // Create a LoraDeviceAddressGenerator\n    uint8_t nwkId = 54;\n    uint32_t nwkAddr = 1864;\n    Ptr<LoraDeviceAddressGenerator> addrGen =\n        CreateObject<LoraDeviceAddressGenerator>(nwkId, nwkAddr);\n\n    // Create the LoraNetDevices of the end devices\n    phyHelper.SetDeviceType(LoraPhyHelper::ED);\n    macHelper.SetDeviceType(LorawanMacHelper::ED_A);\n    macHelper.SetAddressGenerator(addrGen);\n    macHelper.SetRegion(LorawanMacHelper::EU);\n    helper.Install(phyHelper, macHelper, endDevices);\n\n    // Set message type (Default is unconfirmed)\n    Ptr<LorawanMac> edMac1 = DynamicCast<LoraNetDevice>(endDevices.Get(1)->GetDevice(0))->GetMac();\n    Ptr<ClassAEndDeviceLorawanMac> edLorawanMac1 = DynamicCast<ClassAEndDeviceLorawanMac>(edMac1);\n    edLorawanMac1->SetMType(LorawanMacHeader::CONFIRMED_DATA_UP);\n\n    // Install applications in end devices\n    OneShotSenderHelper oneShotHelper = OneShotSenderHelper();\n    oneShotHelper.SetSendTime(Seconds(4));\n    oneShotHelper.Install(endDevices.Get(0));\n    oneShotHelper.SetSendTime(Seconds(10));\n    oneShotHelper.Install(endDevices.Get(1));\n    // oneShotHelper.SetSendTime (Seconds (8));\n    // oneShotHelper.Install(endDevices.Get (1));\n    // oneShotHelper.SetSendTime (Seconds (12));\n    // oneShotHelper.Install(endDevices.Get (2));\n\n    ////////////////\n    // Create gateways //\n    ////////////////\n\n    NodeContainer gateways;\n    gateways.Create(1);\n    mobilityGw.Install(gateways);\n\n    // Create the LoraNetDevices of the gateways\n    phyHelper.SetDeviceType(LoraPhyHelper::GW);\n    macHelper.SetDeviceType(LorawanMacHelper::GW);\n    helper.Install(phyHelper, macHelper, gateways);\n\n    // Set spreading factors up\n    LorawanMacHelper::SetSpreadingFactorsUp(endDevices, gateways, channel);\n\n    ////////////\n    // Create network serverNS\n    ////////////\n\n    Ptr<Node> networkServer = CreateObject<Node>();\n\n    // PointToPoint links between gateways and server\n    PointToPointHelper p2p;\n    p2p.SetDeviceAttribute(\"DataRate\", StringValue(\"5Mbps\"));\n    p2p.SetChannelAttribute(\"Delay\", StringValue(\"2ms\"));\n    // Store network server app registration details for later\n    P2PGwRegistration_t gwRegistration;\n    for (auto gw = gateways.Begin(); gw != gateways.End(); ++gw)\n    {\n        auto container = p2p.Install(networkServer, *gw);\n        auto serverP2PNetDev = DynamicCast<PointToPointNetDevice>(container.Get(0));\n        gwRegistration.emplace_back(serverP2PNetDev, *gw);\n    }\n\n    // Install the NetworkServer application on the network server\n    NetworkServerHelper networkServerHelper;\n    networkServerHelper.SetGatewaysP2P(gwRegistration);\n    networkServerHelper.SetEndDevices(endDevices);\n    networkServerHelper.Install(networkServer);\n\n    // Install the Forwarder application on the gateways\n    ForwarderHelper forwarderHelper;\n    forwarderHelper.Install(gateways);\n\n    // Start simulation\n    Simulator::Stop(Seconds(800));\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/parallel-reception-example.cc",
      "code": "/*\n * Copyright (c) 2017 University of Padova\n *\n * SPDX-License-Identifier: GPL-2.0-only\n *\n * Author: Davide Magrin <magrinda@dei.unipd.it>\n */\n\n/*\n * This script simulates a simple network in which one end device sends one\n * packet to the gateway.\n */\n\n#include \"ns3/command-line.h\"\n#include \"ns3/constant-position-mobility-model.h\"\n#include \"ns3/end-device-lora-phy.h\"\n#include \"ns3/end-device-lorawan-mac.h\"\n#include \"ns3/gateway-lora-phy.h\"\n#include \"ns3/gateway-lorawan-mac.h\"\n#include \"ns3/log.h\"\n#include \"ns3/lora-helper.h\"\n#include \"ns3/lorawan-mac-helper.h\"\n#include \"ns3/mobility-helper.h\"\n#include \"ns3/node-container.h\"\n#include \"ns3/one-shot-sender-helper.h\"\n#include \"ns3/position-allocator.h\"\n#include \"ns3/simulator.h\"\n\n#include <algorithm>\n#include <ctime>\n\nusing namespace ns3;\nusing namespace lorawan;\n\nNS_LOG_COMPONENT_DEFINE(\"ParallelReceptionExample\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Set up logging\n    LogComponentEnable(\"ParallelReceptionExample\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraChannel\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"LoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"EndDeviceLoraPhy\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"GatewayLoraPhy\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"SimpleGatewayLoraPhy\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraInterferenceHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"EndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"ClassAEndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"GatewayLorawanMac\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LogicalLoraChannelHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LogicalLoraChannel\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraPhyHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LorawanMacHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"OneShotSenderHelper\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"OneShotSender\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LorawanMacHeader\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"LoraFrameHeader\", LOG_LEVEL_ALL);\n    LogComponentEnableAll(LOG_PREFIX_FUNC);\n    LogComponentEnableAll(LOG_PREFIX_NODE);\n    LogComponentEnableAll(LOG_PREFIX_TIME);\n\n    /************************\n     *  Create the channel  *\n     ************************/\n\n    NS_LOG_INFO(\"Creating the channel...\");\n\n    // Create the lora channel object\n    Ptr<LogDistancePropagationLossModel> loss = CreateObject<LogDistancePropagationLossModel>();\n    loss->SetPathLossExponent(3.76);\n    loss->SetReference(1, 7.7);\n\n    Ptr<PropagationDelayModel> delay = CreateObject<ConstantSpeedPropagationDelayModel>();\n\n    Ptr<LoraChannel> channel = CreateObject<LoraChannel>(loss, delay);\n\n    /************************\n     *  Create the helpers  *\n     ************************/\n\n    NS_LOG_INFO(\"Setting up helpers...\");\n\n    MobilityHelper mobility;\n    Ptr<ListPositionAllocator> allocator = CreateObject<ListPositionAllocator>();\n    allocator->Add(Vector(0, 0, 0));\n    mobility.SetPositionAllocator(allocator);\n    mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n\n    // Create the LoraPhyHelper\n    LoraPhyHelper phyHelper = LoraPhyHelper();\n    phyHelper.SetChannel(channel);\n\n    // Create the LorawanMacHelper\n    LorawanMacHelper macHelper = LorawanMacHelper();\n\n    // Create the LoraHelper\n    LoraHelper helper = LoraHelper();\n\n    /************************\n     *  Create End Devices  *\n     ************************/\n\n    NS_LOG_INFO(\"Creating the end device...\");\n\n    // Create a set of nodes\n    NodeContainer endDevices;\n    endDevices.Create(6);\n\n    // Assign a mobility model to the nodes\n    mobility.Install(endDevices);\n\n    // Create the LoraNetDevices of the end devices\n    phyHelper.SetDeviceType(LoraPhyHelper::ED);\n    macHelper.SetDeviceType(LorawanMacHelper::ED_A);\n    macHelper.SetRegion(LorawanMacHelper::SingleChannel);\n    helper.Install(phyHelper, macHelper, endDevices);\n\n    /*********************\n     *  Create Gateways  *\n     *********************/\n\n    NS_LOG_INFO(\"Creating the gateway...\");\n    NodeContainer gateways;\n    gateways.Create(1);\n\n    mobility.Install(gateways);\n\n    // Create a netdevice for each gateway\n    phyHelper.SetDeviceType(LoraPhyHelper::GW);\n    macHelper.SetDeviceType(LorawanMacHelper::GW);\n    helper.Install(phyHelper, macHelper, gateways);\n\n    /*********************************************\n     *  Install applications on the end devices  *\n     *********************************************/\n\n    OneShotSenderHelper oneShotSenderHelper;\n\n    oneShotSenderHelper.SetSendTime(Seconds(1));\n    oneShotSenderHelper.Install(endDevices);\n\n    /******************\n     * Set Data Rates *\n     ******************/\n    for (uint32_t i = 0; i < endDevices.GetN(); i++)\n    {\n        DynamicCast<EndDeviceLorawanMac>(\n            DynamicCast<LoraNetDevice>(endDevices.Get(i)->GetDevice(0))->GetMac())\n            ->SetDataRate(5 - i);\n    }\n\n    /****************\n     *  Simulation  *\n     ****************/\n\n    Simulator::Stop(Hours(2));\n\n    Simulator::Run();\n\n    Simulator::Destroy();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/simple-network-example.cc",
      "code": "/*\n * Copyright (c) 2017 University of Padova\n *\n * SPDX-License-Identifier: GPL-2.0-only\n *\n * Author: Davide Magrin <magrinda@dei.unipd.it>\n */\n\n/*\n * This script simulates a simple network in which one end device sends one\n * packet to the gateway.\n */\n\n#include \"ns3/command-line.h\"\n#include \"ns3/constant-position-mobility-model.h\"\n#include \"ns3/end-device-lora-phy.h\"\n#include \"ns3/end-device-lorawan-mac.h\"\n#include \"ns3/gateway-lora-phy.h\"\n#include \"ns3/gateway-lorawan-mac.h\"\n#include \"ns3/log.h\"\n#include \"ns3/lora-helper.h\"\n#include \"ns3/mobility-helper.h\"\n#include \"ns3/node-container.h\"\n#include \"ns3/one-shot-sender-helper.h\"\n#include \"ns3/position-allocator.h\"\n#include \"ns3/simulator.h\"\n\n#include <algorithm>\n#include <ctime>\n\nusing namespace ns3;\nusing namespace lorawan;\n\nNS_LOG_COMPONENT_DEFINE(\"SimpleLorawanNetworkExample\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Set up logging\n    LogComponentEnable(\"SimpleLorawanNetworkExample\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LoraChannel\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"LoraPhy\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"EndDeviceLoraPhy\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"GatewayLoraPhy\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LoraInterferenceHelper\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LorawanMac\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"EndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"ClassAEndDeviceLorawanMac\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"GatewayLorawanMac\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LogicalLoraChannelHelper\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LogicalLoraChannel\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LoraHelper\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LoraPhyHelper\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LorawanMacHelper\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"OneShotSenderHelper\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"OneShotSender\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LorawanMacHeader\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"LoraFrameHeader\", LOG_LEVEL_ALL);\n    LogComponentEnableAll(LOG_PREFIX_FUNC);\n    LogComponentEnableAll(LOG_PREFIX_NODE);\n    LogComponentEnableAll(LOG_PREFIX_TIME);\n\n    /************************\n     *  Create the channel  *\n     ************************/\n\n    NS_LOG_INFO(\"Creating the channel...\");\n\n    // Create the lora channel object\n    Ptr<LogDistancePropagationLossModel> loss = CreateObject<LogDistancePropagationLossModel>();\n    loss->SetPathLossExponent(3.76);\n    loss->SetReference(1, 7.7);\n\n    Ptr<PropagationDelayModel> delay = CreateObject<ConstantSpeedPropagationDelayModel>();\n\n    Ptr<LoraChannel> channel = CreateObject<LoraChannel>(loss, delay);\n\n    /************************\n     *  Create the helpers  *\n     ************************/\n\n    NS_LOG_INFO(\"Setting up helpers...\");\n\n    MobilityHelper mobility;\n    Ptr<ListPositionAllocator> allocator = CreateObject<ListPositionAllocator>();\n    allocator->Add(Vector(1000, 0, 0));\n    allocator->Add(Vector(0, 0, 0));\n    mobility.SetPositionAllocator(allocator);\n    mobility.SetMobilityModel(\"ns3::ConstantPositionMobilityModel\");\n\n    // Create the LoraPhyHelper\n    LoraPhyHelper phyHelper = LoraPhyHelper();\n    phyHelper.SetChannel(channel);\n\n    // Create the LorawanMacHelper\n    LorawanMacHelper macHelper = LorawanMacHelper();\n\n    // Create the LoraHelper\n    LoraHelper helper = LoraHelper();\n\n    /************************\n     *  Create End Devices  *\n     ************************/\n\n    NS_LOG_INFO(\"Creating the end device...\");\n\n    // Create a set of nodes\n    NodeContainer endDevices;\n    endDevices.Create(1);\n\n    // Assign a mobility model to the node\n    mobility.Install(endDevices);\n\n    // Create the LoraNetDevices of the end devices\n    phyHelper.SetDeviceType(LoraPhyHelper::ED);\n    macHelper.SetDeviceType(LorawanMacHelper::ED_A);\n    helper.Install(phyHelper, macHelper, endDevices);\n\n    /*********************\n     *  Create Gateways  *\n     *********************/\n\n    NS_LOG_INFO(\"Creating the gateway...\");\n    NodeContainer gateways;\n    gateways.Create(1);\n\n    mobility.Install(gateways);\n\n    // Create a netdevice for each gateway\n    phyHelper.SetDeviceType(LoraPhyHelper::GW);\n    macHelper.SetDeviceType(LorawanMacHelper::GW);\n    helper.Install(phyHelper, macHelper, gateways);\n\n    /*********************************************\n     *  Install applications on the end devices  *\n     *********************************************/\n\n    OneShotSenderHelper oneShotSenderHelper;\n    oneShotSenderHelper.SetSendTime(Seconds(2));\n\n    oneShotSenderHelper.Install(endDevices);\n\n    /******************\n     * Set Data Rates *\n     ******************/\n    std::vector<int> sfQuantity(6);\n    sfQuantity = LorawanMacHelper::SetSpreadingFactorsUp(endDevices, gateways, channel);\n\n    /****************\n     *  Simulation  *\n     ****************/\n\n    Simulator::Stop(Hours(2));\n\n    Simulator::Run();\n\n    Simulator::Destroy();\n\n    return 0;\n}\n"
    }
  ]
}