{
  "repo_name": "signetlabdei/millicar",
  "github_url": "https://github.com/signetlabdei/millicar",
  "readme": "# Millicar - An ns-3 Module for MmWave NR V2X Networks #\n\nThis is an [ns-3](https://www.nsnam.org \"ns-3 Website\") module for the simulation\nof Vehicle-to-Vehicle networks operating at mmWaves. A description of this module can be found on [arXiv](https://arxiv.org/abs/2002.10347 \"arXiv link\").\n\nThis module currently includes features such as:\n- support to the latest 3GPP channel model for V2X networks, for frequency spectrum above 6 GHz;\n- custom PHY and MAC classes, supporting the NR frame structure specified by 3GPP;\n- full-stack operations including those from RLC and PDCP layers, thanks to the integration with the LTE module of ns-3;\n- helpers and examples to guide users that want to interact with the module.\n\nIf you use this module in your research, please cite:\nM. Drago, T. Zugno, M. Polese, M. Giordani, M. Zorzi, _\"Millicar - An ns-3 Module for MmWave NR V2X Networks,\"_ Proc. of the Workshop on ns-3 (WNS3), 2020.\n\n## Getting Started ##\n\nTo use this module, you need to install [ns3-mmwave](\"https://github.com/nyuwireless-unipd/ns3-mmwave.git\") and clone this repository inside the `src` folder:\n\n```bash\ngit clone https://github.com/nyuwireless-unipd/ns3-mmwave.git\ngit clone https://github.com/signetlabdei/millicar.git ns3-mmwave/src/millicar\n```\n\n## About ##\n\nThis module is being developed by [SIGNET Lab](http://mmwave.dei.unipd.it/), [University of Padova](https://www.unipd.it).\n\n## License ##\n\nThis software is licensed under the terms of the GNU GPLv2, as like as ns-3. See the LICENSE file for more details.\n",
  "examples": [
    {
      "file_path": "examples/vehicular-simple-four.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n*   Copyright (c) 2020 University of Padova, Dep. of Information Engineering,\n*   SIGNET lab.\n*\n*   This program is free software; you can redistribute it and/or modify\n*   it under the terms of the GNU General Public License version 2 as\n*   published by the Free Software Foundation;\n*\n*   This program is distributed in the hope that it will be useful,\n*   but WITHOUT ANY WARRANTY; without even the implied warranty of\n*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*   GNU General Public License for more details.\n*\n*   You should have received a copy of the GNU General Public License\n*   along with this program; if not, write to the Free Software\n*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\n#include \"ns3/mmwave-sidelink-spectrum-phy.h\"\n#include \"ns3/mmwave-vehicular-net-device.h\"\n#include \"ns3/mmwave-vehicular-helper.h\"\n#include \"ns3/constant-position-mobility-model.h\"\n#include \"ns3/mobility-module.h\"\n#include \"ns3/isotropic-antenna-model.h\"\n#include \"ns3/spectrum-helper.h\"\n#include \"ns3/mmwave-spectrum-value-helper.h\"\n#include \"ns3/applications-module.h\"\n#include \"ns3/buildings-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/config.h\"\n#include \"ns3/command-line.h\"\n\nNS_LOG_COMPONENT_DEFINE (\"VehicularSimpleFour\");\n\nusing namespace ns3;\nusing namespace millicar;\n\n/**\n  This script creates two pairs of vehicles moving at 20 m/s. The two groups are virtually positioned in two different lanes.\n  In the same group, the vehicles are positioned one in front of the other at 20 m distance, and they exchange packets through a UDP application.\n  Communication is done via a wireless channel.\n  The aim of this example is to check whether the interference was evaluated correctly when different groups\n  of nodes are transmitting in the same slot, sharing the same cell.\n*/\n\nstatic void Rx (Ptr<OutputStreamWrapper> stream, Ptr<const Packet> p)\n{\n SeqTsHeader header;\n\n p->PeekHeader(header);\n\n *stream->GetStream () << Simulator::Now ().GetSeconds () << \"\\t\" << p->GetSize() << \"\\t\" << header.GetSeq() << \"\\t\" << header.GetTs().GetSeconds() << std::endl;\n}\n\nint main (int argc, char *argv[])\n{\n\n  Time endTime = Seconds (10.0);\n  double bandwidth = 1e8;\n  std::string scenario = \"V2V-Urban\";\n\n  double speed = 20; // m/s\n  CommandLine cmd;\n  cmd.AddValue (\"vehicleSpeed\", \"The speed of the vehicle\", speed);\n  cmd.AddValue (\"scenario\", \"set the vehicular scenario\", scenario);\n  cmd.Parse (argc, argv);\n\n  Config::SetDefault (\"ns3::MmWaveSidelinkMac::UseAmc\", BooleanValue (true));\n  Config::SetDefault (\"ns3::MmWaveSidelinkMac::Mcs\", UintegerValue (28));\n  Config::SetDefault (\"ns3::MmWavePhyMacCommon::CenterFreq\", DoubleValue (60.0e9));\n  Config::SetDefault (\"ns3::MmWaveVehicularNetDevice::RlcType\", StringValue(\"LteRlcUm\"));\n  Config::SetDefault (\"ns3::LteRlcUm::MaxTxBufferSize\", UintegerValue (50*1024));\n  \n  Config::SetDefault (\"ns3::MmWaveVehicularHelper::SchedulingPatternOption\", EnumValue(2)); // use 2 for SchedulingPatternOption=OPTIMIZED, 1 or SchedulingPatternOption=DEFAULT\n  Config::SetDefault (\"ns3::MmWaveVehicularHelper::Bandwidth\", DoubleValue (bandwidth));\n\n  Config::SetDefault (\"ns3::ThreeGppChannelModel::UpdatePeriod\", TimeValue (MilliSeconds (10)));\n  \n  // create the nodes\n  NodeContainer group;\n  group.Create (3);\n\n  // create the mobility models\n  MobilityHelper mobility;\n  mobility.SetMobilityModel (\"ns3::ConstantVelocityMobilityModel\");\n  mobility.Install (group);\n\n  group.Get (0)->GetObject<MobilityModel> ()->SetPosition (Vector (0,0,0));\n  group.Get (0)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (0, -speed, 0));\n\n  group.Get (1)->GetObject<MobilityModel> ()->SetPosition (Vector (20,0,0));\n  group.Get (1)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (0, speed, 0));\n\n  group.Get (2)->GetObject<MobilityModel> ()->SetPosition (Vector (10,20,0));\n  group.Get (2)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (0, speed, 0));\n\n  // create and configure the helper\n  Ptr<MmWaveVehicularHelper> helper = CreateObject<MmWaveVehicularHelper> ();\n  helper->SetNumerology (3);\n  helper->SetChannelModelType (scenario);\n  NetDeviceContainer devs = helper->InstallMmWaveVehicularNetDevices (group);\n  \n  // Mandatory to install buildings helper even if there are no buildings, \n  // otherwise V2V-Urban scenario does not work\n  BuildingsHelper::Install (group);\n\n  InternetStackHelper internet;\n  internet.Install (group);\n\n  Ipv4AddressHelper ipv4;\n  NS_LOG_INFO (\"Assign IP Addresses.\");\n\n  ipv4.SetBase (\"10.1.1.0\", \"255.255.255.0\");\n  Ipv4InterfaceContainer i = ipv4.Assign (devs);\n\n  helper->PairDevices(devs);\n\n  // Ipv4StaticRoutingHelper ipv4RoutingHelper;\n  //\n  // Ptr<Ipv4StaticRouting> staticRouting = ipv4RoutingHelper.GetStaticRouting (group.Get (0)->GetObject<Ipv4> ());\n  // staticRouting->SetDefaultRoute (group.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal () , 2 );\n  //\n  // staticRouting = ipv4RoutingHelper.GetStaticRouting (group.Get (2)->GetObject<Ipv4> ());\n  // staticRouting->SetDefaultRoute (group.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal () , 2 );\n\n  NS_LOG_DEBUG(\"IPv4 Address node 0: \" << group.Get (0)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n  NS_LOG_DEBUG(\"IPv4 Address node 1: \" << group.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n  NS_LOG_DEBUG(\"IPv4 Address node 2: \" << group.Get (2)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n\n  Ptr<mmwave::MmWaveAmc> m_amc = CreateObject <mmwave::MmWaveAmc> (helper->GetConfigurationParameters());\n  double availableRate = m_amc->CalculateTbSize (28, 14) * 8 / 0.001; // bps\n  uint16_t port_1 = 4000;  // well-known echo port number\n  uint16_t port_2 = 4001;\n\n  UdpEchoServerHelper server (port_1);\n\n  ApplicationContainer apps = server.Install (group.Get (2));\n  apps.Start (Seconds (0.0));\n\n  AsciiTraceHelper asciiTraceHelper;\n  Ptr<OutputStreamWrapper> stream_1 = asciiTraceHelper.CreateFileStream (\"user_1.txt\");\n  apps.Get(0)->TraceConnectWithoutContext (\"Rx\", MakeBoundCallback (&Rx, stream_1));\n\n  UdpEchoServerHelper server2 (port_2);\n\n  ApplicationContainer apps2 = server2.Install (group.Get (2));\n  apps2.Start (Seconds (0.0));\n\n  Ptr<OutputStreamWrapper> stream_2 = asciiTraceHelper.CreateFileStream (\"user_2.txt\");\n  apps2.Get(0)->TraceConnectWithoutContext (\"Rx\", MakeBoundCallback (&Rx, stream_2));\n\n  uint32_t maxPacketCount = 800000;\n  uint32_t packetSize = 512;\n  NS_LOG_UNCOND(availableRate);\n  Time interPacketInterval =  Seconds(double((packetSize * 8) / availableRate));\n\n  UdpClientHelper client (group.Get (2)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal (), port_1);\n  client.SetAttribute (\"MaxPackets\", UintegerValue (maxPacketCount));\n  client.SetAttribute (\"Interval\", TimeValue (interPacketInterval));\n  client.SetAttribute (\"PacketSize\", UintegerValue (packetSize));\n  ApplicationContainer clientApps = client.Install (group.Get (0));\n  clientApps.Start (Seconds(1.0));\n  clientApps.Stop (endTime);\n\n  UdpClientHelper client2 (group.Get (2)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal (), port_2);\n  client2.SetAttribute (\"MaxPackets\", UintegerValue (maxPacketCount));\n  client2.SetAttribute (\"Interval\", TimeValue (interPacketInterval));\n  client2.SetAttribute (\"PacketSize\", UintegerValue (packetSize));\n  ApplicationContainer clientApps2 = client2.Install (group.Get (1));\n  clientApps2.Start (Seconds(1.0));\n  clientApps2.Stop (endTime);\n\n  Ipv4GlobalRoutingHelper::PopulateRoutingTables ();\n\n  Simulator::Stop (Seconds(18.0));\n  Simulator::Run ();\n  Simulator::Destroy ();\n\n  return 0;\n}\n"
    },
    {
      "file_path": "examples/vehicular-simple-one.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n*   Copyright (c) 2020 University of Padova, Dep. of Information Engineering,\n*   SIGNET lab.\n*\n*   This program is free software; you can redistribute it and/or modify\n*   it under the terms of the GNU General Public License version 2 as\n*   published by the Free Software Foundation;\n*\n*   This program is distributed in the hope that it will be useful,\n*   but WITHOUT ANY WARRANTY; without even the implied warranty of\n*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*   GNU General Public License for more details.\n*\n*   You should have received a copy of the GNU General Public License\n*   along with this program; if not, write to the Free Software\n*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\n#include \"ns3/mmwave-sidelink-spectrum-phy.h\"\n#include \"ns3/mmwave-vehicular-net-device.h\"\n#include \"ns3/mmwave-vehicular-helper.h\"\n#include \"ns3/constant-position-mobility-model.h\"\n#include \"ns3/mobility-module.h\"\n#include \"ns3/config.h\"\n#include \"ns3/isotropic-antenna-model.h\"\n#include \"ns3/spectrum-helper.h\"\n#include \"ns3/mmwave-spectrum-value-helper.h\"\n#include \"ns3/applications-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/buildings-module.h\"\n#include \"ns3/command-line.h\"\n#include \"ns3/node-list.h\"\n\nNS_LOG_COMPONENT_DEFINE (\"VehicularSimpleOne\");\n\nusing namespace ns3;\nusing namespace millicar;\n\nvoid PrintGnuplottableNodeListToFile (std::string filename);\n\nuint32_t g_rxPackets; // total number of received packets\nuint32_t g_txPackets; // total number of transmitted packets\n\nTime g_firstReceived; // timestamp of the first time a packet is received\nTime g_lastReceived; // timestamp of the last received packet\n\nstatic void Rx (Ptr<OutputStreamWrapper> stream, Ptr<const Packet> p)\n{\n g_rxPackets++;\n SeqTsHeader header;\n\n p->PeekHeader(header);\n\n *stream->GetStream () << Simulator::Now ().GetSeconds () << \"\\t\" << p->GetSize() << \"\\t\" << header.GetSeq() << \"\\t\" << header.GetTs().GetSeconds() << std::endl;\n\n if (g_rxPackets > 1)\n {\n\n   g_lastReceived = Simulator::Now();\n }\n else\n {\n   g_firstReceived = Simulator::Now();\n }\n}\n\nint main (int argc, char *argv[])\n{\n  // This script creates two nodes moving at 20 m/s, placed at a distance of 10 m.\n  // These nodes exchange packets through a UDP application,\n  // and they communicate using a wireless channel.\n\n  // system parameters\n  double bandwidth = 1e8; // bandwidth in Hz\n  double frequency = 28e9; // the carrier frequency\n  uint32_t numerology = 3; // the numerology\n\n  // applications\n  uint32_t packetSize = 1024; // UDP packet size in bytes\n  uint32_t startTime = 50; // application start time in milliseconds\n  uint32_t endTime = 2000; // application end time in milliseconds\n  uint32_t interPacketInterval = 30; // interpacket interval in microseconds\n\n  // mobility\n  double speed = 20; // speed of the vehicles m/s\n  double intraGroupDistance = 10; // distance between two vehicles belonging to the same group\n  \n  std::string scenario = \"V2V-Urban\";\n\n  CommandLine cmd;\n  cmd.AddValue (\"bandwidth\", \"used bandwidth\", bandwidth);\n  cmd.AddValue (\"iip\", \"inter packet interval, in microseconds\", interPacketInterval);\n  cmd.AddValue (\"intraGroupDistance\", \"distance between two vehicles belonging to the same group, y-coord\", intraGroupDistance);\n  cmd.AddValue (\"numerology\", \"set the numerology to use at the physical layer\", numerology);\n  cmd.AddValue (\"frequency\", \"set the carrier frequency\", frequency);\n  cmd.AddValue (\"scenario\", \"set the vehicular scenario\", scenario);\n  cmd.Parse (argc, argv);\n\n  Config::SetDefault (\"ns3::MmWaveSidelinkMac::UseAmc\", BooleanValue (true));\n  Config::SetDefault (\"ns3::MmWaveSidelinkMac::Mcs\", UintegerValue (28));\n  Config::SetDefault (\"ns3::MmWavePhyMacCommon::CenterFreq\", DoubleValue (frequency));\n  \n  Config::SetDefault (\"ns3::MmWaveVehicularHelper::Bandwidth\", DoubleValue (bandwidth));\n  Config::SetDefault (\"ns3::MmWaveVehicularHelper::Numerology\", UintegerValue (numerology));\n  Config::SetDefault (\"ns3::MmWaveVehicularHelper::ChannelModelType\", StringValue (scenario));\n  \n  Config::SetDefault (\"ns3::ThreeGppChannelModel::UpdatePeriod\", TimeValue (MilliSeconds (10)));\n  Config::SetDefault (\"ns3::ThreeGppChannelConditionModel::UpdatePeriod\", TimeValue (MilliSeconds (10)));\n\n  Config::SetDefault (\"ns3::MmWaveVehicularNetDevice::RlcType\", StringValue(\"LteRlcUm\"));\n  Config::SetDefault (\"ns3::MmWaveVehicularHelper::SchedulingPatternOption\", EnumValue(2)); // use 2 for SchedulingPatternOption=OPTIMIZED, 1 or SchedulingPatternOption=DEFAULT\n  Config::SetDefault (\"ns3::LteRlcUm::MaxTxBufferSize\", UintegerValue (500*1024));\n\n  // create the nodes\n  NodeContainer n;\n  n.Create (2);\n  // create the mobility models\n  MobilityHelper mobility;\n  mobility.SetMobilityModel (\"ns3::ConstantVelocityMobilityModel\");\n  mobility.Install (n);\n\n  n.Get (0)->GetObject<MobilityModel> ()->SetPosition (Vector (0,0,0));\n  n.Get (0)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (0, speed, 0));\n\n  n.Get (1)->GetObject<MobilityModel> ()->SetPosition (Vector (0, intraGroupDistance,  0));\n  n.Get (1)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (0, speed, 0));\n\n  // create and configure the helper\n  Ptr<MmWaveVehicularHelper> helper = CreateObject<MmWaveVehicularHelper> ();\n  helper->SetNumerology (3);\n  NetDeviceContainer devs = helper->InstallMmWaveVehicularNetDevices (n);\n\n  // Install the TCP/IP stack in the two nodes\n  InternetStackHelper internet;\n  internet.Install (n);\n\n  Ipv4AddressHelper ipv4;\n  NS_LOG_INFO (\"Assign IP Addresses.\");\n  ipv4.SetBase (\"10.1.1.0\", \"255.255.255.0\");\n  Ipv4InterfaceContainer i = ipv4.Assign (devs);\n  \n  // Mandatory to install buildings helper even if there are no buildings, \n  // otherwise V2V-Urban scenario does not work\n  BuildingsHelper::Install (n);\n\n  // Need to pair the devices in order to create a correspondence between transmitter and receiver\n  // and to populate the < IP addr, RNTI > map.\n  helper->PairDevices(devs);\n\n  // Set the routing table\n  Ipv4StaticRoutingHelper ipv4RoutingHelper;\n  Ptr<Ipv4StaticRouting> staticRouting = ipv4RoutingHelper.GetStaticRouting (n.Get (0)->GetObject<Ipv4> ());\n  staticRouting->SetDefaultRoute (n.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal () , 2 );\n\n  NS_LOG_DEBUG(\"IPv4 Address node 0: \" << n.Get (0)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n  NS_LOG_DEBUG(\"IPv4 Address node 1: \" << n.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n\n  Ptr<mmwave::MmWaveAmc> m_amc = CreateObject <mmwave::MmWaveAmc> (helper->GetConfigurationParameters());\n\n  // setup the applications\n  Config::SetDefault (\"ns3::UdpClient::MaxPackets\", UintegerValue (0xFFFFFFFF));\n  Config::SetDefault (\"ns3::UdpClient::Interval\", TimeValue (MicroSeconds (interPacketInterval)));\n  Config::SetDefault (\"ns3::UdpClient::PacketSize\", UintegerValue (packetSize));\n\n  // create the applications\n  uint32_t port = 4000;\n\n  UdpEchoServerHelper server (port);\n  ApplicationContainer echoApps = server.Install (n.Get (1));\n  echoApps.Start (Seconds (0.0));\n\n  AsciiTraceHelper asciiTraceHelper;\n  Ptr<OutputStreamWrapper> stream = asciiTraceHelper.CreateFileStream (\"simple-one-stats.txt\");\n  echoApps.Get(0)->TraceConnectWithoutContext (\"Rx\", MakeBoundCallback (&Rx, stream));\n\n  UdpClientHelper client (n.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal (), port);\n  ApplicationContainer apps = client.Install (n.Get (0));\n\n  // set the application start/end time\n  apps.Start (MilliSeconds (startTime));\n  apps.Stop (MilliSeconds (endTime));\n  \n  PrintGnuplottableNodeListToFile (\"scenario.txt\");\n  \n  Simulator::Stop (MilliSeconds (endTime + 1000));\n  Simulator::Run ();\n  Simulator::Destroy ();\n\n  std::cout << \"----------- Statistics -----------\" << std::endl;\n  std::cout << \"Packets size:\\t\\t\" << packetSize << \" Bytes\" << std::endl;\n  std::cout << \"Packets received:\\t\" << g_rxPackets << std::endl;\n  std::cout << \"Average Throughput:\\t\" << (double(g_rxPackets)*(double(packetSize)*8)/double( g_lastReceived.GetSeconds() - g_firstReceived.GetSeconds()))/1e6 << \" Mbps\" << std::endl;\n\n  return 0;\n}\n\nvoid\nPrintGnuplottableNodeListToFile (std::string filename)\n{\n  std::ofstream outFile;\n  outFile.open (filename.c_str (), std::ios_base::out | std::ios_base::trunc);\n  if (!outFile.is_open ())\n    {\n      NS_LOG_ERROR (\"Can't open file \" << filename);\n      return;\n    }\n  outFile << \"set xrange [-200:200]; set yrange [-200:200]\" << std::endl;\n  for (NodeList::Iterator it = NodeList::Begin (); it != NodeList::End (); ++it)\n    {\n      Ptr<Node> node = *it;\n      int nDevs = node->GetNDevices ();\n      for (int j = 0; j < nDevs; j++)\n        {\n          Ptr<MmWaveVehicularNetDevice> vdev = node->GetDevice (j)->GetObject <MmWaveVehicularNetDevice> ();\n          if (vdev)\n            {\n              Vector pos = node->GetObject<MobilityModel> ()->GetPosition ();\n              outFile << \"set label \\\"\" << vdev->GetMac ()->GetRnti ()\n                      << \"\\\" at \"<< pos.x << \",\" << pos.y << \" left font \\\"Helvetica,8\\\" textcolor rgb \\\"black\\\" front point pt 7 ps 0.3 lc rgb \\\"black\\\" offset 0,0\"\n                      << std::endl;\n\n              // Simulator::Schedule (Seconds (1), &PrintHelper::UpdateGnuplottableNodeListToFile, filename, node);\n            }\n        }\n    }\n    \n  uint32_t index = 0;\n  for (BuildingList::Iterator it = BuildingList::Begin (); it != BuildingList::End (); ++it)\n    {\n      ++index;\n      Box box = (*it)->GetBoundaries ();\n      outFile << \"set object \" << index\n              << \" rect from \" << box.xMin  << \",\" << box.yMin\n              << \" to \"   << box.xMax  << \",\" << box.yMax\n              << std::endl;\n    }\n}\n"
    },
    {
      "file_path": "examples/vehicular-simple-three.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n*   Copyright (c) 2020 University of Padova, Dep. of Information Engineering,\n*   SIGNET lab.\n*\n*   This program is free software; you can redistribute it and/or modify\n*   it under the terms of the GNU General Public License version 2 as\n*   published by the Free Software Foundation;\n*\n*   This program is distributed in the hope that it will be useful,\n*   but WITHOUT ANY WARRANTY; without even the implied warranty of\n*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*   GNU General Public License for more details.\n*\n*   You should have received a copy of the GNU General Public License\n*   along with this program; if not, write to the Free Software\n*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\n#include \"ns3/mmwave-sidelink-spectrum-phy.h\"\n#include \"ns3/mmwave-vehicular-net-device.h\"\n#include \"ns3/mmwave-vehicular-helper.h\"\n#include \"ns3/mobility-module.h\"\n#include \"ns3/mmwave-spectrum-value-helper.h\"\n#include \"ns3/applications-module.h\"\n#include \"ns3/buildings-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/config.h\"\n#include \"ns3/command-line.h\"\n\nNS_LOG_COMPONENT_DEFINE (\"VehicularSimpleThree\");\n\nusing namespace ns3;\nusing namespace millicar;\n\n/**\n  In this exampls, we considered two groups of vehicles traveling in\n  the same direction, either in the same ([sameLane] = true) or different lanes\n  ([sameLane] = false). Each group is composed of two vehicles, one behind the\n  other, moving at a constant speed of [speed] m/s and keeping a safety distance of\n  [intraGroupDistance] m. Within a group, the rear vehicle acts as a server and\n  generates data packets which are sent to the front vehicle. We considered an\n  ON-OFF traffic model, in which a UDP source keeps switching between the ON and\n  the OFF states. During the ON state, the source generates packets at a\n  constant rate for [onPeriod] ms, while in the OFF state it stays idle for a random\n  amount of time, which follows an exponential distribution with mean\n  [offPeriod] ms. All vehicles operate at 28 GHz with a bandwidth of 100 MHz,\n  possibly interfering in case of concurrent transmissions, and are equipped\n  with a Uniform Planar Array (UPA) of [numAntennaElements] antenna elements to\n  establish directional communications.\n  The simulation runs for [stopTime] ms, at outputs the overall Packet Reception\n  Ratio.\n*/\n\nuint32_t g_txPacketsGroup1 = 0; // tx packet counter for group 1\nuint32_t g_txPacketsGroup2 = 0; // tx packet counter for group 2\nuint32_t g_rxPacketsGroup1 = 0; // rx packet counter for group 1\nuint32_t g_rxPacketsGroup2 = 0; // rx packet counter for group 2\n\nstatic void Tx (Ptr<OutputStreamWrapper> stream, uint8_t group, Ptr<const Packet> p)\n{\n  *stream->GetStream () << \"Tx\\t\" << Simulator::Now ().GetSeconds () << \"\\t\" << p->GetSize () << std::endl;\n  if (group == 1)\n  {\n    ++g_txPacketsGroup1;\n  }\n  else if (group == 2)\n  {\n    ++g_txPacketsGroup2;\n  }\n}\n\nstatic void Rx (Ptr<OutputStreamWrapper> stream, uint8_t group, Ptr<const Packet> packet, const Address& from)\n{\n  Ptr<Packet> newPacket = packet->Copy ();\n  SeqTsHeader seqTs;\n  newPacket->RemoveHeader (seqTs);\n  if (seqTs.GetTs ().GetNanoSeconds () != 0)\n  {\n    uint64_t delayNs = Simulator::Now ().GetNanoSeconds () - seqTs.GetTs ().GetNanoSeconds ();\n    *stream->GetStream () << \"Rx\\t\" << Simulator::Now ().GetSeconds () << \"\\t\" << packet->GetSize() << \"\\t\" <<  delayNs << std::endl;\n  }\n  else\n  {\n    *stream->GetStream () << \"Rx\\t\" << Simulator::Now ().GetSeconds () << \"\\t\" << packet->GetSize() << std::endl;\n  }\n\n  if (group == 1)\n  {\n    ++g_rxPacketsGroup1;\n  }\n  else if (group == 2)\n  {\n    ++g_rxPacketsGroup2;\n  }\n}\n\nint main (int argc, char *argv[])\n{\n  uint32_t startTime = 100; // application start time in milliseconds\n  uint32_t stopTime = 5000; // application stop time in milliseconds\n  uint32_t onPeriod = 100; // on period duration in milliseconds\n  uint32_t offPeriod = 100; // mean duration of the off period in milliseconds\n  double dataRate = 100e6; // data rate in bps\n  uint32_t mcs = 28; // modulation and coding scheme\n\n  double interGroupDistance = 10; // distance between the two groups in meters\n  double speed = 20; // speed m/s\n  bool sameLane = true; // if true the two groups lie on the same lane (as a platoon), if false they lie on adjacent lanes\n\n  uint32_t numAntennaElements = 4; // number of antenna elements\n\n  bool orthogonalResources = true; // if true, resouces are orthogonal among the two groups, if false resources are shared\n  std::string scenario = \"V2V-Highway\";\n\n  CommandLine cmd;\n  cmd.AddValue (\"startTime\", \"application stop time in milliseconds\", startTime);\n  cmd.AddValue (\"stopTime\", \"application stop time in milliseconds\", stopTime);\n  cmd.AddValue (\"onPeriod\", \"on period duration in milliseconds\", onPeriod);\n  cmd.AddValue (\"offPeriod\", \"mean duration of the off period in milliseconds\", offPeriod);\n  cmd.AddValue (\"dataRate\", \"data rate in bps\", dataRate);\n  cmd.AddValue (\"mcs\", \"modulation and coding scheme\", mcs);\n  cmd.AddValue (\"interGroupDistance\", \"distance between the two groups in meters\", interGroupDistance);\n  cmd.AddValue (\"speed\", \"the speed of the vehicles in m/s\", speed);\n  cmd.AddValue (\"numAntennaElements\", \"number of antenna elements\", numAntennaElements);\n  cmd.AddValue (\"orthogonalResources\", \"if true, resouces are orthogonal among the two groups, if false resources are shared\", orthogonalResources);\n  cmd.AddValue (\"sameLane\", \"if true the two groups lie on the same lane, if false they lie on adjacent lanes\", sameLane);\n  cmd.AddValue (\"scenario\", \"set the vehicular scenario\", scenario);\n  cmd.Parse (argc, argv);\n\n  Config::SetDefault (\"ns3::MmWaveSidelinkMac::UseAmc\", BooleanValue (false));\n  Config::SetDefault (\"ns3::MmWaveSidelinkMac::Mcs\", UintegerValue (mcs));\n  Config::SetDefault (\"ns3::MmWavePhyMacCommon::CenterFreq\", DoubleValue (28.0e9));\n  Config::SetDefault (\"ns3::MmWaveVehicularNetDevice::RlcType\", StringValue(\"LteRlcUm\"));\n  \n  Config::SetDefault (\"ns3::MmWaveVehicularHelper::SchedulingPatternOption\", EnumValue(2)); // use 2 for SchedulingPatternOption=OPTIMIZED, 1 or SchedulingPatternOption=DEFAULT\n\n  Config::SetDefault (\"ns3::ThreeGppChannelModel::UpdatePeriod\", TimeValue (MilliSeconds (10)));\n  \n  Config::SetDefault (\"ns3::LteRlcUm::MaxTxBufferSize\", UintegerValue (500*1024));\n\n  Config::SetDefault (\"ns3::UniformPlanarArray::NumColumns\", UintegerValue (std::sqrt (numAntennaElements)));\n  Config::SetDefault (\"ns3::UniformPlanarArray::NumRows\", UintegerValue (std::sqrt (numAntennaElements)));\n\n  // create the nodes\n  NodeContainer group1, group2;\n  group1.Create (2);\n  group2.Create (2);\n\n  // create the mobility models\n  MobilityHelper mobility;\n  mobility.SetMobilityModel (\"ns3::ConstantVelocityMobilityModel\");\n  mobility.Install (group1);\n  mobility.Install (group2);\n\n  double intraGroupDistance = std::max (2.0, 2*speed); // distance between cars belonging to the same group in meters\n  group1.Get (0)->GetObject<MobilityModel> ()->SetPosition (Vector (0,0,0));\n  group1.Get (0)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (speed, 0, 0));\n\n  group1.Get (1)->GetObject<MobilityModel> ()->SetPosition (Vector (intraGroupDistance,0,0));\n  group1.Get (1)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (speed, 0, 0));\n\n  if (sameLane)\n  {\n    group2.Get (0)->GetObject<MobilityModel> ()->SetPosition (Vector (intraGroupDistance+interGroupDistance,0,0));\n    group2.Get (1)->GetObject<MobilityModel> ()->SetPosition (Vector (intraGroupDistance*2+interGroupDistance,0,0));\n\n  }\n  else\n  {\n    group2.Get (0)->GetObject<MobilityModel> ()->SetPosition (Vector (intraGroupDistance,interGroupDistance,0));\n    group2.Get (1)->GetObject<MobilityModel> ()->SetPosition (Vector (intraGroupDistance*2,interGroupDistance,0));\n  }\n  group2.Get (0)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (speed, 0, 0));\n  group2.Get (1)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (speed, 0, 0));\n\n  // create and configure the helper\n  Ptr<MmWaveVehicularHelper> helper = CreateObject<MmWaveVehicularHelper> ();\n  helper->SetNumerology (3);\n  helper->SetChannelModelType (scenario);\n  NetDeviceContainer devs1 = helper->InstallMmWaveVehicularNetDevices (group1);\n  NetDeviceContainer devs2 = helper->InstallMmWaveVehicularNetDevices (group2);\n\n  InternetStackHelper internet;\n  internet.Install (group1);\n  internet.Install (group2);\n\n  Ipv4AddressHelper ipv4;\n  NS_LOG_INFO (\"Assign IP Addresses.\");\n\n  ipv4.SetBase (\"10.1.1.0\", \"255.255.255.0\");\n  Ipv4InterfaceContainer i = ipv4.Assign (devs1);\n\n  ipv4.SetBase (\"10.1.2.0\", \"255.255.255.0\");\n  i = ipv4.Assign (devs2);\n\n  if (orthogonalResources)\n  {\n    // resources are orthogonally partitioned among the two groups\n    helper->PairDevices (NetDeviceContainer (devs1, devs2));\n  }\n  else\n  {\n    // resources are othogally partitioned among devices belonging to the\n    // same group, while shared among the two groups\n    helper->PairDevices(devs1);\n    helper->PairDevices(devs2);\n  }\n\n  Ipv4StaticRoutingHelper ipv4RoutingHelper;\n\n  Ptr<Ipv4StaticRouting> staticRouting = ipv4RoutingHelper.GetStaticRouting (group1.Get (0)->GetObject<Ipv4> ());\n  staticRouting->SetDefaultRoute (group1.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal () , 2 );\n\n  NS_LOG_DEBUG(\"IPv4 Address node 0 group 1: \" << group1.Get (0)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n  NS_LOG_DEBUG(\"IPv4 Address node 1 group 1: \" << group1.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n\n  staticRouting = ipv4RoutingHelper.GetStaticRouting (group2.Get (0)->GetObject<Ipv4> ());\n  staticRouting->SetDefaultRoute (group2.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal () , 2 );\n\n  // Mandatory to install buildings helper even if there are no buildings, \n  // otherwise V2V-Urban scenario does not work\n  BuildingsHelper::Install (group1);\n  BuildingsHelper::Install (group2);\n\n  // create the random variables used to setup the applications\n  Ptr<ConstantRandomVariable> onPeriodRv = CreateObjectWithAttributes<ConstantRandomVariable> (\"Constant\", DoubleValue (onPeriod / 1000.0));\n  Ptr<ExponentialRandomVariable> offPeriodRv = CreateObjectWithAttributes<ExponentialRandomVariable> (\"Mean\", DoubleValue (offPeriod / 1000.0));\n\n  // create the appplications for group 1\n  uint32_t port = 1234;\n  OnOffHelper onoff (\"ns3::UdpSocketFactory\", Address (InetSocketAddress (group1.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal (), port)));\n  onoff.SetConstantRate (DataRate (std::to_string (dataRate)+\"b/s\"));\n  onoff.SetAttribute (\"OnTime\", PointerValue (onPeriodRv));\n  onoff.SetAttribute (\"OffTime\", PointerValue (offPeriodRv));\n  ApplicationContainer onOffApps = onoff.Install (group1.Get (0));\n  \n  PacketSinkHelper sink (\"ns3::UdpSocketFactory\", Address (InetSocketAddress (Ipv4Address::GetAny (), port)));\n  ApplicationContainer packetSinkApps = sink.Install (group1.Get (1));\n\n  // create the applications for group 2\n  onoff.SetAttribute (\"Remote\", AddressValue (InetSocketAddress (group2.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal (), port)));\n  onOffApps.Add (onoff.Install (group2.Get (0)));\n\n  sink.SetAttribute (\"Local\", AddressValue (InetSocketAddress (Ipv4Address::GetAny (), port)));\n  packetSinkApps.Add (sink.Install (group2.Get (1)));\n\n  onOffApps.Start (MilliSeconds (startTime));\n  onOffApps.Stop (MilliSeconds (stopTime));\n\n  packetSinkApps.Start (MilliSeconds (0.0));\n\n  // connect the trace sources to the sinks\n  AsciiTraceHelper asciiTraceHelper;\n  Ptr<OutputStreamWrapper> stream = asciiTraceHelper.CreateFileStream (\"group-1.txt\");\n  onOffApps.Get (0)->TraceConnectWithoutContext (\"Tx\", MakeBoundCallback (&Tx, stream, 1));\n  packetSinkApps.Get (0)->TraceConnectWithoutContext (\"Rx\", MakeBoundCallback (&Rx, stream, 1));\n\n  stream = asciiTraceHelper.CreateFileStream (\"group-2.txt\");\n  onOffApps.Get(1)->TraceConnectWithoutContext (\"Tx\", MakeBoundCallback (&Tx, stream, 2));\n  packetSinkApps.Get (1)->TraceConnectWithoutContext (\"Rx\", MakeBoundCallback (&Rx, stream, 2));\n\n  Simulator::Stop (MilliSeconds(stopTime + 1000));\n  Simulator::Run ();\n  Simulator::Destroy ();\n\n  std::cout << \"PRR \" << double(g_rxPacketsGroup1 + g_rxPacketsGroup2) / double(g_txPacketsGroup1 + g_txPacketsGroup2) << std::endl;\n\n  return 0;\n}\n"
    },
    {
      "file_path": "examples/vehicular-simple-two.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n*   Copyright (c) 2020 University of Padova, Dep. of Information Engineering,\n*   SIGNET lab.\n*\n*   This program is free software; you can redistribute it and/or modify\n*   it under the terms of the GNU General Public License version 2 as\n*   published by the Free Software Foundation;\n*\n*   This program is distributed in the hope that it will be useful,\n*   but WITHOUT ANY WARRANTY; without even the implied warranty of\n*   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n*   GNU General Public License for more details.\n*\n*   You should have received a copy of the GNU General Public License\n*   along with this program; if not, write to the Free Software\n*   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n*/\n\n#include \"ns3/mmwave-sidelink-spectrum-phy.h\"\n#include \"ns3/mmwave-vehicular-net-device.h\"\n#include \"ns3/mmwave-vehicular-helper.h\"\n#include \"ns3/constant-position-mobility-model.h\"\n#include \"ns3/mobility-module.h\"\n#include \"ns3/isotropic-antenna-model.h\"\n#include \"ns3/spectrum-helper.h\"\n#include \"ns3/mmwave-spectrum-value-helper.h\"\n#include \"ns3/applications-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/buildings-module.h\"\n#include \"ns3/config.h\"\n#include \"ns3/command-line.h\"\n#include \"ns3/node-list.h\"\n\nNS_LOG_COMPONENT_DEFINE (\"VehicularSimpleTwo\");\n\nusing namespace ns3;\nusing namespace millicar;\n\nvoid PrintGnuplottableNodeListToFile (std::string filename);\n/**\nThis script creates two pairs of vehicles moving at 20 m/s. The two groups are virtually positioned in two different lanes.\nIn the same group, the vehicles are positioned one in front of the other at 20 m distance, and they exchange packets through a UDP application.\nCommunication is done via a wireless channel.\nThe aim of this example is to check whether the interference was evaluated correctly when different groups\nof nodes are transmitting in the same slot, sharing the same cell.\n*/\nint main (int argc, char *argv[])\n{\n  // system parameters\n  double bandwidth = 100.0e6; // bandwidth in Hz\n  double frequency = 28e9; // the carrier frequency\n  uint32_t numerology = 3; // the numerology\n\n  // applications\n  uint32_t packetSize = 1024; // UDP packet size in bytes\n  uint32_t startTime = 50; // application start time in milliseconds\n  uint32_t endTime = 2000; // application end time in milliseconds\n  uint32_t interPacketInterval = 1000; // interpacket interval in microseconds\n\n  // mobility\n  double speed = 20; // speed of the vehicles m/s\n  double intraGroupDistance = 10; // distance between two vehicles belonging to the same group\n  double interGroupInitialDistance = 40; // initial distance between the two groups\n  double laneDistance = 5.0; // distance between the two lanes\n  double antennaHeight = 2.0; // the height of the antenna\n  std::string scenario = \"V2V-Urban\";\n  \n  CommandLine cmd;\n  cmd.AddValue (\"vehicleSpeed\", \"The speed of the vehicle\", speed);\n  cmd.AddValue (\"scenario\", \"set the vehicular scenario\", scenario);\n  cmd.Parse (argc, argv);\n\n  Config::SetDefault (\"ns3::MmWaveSidelinkMac::UseAmc\", BooleanValue (true));\n  Config::SetDefault (\"ns3::MmWavePhyMacCommon::CenterFreq\", DoubleValue (frequency));\n  \n  Config::SetDefault (\"ns3::MmWaveVehicularHelper::Bandwidth\", DoubleValue (bandwidth));\n  Config::SetDefault (\"ns3::MmWaveVehicularHelper::Numerology\", UintegerValue (numerology));\n  \n  Config::SetDefault (\"ns3::ThreeGppChannelModel::UpdatePeriod\", TimeValue (MilliSeconds (10)));\n  \n  // create the nodes\n  NodeContainer group1, group2;\n  group1.Create (2);\n  group2.Create (2);\n\n  // create the mobility models\n  MobilityHelper mobility;\n  mobility.SetMobilityModel (\"ns3::ConstantVelocityMobilityModel\");\n  mobility.Install (group1);\n  mobility.Install (group2);\n\n  group1.Get (0)->GetObject<MobilityModel> ()->SetPosition (Vector (-(interGroupInitialDistance / 2 + intraGroupDistance) , -laneDistance / 2, antennaHeight));\n  group1.Get (0)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (speed, 0, 0));\n\n  group1.Get (1)->GetObject<MobilityModel> ()->SetPosition (Vector (-(interGroupInitialDistance / 2), -laneDistance / 2, antennaHeight));\n  group1.Get (1)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (speed, 0, 0));\n\n  group2.Get (0)->GetObject<MobilityModel> ()->SetPosition (Vector (interGroupInitialDistance / 2, laneDistance / 2, antennaHeight));\n  group2.Get (0)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (-speed, 0, 0));\n\n  group2.Get (1)->GetObject<MobilityModel> ()->SetPosition (Vector (interGroupInitialDistance / 2 + intraGroupDistance, laneDistance / 2, antennaHeight));\n  group2.Get (1)->GetObject<ConstantVelocityMobilityModel> ()->SetVelocity (Vector (-speed, 0, 0));\n\n  // create and configure the helper\n  Ptr<MmWaveVehicularHelper> helper = CreateObject<MmWaveVehicularHelper> ();\n  helper->SetNumerology (numerology);\n  helper->SetNumerology (3);\n  helper->SetChannelModelType (scenario);\n  NetDeviceContainer devs1 = helper->InstallMmWaveVehicularNetDevices (group1);\n  NetDeviceContainer devs2 = helper->InstallMmWaveVehicularNetDevices (group2);\n\n  // install the internet stack\n  InternetStackHelper internet;\n  internet.Install (group1);\n  internet.Install (group2);\n\n  // assign the IP addresses\n  Ipv4AddressHelper ipv4;\n  ipv4.SetBase (\"10.1.1.0\", \"255.255.255.0\");\n  Ipv4InterfaceContainer i = ipv4.Assign (devs1);\n\n  ipv4.SetBase (\"10.1.2.0\", \"255.255.255.0\");\n  i = ipv4.Assign (devs2);\n  \n  // Mandatory to install buildings helper even if there are no buildings, \n  // otherwise V2V-Urban scenario does not work\n  BuildingsHelper::Install (group1);\n  BuildingsHelper::Install (group2);\n\n  // connect the devices belonging to the same group\n  helper->PairDevices(devs1);\n  helper->PairDevices(devs2);\n\n  Ipv4StaticRoutingHelper ipv4RoutingHelper;\n\n  Ptr<Ipv4StaticRouting> staticRouting = ipv4RoutingHelper.GetStaticRouting (group1.Get (0)->GetObject<Ipv4> ());\n  staticRouting->SetDefaultRoute (group1.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal () , 2 );\n\n  NS_LOG_DEBUG(\"IPv4 Address node 0 group 1: \" << group1.Get (0)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n  NS_LOG_DEBUG(\"IPv4 Address node 1 group 1: \" << group1.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n\n  staticRouting = ipv4RoutingHelper.GetStaticRouting (group2.Get (0)->GetObject<Ipv4> ());\n  staticRouting->SetDefaultRoute (group2.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal () , 2 );\n\n  NS_LOG_DEBUG(\"IPv4 Address node 0 group 2: \" << group2.Get (0)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n  NS_LOG_DEBUG(\"IPv4 Address node 1 group 2: \" << group2.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal ());\n\n  // setup the applications\n  Config::SetDefault (\"ns3::UdpClient::MaxPackets\", UintegerValue (0xFFFFFFFF));\n  Config::SetDefault (\"ns3::UdpClient::Interval\", TimeValue (MicroSeconds (interPacketInterval)));\n  Config::SetDefault (\"ns3::UdpClient::PacketSize\", UintegerValue (packetSize));\n\n  // create the applications for group 1\n  uint32_t port = 4000;\n  UdpServerHelper server11 (port);\n  ApplicationContainer apps = server11.Install (group1.Get (1));\n\n  UdpServerHelper server10 (port);\n  apps.Add (server10.Install (group1.Get (0)));\n\n  UdpClientHelper client10 (group1.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal (), port);\n  apps.Add (client10.Install (group1.Get (0)));\n\n  UdpClientHelper client11 (group1.Get (0)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal (), port);\n  apps.Add (client11.Install (group1.Get (1)));\n\n  // create the applications for group 2\n  UdpServerHelper server21 (port);\n  apps.Add(server21.Install (group2.Get (1)));\n\n  UdpClientHelper client20 (group2.Get (1)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal (), port);\n  apps.Add (client20.Install (group2.Get (0)));\n\n  UdpClientHelper client21 (group2.Get (0)->GetObject<Ipv4> ()->GetAddress (1, 0).GetLocal (), port);\n  apps.Add (client21.Install (group2.Get (1)));\n\n  // set the application start/end time\n  apps.Start (MilliSeconds (startTime));\n  apps.Stop (MilliSeconds (endTime));\n\n  PrintGnuplottableNodeListToFile (\"scenario.txt\");\n\n  Simulator::Stop (MilliSeconds (endTime + 1000));\n  Simulator::Run ();\n  Simulator::Destroy ();\n\n  return 0;\n}\n\nvoid\nPrintGnuplottableNodeListToFile (std::string filename)\n{\n  std::ofstream outFile;\n  outFile.open (filename.c_str (), std::ios_base::out | std::ios_base::trunc);\n  if (!outFile.is_open ())\n    {\n      NS_LOG_ERROR (\"Can't open file \" << filename);\n      return;\n    }\n  outFile << \"set xrange [-200:200]; set yrange [-200:200]\" << std::endl;\n  for (NodeList::Iterator it = NodeList::Begin (); it != NodeList::End (); ++it)\n    {\n      Ptr<Node> node = *it;\n      int nDevs = node->GetNDevices ();\n      for (int j = 0; j < nDevs; j++)\n        {\n          Ptr<MmWaveVehicularNetDevice> vdev = node->GetDevice (j)->GetObject <MmWaveVehicularNetDevice> ();\n          if (vdev)\n            {\n              Vector pos = node->GetObject<MobilityModel> ()->GetPosition ();\n              outFile << \"set label \\\"\" << vdev->GetMac ()->GetRnti ()\n                      << \"\\\" at \"<< pos.x << \",\" << pos.y << \" left font \\\"Helvetica,8\\\" textcolor rgb \\\"black\\\" front point pt 7 ps 0.3 lc rgb \\\"black\\\" offset 0,0\"\n                      << std::endl;\n\n              // Simulator::Schedule (Seconds (1), &PrintHelper::UpdateGnuplottableNodeListToFile, filename, node);\n            }\n        }\n    }\n}\n"
    }
  ]
}