{
  "repo_name": "sns3/sns3-satellite",
  "github_url": "https://github.com/sns3/sns3-satellite",
  "readme": "# Satellite NS-3\n\nSatellite Network Simulator 3 (SNS-3) is a satellite network extension to Network Simulator 3 (ns-3) platform.\nSNS-3 was initially developed by Magister Solutions under ESA contact.\n\n# License\n\nSNS-3 is distributed under the GPLv3 license.\n\nSome external modules have been partially or totally integrated to SNS-3:\n\n * [lorawan](https://github.com/signetlabdei/lorawan), with license GPLv2\n * [SGP4 satellite movement](https://gitlab.inesctec.pt/pmms/ns3-satellite/), with license GPLv2\n * [ISL routing](https://github.com/snkas/hypatia/), with license GPLv2\n\n# Installation Manual\n\nSNS-3 is built as an extension module to the [NS-3](https://www.nsnam.org/) network simulator; so their [installation instructions](https://www.nsnam.org/docs/release/3.43/tutorial/html/getting-started.html) apply, particularly concerning the dependencies. They are repeated here for convenience and proper integration of SNS-3.\n\nThis revision of SNS-3 is compatible with NS-3.43.\n\nThere are 2 methods to download and build (S)NS-3:\n\n*  the automated one using [bake](#bake);\n*  the manual one using [CMake](#cmake).\n\nThe CMake method is recommended.\n\n## Bake\n\n### Preparations\n\n\n[Bake](http://planete.inria.fr/software/bake/index.html) is a tool developed to simplify the download and install process of NS-3. It can be extended to make it aware of external modules to NS-3 such as SNS-3. You will first need to get bake.\n\nFirst you need to download Bake using Git, go to where you want Bake to be installed and call\n\n```shell\n$ git clone https://gitlab.com/nsnam/bake.git\n```\n\nIt is advisable to add bake to your path\n\n```shell\n$ export BAKE_HOME=`pwd`/bake\n$ export PATH=$PATH:$BAKE_HOME\n$ export PYTHONPATH=$PYTHONPATH:$BAKE_HOME\n```\n\nBefore installing NS-3, you will need to tell Bake how to find and download the SNS-3 extension module. To do so, you will have to create a **contrib** folder inside the newly acquired **bake** folder:\n\n```shell\n$ cd bake\n$ mkdir contrib\n$ ls\nbake  bakeconf.xml  bake.py  contrib  doc  examples  generate-binary.py  test  TODO\n```\n\n\nand drop the following file **sns3.xml** in this **contrib** folder:\n\n```xml\n<configuration>\n  <modules>\n    <module name=\"sns3-stats\" type=\"ns-contrib\" min_version=\"ns-3.37\">\n      <source type=\"git\">\n        <attribute name=\"url\" value=\"https://github.com/sns3/stats.git\"/>\n        <attribute name=\"module_directory\" value=\"magister-stats\"/>\n      </source>\n      <build type=\"none\">\n      </build>\n    </module>\n    <module name=\"sns3-traffic\" type=\"ns-contrib\" min_version=\"ns-3.37\">\n      <source type=\"git\">\n        <attribute name=\"url\" value=\"https://github.com/sns3/traffic.git\" />\n        <attribute name=\"module_directory\" value=\"traffic\"/>\n      </source>\n      <build type=\"none\">\n      </build>\n    </module>\n    <module name=\"sns3-satellite\" type=\"ns-contrib\" min_version=\"ns-3.37\">\n      <source type=\"git\">\n        <attribute name=\"url\" value=\"https://github.com/sns3/sns3-satellite.git\"/>\n        <attribute name=\"module_directory\" value=\"satellite\"/>\n        <attribute name=\"post_download\" value=\"cd $SRCDIR; git submodule update --init --recursive\"/>\n      </source>\n      <depends_on name=\"sns3-stats\" optional=\"False\" />\n      <depends_on name=\"sns3-traffic\" optional=\"False\" />\n      <build type=\"none\">\n      </build>\n    </module>\n  </modules>\n</configuration>\n```\n\nThis configuration file is used to get all the NS-3 modules needed to compile SNS-3. By default, for each module, bake takes the most recent commit on master. If you want a specific commit for a module, add the following line (with the wanted revision in value) between the flags `<attribute name=\"url\" ...>` and `<attribute name=\"module_directory\" ...>`:\n\n```xml\n<attribute name=\"revision\" value=\"72aa513f43b7687336cf6251d50e81420c41691f\"/>\n```\n\nIt might be necessary to remove the default bake configuration one in order to install SNS-3:\n```shell\n$ rm bakefile.xml\n```\n\nNow you\u2019re ready to use bake.\n\n### Installation\n\nNow that everything is in place, you can tell bake that you want to install SNS-3 (i.e.: `ns-3` plus the `sns3-satellite` module):\n\n```shell\n$ ./bake.py configure -e ns-3.43 -e sns3-satellite -e sns3-stats -e sns3-traffic\n$ ./bake.py deploy\n```\n\nThis will download the needed dependencies into a `source` folder and call the various build tools on each target.\nIf bake finds that tools are missing on your system to download or build the various dependencies it will warn you\nand abort the build process if the dependency wasn't optional. You can ask bake for a summary of the required tools before deploying:\n\n```shell\n$ ./bake.py check\n```\n\n## CMake\n\nIf you wish to have finer control over what is being compiled, you can handle the download process of the dependencies yourself and use CMake directly to build NS-3.\n\nYou will need to:\n\n*  get NS-3 (by [cloning it using git](https://gitlab.com/nsnam/ns-3-dev.git));\n```shell\n$ git clone https://gitlab.com/nsnam/ns-3-dev.git ns-3.43\n```\n\n*  get the `satellite` module (by [cloning it using git](https://github.com/SNS-3/SNS-3-satellite));\n```shell\n$ cd ns-3.43/contrib\n$ git clone https://github.com/sns3/sns3-satellite.git satellite\n```\n*  get the `traffic` and `magister-stats` modules (needed until they are integrated into NS-3) as dependencies of the `satellite` module by cloning them :\n\n```shell\n$ git clone https://github.com/sns3/traffic.git traffic\n$ git clone https://github.com/sns3/stats.git magister-stats\n```\n\n*note : When retrieving the **satellite**, **traffic** and **magister-stats** modules, you should put\nthem under the **ns-3.43/contrib/** folder. You can do so by cloning them directly in this folder,\nextracting them here, copying the files afterwards or using symbolic links.*\n\nMake sure all the repositories are using compatible versions. The best way to ensure that is to use the same tag on all repositories. For the latest release:\n\n * On NS-3 repository:\n```shell\n$ cd ns-3.43\n$ git checkout ns-3.43\n```\n * On `satellite`, `traffic` and `magister-stats` repositories:\n```shell\n$ cd ns-3.43/contrib/[satellite|traffic|magister-stats]\n$ git checkout 3.43\n```\n\nThen you need to configure CMake and ask it to build NS-3. It will automatically build all modules found in contrib:\n\n```shell\n$ cd ns-3.43\n$ ./ns3 clean\n$ ./ns3 configure --build-profile=optimized --enable-examples --enable-tests\n$ ./ns3 build\n```\n\nIf you want to develop in NS-3, use it in [debug mode](https://www.nsnam.org/docs/release/3.43/tutorial/html/getting-started.html#debugging). It enables debug functionnalities but it is way more slower:\n\n```shell\n$ cd ns-3.43\n$ ./ns3 clean\n$ ./ns3 configure --build-profile=debug --enable-examples --enable-tests\n$ ./ns3 build\n```\n\nYou can also check CMake options to customize it at will:\n\n```shell\n$ ./ns3 --help\n```\n\n## Post-Compilation\n\nOnce you compiled SNS-3 successfully, you will need an extra step before being able to run any simulation: download the data defining the reference scenario of the simulation.\n\nThese data are available as a separate repository and bundled as a submodule in SNS-3. You can download them afterwards in the `satellite` repository using:\n\n```shell\n$ cd source/ns-3.43/contrib/satellite\n$ git submodule update --init --recursive\n```\n\n# Testing SNS-3\n\nYou can run the unit tests of the NS-3 distribution by running the `./test.py` script:\n\n```shell\n$ ./test.py --no-build\n```\n\nThese tests are run in parallel by NS-3. You should eventually see a report saying that:\n\n```shell\n868 of 868 tests passed (868 passed, 0 failed, 0 crashed, 0 valgrind errors)\n```\n\n# Running SNS-3\n\nA scenario can be launched as follows:\n\n```shell\n$ ./ns3 run <ns3-program>\n```\n\nIf command line arguments are needed, the command becomes:\n\n```shell\n$ ./ns3 run <ns3-program> -- --arg1=value1 --arg2=value2\n```\n\nTo list all the available command line arguments of a scenario, run:\n\n```shell\n$ ./ns3 run <ns3-program> -- --PrintHelp\n```\n\nIf debug mode is enabled, gdb can be used:\n\n```shell\n$ ./ns3 run --gdb <ns3-program>\n```\n\nSNS-3 is delivered with several examples. Each one allows to demonstrate one or several functionalities of SNS-3. Statistics are generated in the `data/sims/<ns3-program>` folder.\n\nThe main examples are:\n\n * `sat-cbr-example.cc`: Simple example with CBR traffic\n * `sat-regeneration-example.cc`: Example to test several regeneration modes on satellite: transparent, physical, link or network. By default, all simulations use one transparent satellite\n * `sat-constellation-example.cc`: Example with LEO and GEO satellite constellations. ISLs are used to route packets between satellites, with static routing\n * `sat-vhts-example.cc`: Create a VHTS scenario (high throughputs and high link capacities)\n * `sat-iot-example.cc`: Create an IoT scenario (low throughputs and low link capacities)\n * `sat-logon-example.cc`: Use the logon functionality to log the UTs on the NCC. Traffic on return channels is not send before UT is logged\n * `sat-ncr-example.cc`: Use NCR synchronization between UTs and GWs. UT clock is generally cheap, and need to be resynchronized periodically by the NCC to correctly schedule sending of frames on return channel\n * `sat-lora-example.cc`: Create a scenario with Lora configuration, and on transparent satellite. Lora is a LPWAN protocol developed for IoT\n * `sat-lora-regenerative-example.cc`: Create a scenario with Lora configuration and regenerative satellites\n",
  "examples": [
    {
      "file_path": "examples/sat-arq-fwd-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-arq-fwd-example.cc\n * \\ingroup satellite\n *\n * \\brief  An example to test FWD link ARQ functionality\n *\n *         execute command -> ./waf --run \"sat-arq-fwd-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-arq-fwd-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId(1);\n    uint32_t endUsersPerUt(3);\n    uint32_t utsPerBeam(3);\n    uint32_t packetSize(128);\n    Time interval(Seconds(0.3));\n    Time simLength(Seconds(100.0));\n    Time appStartTime = Seconds(0.1);\n\n    // enable info logs\n    // LogComponentEnable (\"CbrApplication\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"PacketSink\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"sat-arq-fwd-example\", LOG_LEVEL_INFO);\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-arq-fwd\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetDefaultValues();\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetSimulationTime(simLength);\n\n    std::stringstream beamsEnabled;\n    beamsEnabled << beamId;\n    simulationHelper->SetBeams(beamsEnabled.str());\n\n    // Configure error model\n    double errorRate(0.10);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkConstantErrorRate\", DoubleValue(errorRate));\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_CONSTANT));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_NONE));\n\n    // Enable ARQ\n    Config::SetDefault(\"ns3::SatLlc::RtnLinkArqEnabled\", BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLlc::FwdLinkArqEnabled\", BooleanValue(true));\n\n    // RTN link ARQ attributes\n    Config::SetDefault(\"ns3::SatGenericStreamEncapsulatorArq::MaxNoOfRetransmissions\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatGenericStreamEncapsulatorArq::WindowSize\", UintegerValue(20));\n    Config::SetDefault(\"ns3::SatGenericStreamEncapsulatorArq::RetransmissionTimer\",\n                       TimeValue(Seconds(0.6)));\n    Config::SetDefault(\"ns3::SatGenericStreamEncapsulatorArq::RxWaitingTime\",\n                       TimeValue(Seconds(1.8)));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario();\n\n    //---- Start CBR application definitions\n\n    NS_LOG_INFO(\"Creating CBR applications and sinks\");\n\n    if (endUsersPerUt * utsPerBeam > 0)\n    {\n        /// Create applicationa on GW user\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::FWD_LINK,\n            SatTrafficHelper::UDP,\n            interval,\n            packetSize,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            appStartTime,\n            simLength,\n            Seconds(0.001));\n    }\n    //---- Stop CBR application definitions\n\n    NS_LOG_INFO(\"--- sat-arq-fwd-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-arq-rtn-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-arq-rtn-example.cc\n * \\ingroup satellite\n *\n * \\brief  An example to test RTN link ARQ functionality\n *\n *         execute command -> ./waf --run \"sat-arq-rtn-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-arq-rtn-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId = 1;\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(3);\n    uint32_t packetSize(128);\n    Time interval(Seconds(0.3));\n    Time simLength(Seconds(100.0));\n    Time appStartTime = Seconds(0.1);\n\n    // enable info logs\n    // LogComponentEnable (\"CbrApplication\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"PacketSink\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"sat-arq-rtn-example\", LOG_LEVEL_INFO);\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-arq-rtn\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetSimulationTime(simLength);\n\n    std::stringstream beamsEnabled;\n    beamsEnabled << beamId;\n    simulationHelper->SetBeams(beamsEnabled.str());\n\n    // Configure error model\n    double errorRate(0.1);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_NONE));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_CONSTANT));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkConstantErrorRate\", DoubleValue(errorRate));\n\n    // Enable ARQ\n    Config::SetDefault(\"ns3::SatLlc::RtnLinkArqEnabled\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLlc::FwdLinkArqEnabled\", BooleanValue(false));\n\n    // RTN link ARQ attributes\n    Config::SetDefault(\"ns3::SatReturnLinkEncapsulatorArq::MaxNoOfRetransmissions\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatReturnLinkEncapsulatorArq::WindowSize\", UintegerValue(20));\n    Config::SetDefault(\"ns3::SatReturnLinkEncapsulatorArq::RetransmissionTimer\",\n                       TimeValue(Seconds(0.6)));\n    Config::SetDefault(\"ns3::SatReturnLinkEncapsulatorArq::RxWaitingTime\", TimeValue(Seconds(1.8)));\n\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantServiceRate\",\n                       StringValue(\"ns3::ConstantRandomVariable[Constant=10]\"));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantServiceRate\",\n                       StringValue(\"ns3::ConstantRandomVariable[Constant=100]\"));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario();\n\n    /// Create applicationa on UT users\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        interval,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength,\n        Seconds(0.001));\n\n    NS_LOG_INFO(\"--- sat-arq-rtn-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-beam-position-tracer.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2018 CNES\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n */\n\n#include <ns3/config-store-module.h>\n#include <ns3/core-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/network-module.h>\n#include <ns3/satellite-module.h>\n#include <ns3/traffic-module.h>\n\nusing namespace ns3;\n\n/**\n * \\file sat-beam-position-tracer.cc\n * \\ingroup satellite\n *\n * \\brief Script used to get center of each beam at simulation start and every time step.\n *\n * execute command -> ./ns3 run \"sat-beam-position-tracer --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-beam-position-tracer\");\n\nvoid\nGetBeamPositions(Ptr<SatHelper> satHelper)\n{\n    Ptr<SatAntennaGainPatternContainer> antennaGainPatterns = satHelper->GetAntennaGainPatterns();\n    NodeContainer satNodes = Singleton<SatTopology>::Get()->GetOrbiterNodes();\n    uint32_t beamCount = satHelper->GetBeamCount();\n    for (uint32_t satId = 0; satId < satNodes.GetN(); satId++)\n    {\n        Ptr<SatMobilityModel> mobility = antennaGainPatterns->GetAntennaMobility(satId);\n        for (uint32_t beamId = 0; beamId < beamCount; beamId++)\n        {\n            Ptr<SatAntennaGainPattern> pattern =\n                antennaGainPatterns->GetAntennaGainPattern(beamId + 1);\n            std::cout << Simulator::Now().GetSeconds() << \";\" << satId << \";\" << beamId << \";\"\n                      << pattern->GetCenterLatitude(mobility) << \";\"\n                      << pattern->GetCenterLongitude(mobility) << std::endl;\n        }\n    }\n}\n\nint\nmain(int argc, char* argv[])\n{\n    std::string scenario = \"constellation-leo-2-satellites\";\n    uint32_t simLength_s = 1000;\n    uint32_t simTraceStep_s = 10;\n\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n\n    Config::SetDefault(\"ns3::SatGwMac::DisableSchedulingIfNoDeviceConnected\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatOrbiterMac::DisableSchedulingIfNoDeviceConnected\",\n                       BooleanValue(true));\n\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"sat-beam-position-tracer\");\n\n    CommandLine cmd;\n    cmd.AddValue(\"Scenario\", \"Scenario to load\", scenario);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->LoadScenario(scenario);\n    simulationHelper->SetSimulationTime(simLength_s);\n    simulationHelper->SetUserCountPerUt(1);\n\n    Ptr<SatHelper> satHelper = simulationHelper->CreateSatScenario(SatHelper::FULL);\n\n    double t = 0.0;\n    while (t <= simLength_s)\n    {\n        Simulator::Schedule(Seconds(t), &GetBeamPositions, satHelper);\n        t = t + simTraceStep_s;\n    }\n\n    std::cout << \"time;satId;beamId;latitude;longitude\" << std::endl;\n\n    simulationHelper->RunSimulation();\n}\n"
    },
    {
      "file_path": "examples/sat-cbr-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Sami Rantanen <sami.rantanen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-cbr-example.cc\n * \\ingroup satellite\n *\n * \\brief  Cbr example application to use satellite network.\n *          Interval, packet size and test scenario can be given\n *         in command line as user argument.\n *         To see help for user arguments:\n *         execute command -> ./waf --run \"sat-cbr-example --PrintHelp\"\n *\n *         Cbr example application sends first packets from GW connected user\n *         to UT connected users and after that from UT connected user to GW connected\n *         user.\n *\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-cbr-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamIdInFullScenario = 10;\n    uint32_t packetSize = 512;\n    std::string interval = \"1s\";\n    std::string scenario = \"simple\";\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n\n    //  To read attributes from file\n    //  Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (\"input-attributes.xml\"));\n    //  Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Load\"));\n    //  Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    //  ConfigStore inputConfig;\n    //  inputConfig.ConfigureDefaults ();\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-cbr\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"beamIdInFullScenario\",\n                 \"Id where Sending/Receiving UT is selected in FULL scenario. (used only when \"\n                 \"scenario is full) \",\n                 beamIdInFullScenario);\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s)\", interval);\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full\", scenario);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n    // Set tag, if output path is not explicitly defined\n    simulationHelper->SetOutputTag(scenario);\n\n    simulationHelper->SetSimulationTime(Seconds(11));\n\n    // Set beam ID\n    std::stringstream beamsEnabled;\n    beamsEnabled << beamIdInFullScenario;\n    simulationHelper->SetBeams(beamsEnabled.str());\n\n    // enable info logs\n    LogComponentEnable(\"CbrApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"sat-cbr-example\", LOG_LEVEL_INFO);\n\n    // remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    Ptr<SatHelper> helper = simulationHelper->CreateSatScenario(satScenario);\n\n    // in full scenario get given beam UTs and use first UT's users\n    // other scenarios get all UT users.\n    if (scenario == \"full\")\n    {\n        // Manual configuration of applications\n\n        // get users\n        NodeContainer uts = helper->GetBeamHelper()->GetUtNodes(0, beamIdInFullScenario);\n        NodeContainer utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes(uts.Get(0));\n        NodeContainer gwUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n\n        uint16_t port = 9;\n\n        // create application on GW user\n        PacketSinkHelper sinkHelper(\n            \"ns3::UdpSocketFactory\",\n            InetSocketAddress(helper->GetUserAddress(gwUsers.Get(0)), port));\n        CbrHelper cbrHelper(\"ns3::UdpSocketFactory\",\n                            InetSocketAddress(helper->GetUserAddress(utUsers.Get(0)), port));\n        cbrHelper.SetAttribute(\"Interval\", StringValue(interval));\n        cbrHelper.SetAttribute(\"PacketSize\", UintegerValue(packetSize));\n\n        ApplicationContainer gwSink = sinkHelper.Install(gwUsers.Get(0));\n        gwSink.Start(Seconds(1.0));\n        gwSink.Stop(Seconds(10.0));\n\n        ApplicationContainer gwCbr = cbrHelper.Install(gwUsers.Get(0));\n        gwCbr.Start(Seconds(1.0));\n        gwCbr.Stop(Seconds(2.1));\n\n        // create application on UT user\n        sinkHelper.SetAttribute(\n            \"Local\",\n            AddressValue(Address(InetSocketAddress(helper->GetUserAddress(utUsers.Get(0)), port))));\n        cbrHelper.SetAttribute(\n            \"Remote\",\n            AddressValue(Address(InetSocketAddress(helper->GetUserAddress(gwUsers.Get(0)), port))));\n\n        ApplicationContainer utSink = sinkHelper.Install(utUsers.Get(0));\n        utSink.Start(Seconds(1.0));\n        utSink.Stop(Seconds(10.0));\n\n        ApplicationContainer utCbr = cbrHelper.Install(utUsers.Get(0));\n        utCbr.Start(Seconds(7.0));\n        utCbr.Stop(Seconds(9.1));\n    }\n    else\n    {\n        /*simulationHelper->GetTrafficHelper()->AddCbrTraffic(SatTrafficHelper::FWD_LINK,\n                                                            SatTrafficHelper::UDP,\n                                                            Time(interval),\n                                                            packetSize,\n                                                            Singleton<SatTopology>::Get()->GetGwUserNodes(),\n                                                            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n                                                            Seconds(1.0),\n                                                            Seconds(2.1),\n                                                            Seconds(0));*/\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            Time(interval),\n            packetSize,\n            Singleton<SatTopology>::Get()->GetGwUserNodes(),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(7.0),\n            Seconds(9.1),\n            Seconds(0));\n    }\n\n    NS_LOG_INFO(\"--- sat-cbr-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    if (scenario == \"full\")\n    {\n        NS_LOG_INFO(\"  UT used in full scenario from beam: \" << beamIdInFullScenario);\n    }\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    // To store attributes to file\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (\"output-attributes.xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-cbr-full-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-cbr-full-example.cc\n * \\ingroup satellite\n *\n * \\brief  An example to run CBR application in full satellite scenario and FWD link.\n *\n *         execute command -> ./waf --run \"sat-cbr-full-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-cbr-full-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    // LogComponentEnable (\"CbrApplication\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"PacketSink\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"sat-arq-rtn-example\", LOG_LEVEL_INFO);\n\n    uint32_t endUsersPerUt(3);\n    uint32_t utsPerBeam(3);\n    uint32_t packetSize(128);\n    std::string interval(\"1s\");\n    double simLength(10.0);\n\n    Time appStartTime = Seconds(0.001);\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-cbr-full\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s)\", interval);\n    cmd.AddValue(\"simLength\", \"Simulation length in seconds\", simLength);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetSimulationTime(simLength);\n\n    // We set the UT count and UT user count using attributes when configuring a pre-defined\n    // scenario\n    Config::SetDefault(\"ns3::SatHelper::UtCount\", UintegerValue(utsPerBeam));\n    Config::SetDefault(\"ns3::SatHelper::UtUsers\", UintegerValue(endUsersPerUt));\n\n    // Configure a static error probability\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_CONSTANT);\n    double errorRate(0.2);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkConstantErrorRate\", DoubleValue(errorRate));\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkConstantErrorRate\", DoubleValue(errorRate));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Create full scenario\n    simulationHelper->CreateSatScenario(SatHelper::FULL);\n\n    // >>> Start of actual test using Full scenario >>>\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        Seconds(simLength),\n        Seconds(0.001));\n\n    NS_LOG_INFO(\"--- sat-cbr-full-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n\n} // end of `int main (int argc, char *argv[])`\n"
    },
    {
      "file_path": "examples/sat-cbr-stats-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Budiarto Herman <budiarto.herman@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n#define CALL_SAT_STATS_BASIC_ELEMENT(id)                                                           \\\n    s->Add##id(SatStatsHelper::OUTPUT_SCALAR_FILE);                                                \\\n    s->Add##id(SatStatsHelper::OUTPUT_SCATTER_FILE);                                               \\\n    s->Add##id(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n\n#define CALL_SAT_STATS_BASIC_SET(id)                                                               \\\n    CALL_SAT_STATS_BASIC_ELEMENT(Global##id)                                                       \\\n    CALL_SAT_STATS_BASIC_ELEMENT(PerGw##id)                                                        \\\n    CALL_SAT_STATS_BASIC_ELEMENT(PerBeam##id)                                                      \\\n    CALL_SAT_STATS_BASIC_ELEMENT(PerUt##id)\n\n#define CALL_SAT_STATS_DISTRIBUTION_ELEMENT(id)                                                    \\\n    s->Add##id(SatStatsHelper::OUTPUT_SCALAR_FILE);                                                \\\n    s->Add##id(SatStatsHelper::OUTPUT_SCATTER_FILE);                                               \\\n    s->Add##id(SatStatsHelper::OUTPUT_HISTOGRAM_FILE);                                             \\\n    s->Add##id(SatStatsHelper::OUTPUT_PDF_FILE);                                                   \\\n    s->Add##id(SatStatsHelper::OUTPUT_CDF_FILE);                                                   \\\n    s->Add##id(SatStatsHelper::OUTPUT_SCATTER_PLOT);                                               \\\n    s->Add##id(SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);                                             \\\n    s->Add##id(SatStatsHelper::OUTPUT_PDF_PLOT);                                                   \\\n    s->Add##id(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n#define CALL_SAT_STATS_DISTRIBUTION_SET(id)                                                        \\\n    CALL_SAT_STATS_DISTRIBUTION_ELEMENT(Global##id)                                                \\\n    CALL_SAT_STATS_DISTRIBUTION_ELEMENT(PerGw##id)                                                 \\\n    CALL_SAT_STATS_DISTRIBUTION_ELEMENT(PerBeam##id)                                               \\\n    CALL_SAT_STATS_DISTRIBUTION_ELEMENT(PerUt##id)\n\n#define CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET(id)                                               \\\n    s->AddAverageBeam##id(SatStatsHelper::OUTPUT_HISTOGRAM_FILE);                                  \\\n    s->AddAverageBeam##id(SatStatsHelper::OUTPUT_PDF_FILE);                                        \\\n    s->AddAverageBeam##id(SatStatsHelper::OUTPUT_CDF_FILE);                                        \\\n    s->AddAverageBeam##id(SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);                                  \\\n    s->AddAverageBeam##id(SatStatsHelper::OUTPUT_PDF_PLOT);                                        \\\n    s->AddAverageBeam##id(SatStatsHelper::OUTPUT_CDF_PLOT);                                        \\\n                                                                                                   \\\n    s->AddAverageUt##id(SatStatsHelper::OUTPUT_HISTOGRAM_FILE);                                    \\\n    s->AddAverageUt##id(SatStatsHelper::OUTPUT_PDF_FILE);                                          \\\n    s->AddAverageUt##id(SatStatsHelper::OUTPUT_CDF_FILE);                                          \\\n    s->AddAverageUt##id(SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);                                    \\\n    s->AddAverageUt##id(SatStatsHelper::OUTPUT_PDF_PLOT);                                          \\\n    s->AddAverageUt##id(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n/**\n * \\file sat-cbr-stats-example.cc\n * \\ingroup satellite\n *\n * \\brief  Cbr example application to use satellite network and to produce\n *         the full range of statistics. Only some of the statistics are enabled\n *         by default.\n *         Interval, packet size and test scenario can be given\n *         in command line as user argument.\n *         To see help for user arguments:\n *         execute command -> ./waf --run \"sat-cbr-stats-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-cbr-stats-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t packetSize = 512;\n    std::string interval = \"1s\";\n    std::string scenario = \"larger\";\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::LARGER;\n    double duration = 10;\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-cbr-stats\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s)\", interval);\n    cmd.AddValue(\"duration\", \"Simulation duration (in seconds)\", duration);\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full\", scenario);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    // Set tag, if output path is not explicitly defined\n    simulationHelper->SetOutputTag(scenario);\n    simulationHelper->SetSimulationTime(duration);\n\n    // enable info logs\n    // LogComponentEnable (\"CbrApplication\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"sat-cbr-stats-example\", LOG_LEVEL_INFO);\n\n    // remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n    Ptr<SatHelper> helper = simulationHelper->CreateSatScenario(satScenario);\n\n    // get users\n    // NodeContainer utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes();\n    NodeContainer gwUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n\n    // uint16_t port = 9;\n    // const std::string protocol = \"ns3::UdpSocketFactory\";\n\n    // setup CBR traffic\n    Config::SetDefault(\"ns3::CbrApplication::Interval\", StringValue(interval));\n    Config::SetDefault(\"ns3::CbrApplication::PacketSize\", UintegerValue(packetSize));\n\n    for (uint32_t i = 0; i < gwUsers.GetN(); i++)\n    {\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::FWD_LINK,\n            SatTrafficHelper::UDP,\n            Time(interval),\n            packetSize,\n            Singleton<SatTopology>::Get()->GetGwUserNode(i),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(0.1),\n            Seconds(duration),\n            Seconds(0.001));\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            Time(interval),\n            packetSize,\n            Singleton<SatTopology>::Get()->GetGwUserNode(i),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(0.1),\n            Seconds(duration),\n            Seconds(0.001));\n    }\n\n    simulationHelper->EnableProgressLogs();\n\n    /*for (NodeContainer::Iterator itGw = gwUsers.Begin ();\n         itGw != gwUsers.End (); ++itGw)\n      {\n        const InetSocketAddress gwAddr\n          = InetSocketAddress (helper->GetUserAddress (*itGw), port);\n\n        for (NodeContainer::Iterator itUt = utUsers.Begin ();\n             itUt != utUsers.End (); ++itUt)\n          {\n            const InetSocketAddress utAddr\n              = InetSocketAddress (helper->GetUserAddress (*itUt), port);\n\n            // forward link\n            Ptr<CbrApplication> fwdApp = CreateObject<CbrApplication> ();\n            fwdApp->SetAttribute (\"Protocol\", StringValue (protocol));\n            fwdApp->SetAttribute (\"Remote\", AddressValue (utAddr));\n            fwdApp->SetAttribute (\"Interval\", StringValue (interval));\n            fwdApp->SetAttribute (\"PacketSize\", UintegerValue (packetSize));\n            (*itGw)->AddApplication (fwdApp);\n\n            // return link\n            Ptr<CbrApplication> rtnApp = CreateObject<CbrApplication> ();\n            rtnApp->SetAttribute (\"Protocol\", StringValue (protocol));\n            rtnApp->SetAttribute (\"Remote\", AddressValue (gwAddr));\n            rtnApp->SetAttribute (\"Interval\", StringValue (interval));\n            rtnApp->SetAttribute (\"PacketSize\", UintegerValue (packetSize));\n            (*itUt)->AddApplication (rtnApp);\n          }\n      }\n\n    // setup packet sinks at all users\n    NodeContainer allUsers (gwUsers, utUsers);\n    for (NodeContainer::Iterator it = allUsers.Begin ();\n         it != allUsers.End (); ++it)\n      {\n        const InetSocketAddress addr = InetSocketAddress (helper->GetUserAddress (*it),\n                                                          port);\n        Ptr<PacketSink> ps = CreateObject<PacketSink> ();\n        ps->SetAttribute (\"Protocol\", StringValue (protocol));\n        ps->SetAttribute (\"Local\", AddressValue (addr));\n        (*it)->AddApplication (ps);\n      }*/\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    /*\n     * The following is the statements for enabling *all* the satellite\n     * statistics.\n     */\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (FwdAppDelay)\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (PerUtUserFwdAppDelay)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (FwdAppDelay)\n    //  s->AddAverageUtUserFwdAppDelay (SatStatsHelper::OUTPUT_HISTOGRAM_FILE);\n    //  s->AddAverageUtUserFwdAppDelay (SatStatsHelper::OUTPUT_PDF_FILE);\n    //  s->AddAverageUtUserFwdAppDelay (SatStatsHelper::OUTPUT_CDF_FILE);\n    //  s->AddAverageUtUserFwdAppDelay (SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);\n    //  s->AddAverageUtUserFwdAppDelay (SatStatsHelper::OUTPUT_PDF_PLOT);\n    //  s->AddAverageUtUserFwdAppDelay (SatStatsHelper::OUTPUT_CDF_PLOT);\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (FwdDevDelay)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (FwdDevDelay)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (FwdMacDelay)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (FwdMacDelay)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (FwdPhyDelay)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (FwdPhyDelay)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (FwdQueueBytes)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (FwdQueuePackets)\n    //  CALL_SAT_STATS_BASIC_SET (FwdSignallingLoad)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (FwdCompositeSinr)\n    //  CALL_SAT_STATS_BASIC_SET (FwdAppThroughput)\n    //  CALL_SAT_STATS_BASIC_ELEMENT (PerUtUserFwdAppThroughput)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (FwdAppThroughput)\n    //  s->AddAverageUtUserFwdAppThroughput (SatStatsHelper::OUTPUT_HISTOGRAM_FILE);\n    //  s->AddAverageUtUserFwdAppThroughput (SatStatsHelper::OUTPUT_PDF_FILE);\n    //  s->AddAverageUtUserFwdAppThroughput (SatStatsHelper::OUTPUT_CDF_FILE);\n    //  s->AddAverageUtUserFwdAppThroughput (SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);\n    //  s->AddAverageUtUserFwdAppThroughput (SatStatsHelper::OUTPUT_PDF_PLOT);\n    //  s->AddAverageUtUserFwdAppThroughput (SatStatsHelper::OUTPUT_CDF_PLOT);\n    //  CALL_SAT_STATS_BASIC_SET (FwdUserDevThroughput)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (FwdUserDevThroughput)\n    //  CALL_SAT_STATS_BASIC_SET (FwdUserMacThroughput)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (FwdUserMacThroughput)\n    //  CALL_SAT_STATS_BASIC_SET (FwdPhyThroughput)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (FwdPhyThroughput)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (RtnAppDelay)\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (PerUtUserRtnAppDelay)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (RtnAppDelay)\n    //  s->AddAverageUtUserRtnAppDelay (SatStatsHelper::OUTPUT_HISTOGRAM_FILE);\n    //  s->AddAverageUtUserRtnAppDelay (SatStatsHelper::OUTPUT_PDF_FILE);\n    //  s->AddAverageUtUserRtnAppDelay (SatStatsHelper::OUTPUT_CDF_FILE);\n    //  s->AddAverageUtUserRtnAppDelay (SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);\n    //  s->AddAverageUtUserRtnAppDelay (SatStatsHelper::OUTPUT_PDF_PLOT);\n    //  s->AddAverageUtUserRtnAppDelay (SatStatsHelper::OUTPUT_CDF_PLOT);\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (RtnDevDelay)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (RtnDevDelay)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (RtnMacDelay)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (RtnMacDelay)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (RtnPhyDelay)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (RtnPhyDelay)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (RtnQueueBytes)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (RtnQueuePackets)\n    //  CALL_SAT_STATS_BASIC_SET (RtnSignallingLoad)\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (RtnCompositeSinr)\n    //  CALL_SAT_STATS_BASIC_SET (RtnAppThroughput)\n    //  CALL_SAT_STATS_BASIC_ELEMENT (PerUtUserRtnAppThroughput)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (RtnAppThroughput)\n    //  s->AddAverageUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_HISTOGRAM_FILE);\n    //  s->AddAverageUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_PDF_FILE);\n    //  s->AddAverageUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_CDF_FILE);\n    //  s->AddAverageUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);\n    //  s->AddAverageUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_PDF_PLOT);\n    //  s->AddAverageUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_CDF_PLOT);\n    //  CALL_SAT_STATS_BASIC_SET (RtnFeederDevThroughput)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (RtnFeederDevThroughput)\n    //  CALL_SAT_STATS_BASIC_SET (RtnFeederMacThroughput)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (RtnFeederMacThroughput)\n    //  CALL_SAT_STATS_BASIC_SET (RtnPhyThroughput)\n    //  CALL_SAT_STATS_AVERAGED_DISTRIBUTION_SET (RtnPhyThroughput)\n    //  CALL_SAT_STATS_BASIC_SET (FwdDaPacketError)\n    //  CALL_SAT_STATS_BASIC_SET (RtnDaPacketError)\n    //  CALL_SAT_STATS_BASIC_SET (SlottedAlohaPacketError)\n    //  CALL_SAT_STATS_BASIC_SET (SlottedAlohaPacketCollision)\n    //  CALL_SAT_STATS_BASIC_SET (CrdsaPacketError)\n    //  CALL_SAT_STATS_BASIC_SET (CrdsaPacketCollision)\n    //  s->AddPerUtCapacityRequest (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    //  s->AddPerBeamCapacityRequest (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    //  s->AddPerGwCapacityRequest (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    //  s->AddGlobalCapacityRequest (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    //  CALL_SAT_STATS_DISTRIBUTION_SET (ResourcesGranted)\n    //  s->AddPerBeamBackloggedRequest (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    //  s->AddPerGwBackloggedRequest (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    //  s->AddGlobalBackloggedRequest (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    //  s->AddPerBeamFrameSymbolLoad (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    //  s->AddPerGwFrameSymbolLoad (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    //  s->AddGlobalFrameSymbolLoad (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    //  s->AddPerBeamFrameUserLoad (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    //  s->AddPerGwFrameUserLoad (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    //  s->AddGlobalFrameUserLoad (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    //  s->AddPerBeamWaveformUsage (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    //  s->AddPerGwWaveformUsage (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    //  s->AddGlobalWaveformUsage (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (GlobalFwdFeederLinkSinr);\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (GlobalFwdUserLinkSinr);\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (GlobalRtnFeederLinkSinr);\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (GlobalRtnUserLinkSinr);\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (GlobalFwdFeederLinkRxPower);\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (GlobalFwdUserLinkRxPower);\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (GlobalRtnFeederLinkRxPower);\n    //  CALL_SAT_STATS_DISTRIBUTION_ELEMENT (GlobalRtnUserLinkRxPower);\n\n    /*\n     * The following is the statements for enabling some satellite statistics\n     * for testing purpose.\n     */\n    s->AddPerUtUserFwdAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);\n    s->AddPerBeamFwdDevDelay(SatStatsHelper::OUTPUT_PDF_PLOT);\n    s->AddPerGwRtnDevDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddGlobalFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_HISTOGRAM_FILE);\n    s->AddPerBeamFwdPhyDelay(SatStatsHelper::OUTPUT_PDF_FILE);\n    s->AddPerGwRtnPhyDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n\n    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddAverageUtFwdUserDevThroughput(SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);\n    s->AddAverageBeamRtnFeederDevThroughput(SatStatsHelper::OUTPUT_PDF_PLOT);\n    s->AddPerGwFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserPhyThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddAverageBeamRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerGwFwdQueueBytes(SatStatsHelper::OUTPUT_HISTOGRAM_FILE);\n    s->AddGlobalRtnQueuePackets(SatStatsHelper::OUTPUT_PDF_FILE);\n    s->AddPerUtFwdCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalFwdFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdUserLinkSinr(SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);\n    s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_PDF_PLOT);\n    s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddGlobalFwdFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddGlobalFwdUserLinkRxPower(SatStatsHelper::OUTPUT_HISTOGRAM_FILE);\n    s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_PDF_FILE);\n    s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_CDF_FILE);\n\n    s->AddPerGwFwdSignallingLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnSignallingLoad(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddPerUtCapacityRequest(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_HISTOGRAM_PLOT);\n    s->AddPerGwBackloggedRequest(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalFrameSymbolLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFrameUserLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerGwWaveformUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddGlobalFwdAppJitter(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdAppJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdAppJitter(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtFwdAppJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalRtnAppJitter(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnAppJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnAppJitter(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtRtnAppJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    NS_LOG_INFO(\"--- Cbr-stats-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-cbr-user-defined-example.cc",
      "code": "/* -*-  Mode: C++; c-file-style: \"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-cbr-user-defined-example.cc\n * \\ingroup satellite\n *\n * \\brief  Another example of CBR application usage in satellite network.\n *         The scripts is using user defined scenario, which means that user\n *         can change the scenario size quite to be whatever between 1 and\n *         full scenario (72 beams). Currently it is configured to using only\n *         one beam. CBR application is sending packets in RTN link, i.e. from UT\n *         side to GW side. Packet trace is enabled by default.\n *         End user may change the number of UTs and end users from\n *         the command line.\n *\n *         execute command -> ./waf --run \"sat-cbr-user-defined-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-cbr-user-defined-example\");\n\n// callback called when packet is received by phy RX carrier\nstatic void\nCrTraceCb(Time now, Mac48Address addr, Ptr<SatCrMessage> crMsg)\n{\n    NS_LOG_INFO(\"General info: \" << addr << \" \" << crMsg->GetNumCapacityRequestElements() << \" \"\n                                 << crMsg->GetSizeInBytes() << \" \" << crMsg->GetCnoEstimate());\n\n    SatCrMessage::RequestContainer_t c = crMsg->GetCapacityRequestContent();\n    for (SatCrMessage::RequestContainer_t::const_iterator it = c.begin(); it != c.end(); ++it)\n    {\n        NS_LOG_INFO(\"CR component: \" << (uint32_t)(it->first.first) << \" \" << it->first.second\n                                     << \" \" << it->second);\n    }\n}\n\nint\nmain(int argc, char* argv[])\n{\n    // enable info logs\n    // LogComponentEnable (\"CbrApplication\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"PacketSink\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"sat-cbr-user-defined-example\", LOG_LEVEL_INFO);\n\n    uint32_t beamId = 1;\n    uint32_t endUsersPerUt(3);\n    uint32_t utsPerBeam(3);\n    uint32_t packetSize(128);\n    Time interval(Seconds(1.0));\n    Time simLength(Seconds(20.0));\n    Time appStartTime = Seconds(0.1);\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"example-cbr-user-defined\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // dama-input-attributes.xml\n    // tn8-profiling-input-attributes.xml\n    // tn9-dama-input-attributes.xml\n    // tn9-ra-input-attributes.xml\n    // training-input-attributes.xml\n\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n\n    // Set beam ID\n    std::stringstream beamsEnabled;\n    beamsEnabled << beamId;\n    simulationHelper->SetBeams(beamsEnabled.str());\n\n    // Configure error model\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_NONE);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n    // Config::SetDefault (\"ns3::SatUtMac::CrUpdatePeriod\", TimeValue(Seconds(10.0)));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Create reference system\n    simulationHelper->CreateSatScenario();\n\n    Config::ConnectWithoutContext(\"/NodeList/*/DeviceList/*/SatLlc/SatRequestManager/CrTrace\",\n                                  MakeCallback(&CrTraceCb));\n\n    // >>> Start of actual test using Full scenario >>>\n\n    // setup CBR traffic\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength,\n        Seconds(0.05));\n\n    NS_LOG_INFO(\"--- sat-cbr-user-defined-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-constellation-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-constellation-example.cc\n * \\ingroup satellite\n *\n * \\brief This file gives an example of satellite constellations.\n *        User must choose which constellation to simulate from all available in\n *        satellite/data/scenarios.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-constellation-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t packetSize = 512;\n    std::string interval = \"20ms\";\n    std::string scenarioFolder = \"constellation-eutelsat-geo-2-sats-isls\";\n\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"example-constellation\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds (e.g. (1s))\", interval);\n    cmd.AddValue(\"scenarioFolder\",\n                 \"Scenario folder (e.g. constellation-eutelsat-geo-2-sats-isls)\",\n                 scenarioFolder);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatOrbiterFeederPhy::QueueSize\", UintegerValue(100000));\n    Config::SetDefault(\"ns3::SatOrbiterUserPhy::QueueSize\", UintegerValue(100000));\n\n    /// Use constellation\n    Config::SetDefault(\"ns3::PointToPointIslHelper::IslDataRate\",\n                       DataRateValue(DataRate(\"100Mb/s\")));\n    Config::SetDefault(\"ns3::SatSGP4MobilityModel::UpdatePositionEachRequest\", BooleanValue(false));\n    Config::SetDefault(\"ns3::SatSGP4MobilityModel::UpdatePositionPeriod\", TimeValue(Seconds(1)));\n    Config::SetDefault(\"ns3::SatHelper::GwUsers\", UintegerValue(3));\n    Config::SetDefault(\"ns3::SatGwMac::SendNcrBroadcast\", BooleanValue(false));\n\n    /// When using 72 beams, we need a 72*nbSats network addresses for beams, so we take margin\n    Config::SetDefault(\"ns3::SatHelper::BeamNetworkAddress\", Ipv4AddressValue(\"20.1.0.0\"));\n    Config::SetDefault(\"ns3::SatHelper::GwNetworkAddress\", Ipv4AddressValue(\"10.1.0.0\"));\n    Config::SetDefault(\"ns3::SatHelper::UtNetworkAddress\", Ipv4AddressValue(\"250.1.0.0\"));\n\n    /// Enable ACM\n    Config::SetDefault(\"ns3::SatBbFrameConf::AcmEnabled\", BooleanValue(true));\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    simulationHelper->LoadScenario(scenarioFolder);\n\n    simulationHelper->SetSimulationTime(Seconds(30));\n\n    std::set<uint32_t> beamSetAll = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,\n                                     16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                                     31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\n                                     46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n                                     61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72};\n\n    std::set<uint32_t> beamSet = {43, 30};\n\n    std::set<uint32_t> beamSetTelesat = {1, 43, 60, 64};\n\n    // Set beam ID\n    if (scenarioFolder == \"constellation-telesat-351-sats\")\n    {\n        simulationHelper->SetBeamSet(beamSetTelesat);\n    }\n    else\n    {\n        simulationHelper->SetBeamSet(beamSet);\n    }\n    simulationHelper->SetUserCountPerUt(2);\n\n    LogComponentEnable(\"sat-constellation-example\", LOG_LEVEL_INFO);\n\n    simulationHelper->CreateSatScenario();\n\n    Singleton<SatTopology>::Get()->PrintTopology(std::cout);\n    Singleton<SatIdMapper>::Get()->ShowIslMap();\n\n    Config::SetDefault(\"ns3::CbrApplication::Interval\", StringValue(interval));\n    Config::SetDefault(\"ns3::CbrApplication::PacketSize\", UintegerValue(packetSize));\n\n    Time startTime = Seconds(1.0);\n    Time stopTime = Seconds(29.0);\n    Time startDelay = Seconds(0.0);\n\n    NodeContainer gws = Singleton<SatTopology>::Get()->GetGwNodes();\n    NodeContainer uts = Singleton<SatTopology>::Get()->GetUtNodes();\n    NodeContainer gwUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n    NodeContainer utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes(uts);\n\n    // Total is 3*6 = 18 flows\n    // Global App rate is pktSize*ptkPerSecond*nbFlows = 512*8*50*18 = 3686kb/s on both FWD and RTN\n    Ptr<SatTrafficHelper> trafficHelper = simulationHelper->GetTrafficHelper();\n\n    trafficHelper->AddCbrTraffic(SatTrafficHelper::FWD_LINK,\n                                 SatTrafficHelper::UDP,\n                                 Time(interval),\n                                 packetSize,\n                                 gwUsers,\n                                 utUsers,\n                                 startTime,\n                                 stopTime,\n                                 startDelay);\n\n    trafficHelper->AddCbrTraffic(SatTrafficHelper::RTN_LINK,\n                                 SatTrafficHelper::UDP,\n                                 Time(interval),\n                                 packetSize,\n                                 gwUsers,\n                                 utUsers,\n                                 startTime,\n                                 stopTime,\n                                 startDelay);\n\n    NS_LOG_INFO(\"--- sat-constellation-example ---\");\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    // To store attributes to file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    // Throughput statistics\n    s->AddPerUtFwdFeederPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerGwFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerGwRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Delay statistics\n    s->AddPerUtFwdPhyDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdDevDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnPhyDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnDevDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // link delay statistics\n    s->AddPerUtFwdFeederPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Jitter statistics\n    s->AddPerUtFwdPhyJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdMacJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdDevJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnPhyJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnMacJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnDevJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Link jitter statistics\n    s->AddPerUtFwdFeederPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Phy RX statistics\n    s->AddPerUtFwdFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Other statistics\n    s->AddPerUtFwdFeederLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerGwRtnFeederQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatRtnFeederQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatRtnFeederQueuePackets(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerGwFwdUserQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFwdUserQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFwdUserQueuePackets(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // ISL drop rate statistics\n    s->AddGlobalPacketDropRate(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerIslPacketDropRate(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-dama-http-sim-tn9.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Budiarto Herman <budiarto.herman@magister.fi>\n *\n */\n\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-dama-http-sim-tn9.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results with HTTP traffic\n * model. Currently only one beam is simulated with one user and\n * and DAMA configuration.\n *\n * execute command -> ./waf --run \"sat-dama-http-sim-tn9 --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-dama-http-sim-tn9\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Spot-beam over Finland\n    uint32_t beamId = 18;\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(1);\n    uint32_t crTxConf(0);\n\n    double simLength(300.0); // in seconds\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"example-dama-http-sim-tn9\");\n\n    // To read attributes from file\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/tn9-dama-input-attributes.xml\";\n\n    /**\n     * Attributes:\n     * -----------\n     *\n     * Scenario:\n     *   - 1 beam (beam id = 18)\n     *   - 1 UT\n     *\n     * Frame configuration (configured in tn9-dama-input-attributes.xml):\n     *   - 4 frames (13.75 MHz user bandwidth)\n     *     - 8 x 0.3125 MHz -> 2.5 MHz\n     *     - 8 x 0.625 MHz  -> 5 MHz\n     *     - 4 x 1.25 MHz   -> 5 MHz\n     *     - 1 x 1.25 MHz   -> 1.25 MHz\n     *\n     * NCC configuration mode:\n     *   - Conf-2 scheduling mode (dynamic time slots)\n     *   - FCA disabled\n     *\n     * CR transmission modes (selected from command line argument):\n     *   - RBDC + periodical control slots\n     *   - RBDC + slotted ALOHA\n     *   - RBDC + CDRSA (loose RC 0)\n     *\n     * RTN link\n     *   - Constant interference\n     *   - AVI error model\n     *   - ARQ disabled\n     * FWD link\n     *   - ACM disabled\n     *   - Constant interference\n     *   - No error model\n     *   - ARQ disabled\n     *\n     */\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"crTxConf\", \"CR transmission configuration\", crTxConf);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(inputFileNameWithPath));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    ConfigStore inputConfig;\n    inputConfig.ConfigureDefaults();\n\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n\n    // Set beam ID\n    std::stringstream beamsEnabled;\n    beamsEnabled << beamId;\n    simulationHelper->SetBeams(beamsEnabled.str());\n\n    // NCC configuration\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\", StringValue(\"ConfigType_2\"));\n    Config::SetDefault(\"ns3::SatWaveformConf::AcmEnabled\", BooleanValue(true));\n\n    // RBDC\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_MinimumServiceRate\",\n                       UintegerValue(16));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    switch (crTxConf)\n    {\n    // Periodical control slots\n    case 0: {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_OFF));\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(true));\n        break;\n    }\n    // Slotted ALOHA\n    case 1: {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_SLOTTED_ALOHA));\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n        break;\n    }\n    // CRDSA (loose RC 0)\n    case 2: {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_CRDSA));\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n        Config::SetDefault(\"ns3::SatUtHelper::UseCrdsaOnlyForControlPackets\", BooleanValue(false));\n        break;\n    }\n    default: {\n        NS_FATAL_ERROR(\"Unsupported crTxConf: \" << crTxConf);\n        break;\n    }\n    }\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario();\n\n    /**\n     * Set-up HTTP traffic\n     */\n    simulationHelper->GetTrafficHelper()->AddHttpTraffic(\n        SatTrafficHelper::FWD_LINK,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        MilliSeconds(3),\n        Seconds(simLength),\n        Seconds(0));\n\n    /**\n     * Set-up statistics\n     */\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerBeamRtnDevDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnDevDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerBeamRtnPhyDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnPhyDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddPerBeamFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFwdUserDevThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFwdUserPhyThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerBeamFwdAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamFwdAppDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerBeamFwdDevDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamFwdDevDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerBeamFwdPhyDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamFwdPhyDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamRtnFeederDaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFrameSymbolLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamWaveformUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamCapacityRequest(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n\n    s->AddPerBeamFeederCrdsaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederCrdsaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederSlottedAlohaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederSlottedAlohaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    NS_LOG_INFO(\"--- sat-dama-http-sim-tn9 ---\");\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n    // std::stringstream filename;\n    // filename << \"tn9-dama-onoff-output-attributes-ut\" << utsPerBeam\n    //         << \"-conf\" << crTxConf << \".xml\";\n    //\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (filename.str ()));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-dama-onoff-sim-tn9.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Budiarto Herman <budiarto.herman@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-dama-onoff-sim-tn9.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results related to\n * satellite RTN link performance.\n *\n * execute command -> ./waf --run \"sat-dama-onoff-sim-tn9 --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-dama-onoff-sim-tn9\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Spot-beam over Finland\n    uint32_t beamId = 18;\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(220);  // 70% system load according to CRA 1 kbps\n    uint32_t packetSize(1280); // in bytes\n    double simLength(300.0);   // in seconds\n    Time appStartTime = Seconds(0.1);\n\n    DataRate dataRate(32000); // in bps\n    uint32_t damaConf(0);\n    uint32_t crTxConf(0);\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"example-dama-onoff-sim-tn9\");\n\n    // To read attributes from file\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/tn9-dama-input-attributes.xml\";\n\n    /**\n     * Attributes:\n     * -----------\n     *\n     * Scenario:\n     *   - 1 beam (beam id = 18)\n     *   - 70% system load\n     *\n     * Frame configuration (configured in tn9-dama-input-attributes.xml):\n     *   - 4 frames (13.75 MHz user bandwidth)\n     *     - 8 x 0.3125 MHz -> 2.5 MHz\n     *     - 8 x 0.625 MHz  -> 5 MHz\n     *     - 4 x 1.25 MHz   -> 5 MHz\n     *     - 1 x 1.25 MHz   -> 1.25 MHz\n     *\n     * DAMA configuration mode (selected from command line argument):\n     *   - RBDC\n     *   - VBDC\n     *\n     * NCC configuration mode:\n     *   - Conf-2 scheduling mode (dynamic time slots)\n     *   - FCA disabled\n     *\n     * CR transmission modes (selected from command line argument):\n     *   - RA slotted ALOHA\n     *   - CDRSA (strict RC 0)\n     *   - Periodical control slots\n     *   - CRA 1kbps\n     *\n     * Fading configuration:\n     *   - Rain\n     *   - Markov fading disabled\n     *\n     * RTN link\n     *   - Constant interference\n     *   - AVI error model\n     *   - ARQ disabled\n     * FWD link\n     *   - ACM disabled\n     *   - Constant interference\n     *   - No error model\n     *   - ARQ disabled\n     *\n     */\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"damaConf\", \"DAMA configuration\", damaConf);\n    cmd.AddValue(\"crTxConf\", \"CR transmission configuration\", crTxConf);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetDefaultValues();\n\n    // Set default attribute values from XML file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(inputFileNameWithPath));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    ConfigStore inputConfig;\n    inputConfig.ConfigureDefaults();\n\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    // Set beam ID\n    simulationHelper->SetBeamSet({beamId});\n    simulationHelper->SetSimulationTime(simLength);\n\n    // NCC configuration\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\", StringValue(\"ConfigType_2\"));\n    Config::SetDefault(\"ns3::SatWaveformConf::AcmEnabled\", BooleanValue(true));\n\n    // Rain fading\n    // Note, that the positions of the fading files do not necessarily match with the\n    // beam location, since this example is not using list position allocator!\n    Config::SetDefault(\"ns3::SatChannel::EnableExternalFadingInputTrace\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtFwdDownIndexFileName\",\n                       StringValue(\"BeamId-1_256_UT_fading_fwddwn_trace_index.txt\"));\n    Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtRtnUpIndexFileName\",\n                       StringValue(\"BeamId-1_256_UT_fading_rtnup_trace_index.txt\"));\n\n    // Disable Markov fading\n    Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_OFF));\n\n    switch (damaConf)\n    {\n    // RBDC\n    case 0: {\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(true));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_MinimumServiceRate\",\n                           UintegerValue(16));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(false));\n        break;\n    }\n    // VBDC\n    case 1: {\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(true));\n        break;\n    }\n    default: {\n        NS_FATAL_ERROR(\"Unsupported damaConf: \" << damaConf);\n        break;\n    }\n    }\n\n    switch (crTxConf)\n    {\n    // RA slotted ALOHA\n    case 0: {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_SLOTTED_ALOHA));\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n        break;\n    }\n    // CRDSA (strict RC 0)\n    case 1: {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_CRDSA));\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n        Config::SetDefault(\"ns3::SatUtHelper::UseCrdsaOnlyForControlPackets\", BooleanValue(true));\n        break;\n    }\n    // Periodical control slots\n    case 2: {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_OFF));\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(true));\n        break;\n    }\n    // CRA 1 kbps\n    case 3: {\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(true));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantServiceRate\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=1]\"));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                           BooleanValue(false));\n\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_OFF));\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n        break;\n    }\n    default: {\n        NS_FATAL_ERROR(\"Unsupported crTxConf: \" << crTxConf);\n        break;\n    }\n    }\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario();\n\n    /**\n     * Set-up on-off traffic\n     */\n    simulationHelper->GetTrafficHelper()->AddOnOffTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        dataRate,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        \"ns3::ExponentialRandomVariable[Mean=1.0|Bound=0.0]\",\n        \"ns3::ExponentialRandomVariable[Mean=1.0|Bound=0.0]\",\n        appStartTime,\n        Seconds(simLength),\n        MilliSeconds(50));\n\n    /**\n     * Set-up statistics\n     */\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamRtnFeederDaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFrameSymbolLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamWaveformUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamCapacityRequest(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n\n    s->AddPerBeamFeederCrdsaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederCrdsaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederSlottedAlohaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederSlottedAlohaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    NS_LOG_INFO(\"--- sat-dama-onoff-sim-tn9 ---\");\n    NS_LOG_INFO(\"  Packet size: \" << packetSize);\n    NS_LOG_INFO(\"  Offered data rate: \" << dataRate);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n\n    // std::stringstream filename;\n    // filename << \"tn9-dama-onoff-output-attributes-ut\" << utsPerBeam\n    //          << \"-conf\" << crTxConf << \".xml\";\n    //\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (filename.str ()));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-dama-sim-tn9.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-dama-sim-tn9.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results related to\n * satellite RTN link performance.\n *\n * execute command -> ./waf --run \"sat-dama-sim-tn9 --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-dama-sim-tn9\");\n\nint\nmain(int argc, char* argv[])\n{\n    // LogComponentEnable (\"sat-dama-sim-tn9\", LOG_LEVEL_INFO);\n\n    // Spot-beam over Finland\n    uint32_t beamId = 18;\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(220); // 80% system load according to NCC-2\n    uint32_t nccConf(0);\n    uint32_t fadingConf(0);\n\n    // 16 kbps per end user\n    uint32_t packetSize(1280); // in bytes\n    double intervalSeconds = 0.64;\n\n    double simLength(300.0); // in seconds\n    Time appStartTime = Seconds(0.1);\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-dama-sim-tn9\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/tn9-dama-input-attributes.xml\";\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"nccConf\", \"NCC configuration\", nccConf);\n    cmd.AddValue(\"fadingConf\", \"Fading configuration (0: Markov, 1: Rain)\", fadingConf);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n\n    // To read attributes from file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(inputFileNameWithPath));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    ConfigStore inputConfig;\n    inputConfig.ConfigureDefaults();\n\n    /**\n     * Attributes:\n     * -----------\n     *\n     * Scenario:\n     *   - 1 beam (beam id = 18)\n     *   - 80% system load\n     *\n     * Frame configuration (configured in tn9-dama-input-attributes.xml):\n     *   - 4 frames (13.75 MHz user bandwidth)\n     *     - 8 x 0.3125 MHz -> 2.5 MHz\n     *     - 8 x 0.625 MHz  -> 5 MHz\n     *     - 4 x 1.25 MHz   -> 5 MHz\n     *     - 1 x 1.25 MHz   -> 1.25 MHz\n     *\n     * NCC configuration modes (selected from command line argument):\n     *   - Conf-0 (static timeslots with ACM off)\n     *   - Conf-1 (static timeslots with ACM on)\n     *   - Conf-2 scheduling mode (dynamic time slots)\n     *   - FCA disabled\n     *\n     * Fading configuration (selected from command line argument):\n     *   - Markov\n     *   - Rain\n     *\n     * RTN link\n     *   - Constant interference\n     *   - AVI error model\n     *   - ARQ disabled\n     *   - RBDC with periodical control slots\n     * FWD link\n     *   - ACM disabled\n     *   - Constant interference\n     *   - No error model\n     *   - ARQ disabled\n     *\n     */\n\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetBeamSet({beamId});\n\n    // RBDC + periodical control slots\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_MinimumServiceRate\",\n                       UintegerValue(16));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(true));\n\n    switch (nccConf)\n    {\n    case 0: {\n        Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\", StringValue(\"ConfigType_0\"));\n        Config::SetDefault(\"ns3::SatWaveformConf::AcmEnabled\", BooleanValue(false));\n        break;\n    }\n    case 1: {\n        Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\", StringValue(\"ConfigType_1\"));\n        Config::SetDefault(\"ns3::SatWaveformConf::AcmEnabled\", BooleanValue(true));\n        break;\n    }\n    case 2: {\n        Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\", StringValue(\"ConfigType_2\"));\n        Config::SetDefault(\"ns3::SatWaveformConf::AcmEnabled\", BooleanValue(true));\n        break;\n    }\n    default: {\n        NS_FATAL_ERROR(\"Unsupported nccConf: \" << nccConf);\n        break;\n    }\n    }\n\n    switch (fadingConf)\n    {\n    case 0: {\n        // Markov fading\n        Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_MARKOV));\n        break;\n    }\n    case 1: {\n        // Rain fading\n        Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_OFF));\n\n        // Note, that the positions of the fading files do not necessarily match with the\n        // beam location, since this example is not using list position allocator!\n        Config::SetDefault(\"ns3::SatChannel::EnableExternalFadingInputTrace\", BooleanValue(true));\n        Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtFwdDownIndexFileName\",\n                           StringValue(\"BeamId-1_256_UT_fading_fwddwn_trace_index.txt\"));\n        Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtRtnUpIndexFileName\",\n                           StringValue(\"BeamId-1_256_UT_fading_rtnup_trace_index.txt\"));\n\n        break;\n    }\n    default: {\n        NS_FATAL_ERROR(\"Unsupported fadingConf: \" << fadingConf);\n        break;\n    }\n    }\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario();\n\n    // setup CBR traffic\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Seconds(intervalSeconds),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        Seconds(simLength),\n        MilliSeconds(50));\n\n    /**\n     * Set-up statistics\n     */\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n\n    s->AddPerBeamRtnFeederDaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFrameSymbolLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamWaveformUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamCapacityRequest(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n\n    NS_LOG_INFO(\"--- sat-dama-sim-tn9 ---\");\n    NS_LOG_INFO(\"  Packet size: \" << packetSize);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n    // std::stringstream filename;\n    // filename << \"tn9-dama-output-attributes-ut\" << utsPerBeam\n    //          << \"-ncc\" << nccConf\n    //          << \"-fading\" << fadingConf << \".xml\";\n    //\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (filename.str ()));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-dama-verification-sim.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-dama-verification-sim.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results related to\n * satellite RTN link performance.\n *\n * execute command -> ./waf --run \"sat-dama-verification-sim --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-dama-verification-sim\");\n\nint\nmain(int argc, char* argv[])\n{\n    // LogComponentEnable (\"sat-dama-verification-sim\", LOG_LEVEL_INFO);\n\n    // Spot-beam over Finland\n    uint32_t beamId = 18;\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(220);\n\n    // CBR\n    uint32_t packetSize(1280); // in bytes\n    double intervalSeconds = 0.005;\n\n    double simLength(50.0); // in seconds\n    Time appStartTime = Seconds(0.1);\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-dama-verification-sim\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    // Find the input xml file in case example is run from other than ns-3 root directory\n    std::string pathToFile = Singleton<SatEnvVariables>::Get()->LocateFile(\n        \"contrib/satellite/examples/tn9-dama-input-attributes.xml\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"packetSize\", \"Packet size in bytes\", packetSize);\n    simulationHelper->AddDefaultUiArguments(cmd, pathToFile);\n    cmd.Parse(argc, argv);\n\n    // To read attributes from file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(pathToFile));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    ConfigStore inputConfig;\n    inputConfig.ConfigureDefaults();\n\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetBeamSet({beamId});\n\n    // 5 ms -> 200 packets per second\n    // 250 B -> 400 kbps\n    // 500 B -> 800 kbps\n    // 750 B -> 1200 kbps\n    // 1000 B -> 1600 kbps\n    // 1250 B -> 2000 kbps\n\n    // RBDC + periodical control slots\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_MinimumServiceRate\",\n                       UintegerValue(10));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotInterval\", TimeValue(Seconds(1)));\n\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\", StringValue(\"ConfigType_2\"));\n    Config::SetDefault(\"ns3::SatWaveformConf::AcmEnabled\", BooleanValue(true));\n\n    Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_OFF));\n\n    /**\n     * Carriers:\n     * 80 x 312.5 kHz\n     * 80 x 625 kHz\n     * 40 x 1.25 MHz\n     */\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameCount\", UintegerValue(3));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_AllocatedBandwidthHz\",\n                       DoubleValue(2.5e+07));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame1_AllocatedBandwidthHz\", DoubleValue(5e+07));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame2_AllocatedBandwidthHz\", DoubleValue(5e+07));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario();\n\n    /**\n     * Set-up CBR traffic\n     */\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Seconds(intervalSeconds),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        Seconds(simLength),\n        MilliSeconds(50));\n    /**\n     * Set-up statistics\n     */\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalRtnAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddGlobalRtnFeederDaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFrameSymbolLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalWaveformUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    NS_LOG_INFO(\"--- sat-dama-verification-sim ---\");\n    NS_LOG_INFO(\"  Packet size: \" << packetSize);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n    // std::stringstream filename;\n    // filename << \"tn9-dama-output-attributes-ut\" << utsPerBeam\n    //          << \"-packetSize\" << packetSize\n    //          << \".xml\";\n    //\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (filename.str ()));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-dynamic-frequency-plan-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2018 CNES\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Mathias Ettinger <mettinger@toulouse.viveris.fr>\n *\n */\n\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-generic-launcher.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results with\n * a high degree of customization through XML file.\n *\n * execute command -> ./waf --run \"sat-generic-launcher --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-generic-launcher\");\n\nstatic double g_txMaxPower = 5.0;\nstatic bool g_ascending = false;\nstatic Time g_cnoInterval = MilliSeconds(100);\nstatic Time g_simulationTime = Minutes(1);\n\nstatic void\nChangeCno(const std::vector<Ptr<SatUtPhy>>& utsPhysicalLayers)\n{\n    g_txMaxPower += g_ascending ? 0.2 : -0.2;\n    g_ascending = (g_ascending && g_txMaxPower < 30.0) || (!g_ascending && g_txMaxPower < -30.0);\n\n    for (auto& phy : utsPhysicalLayers)\n    {\n        phy->SetAttribute(\"TxMaxPowerDbw\", DoubleValue(g_txMaxPower));\n        phy->Initialize();\n    }\n\n    Simulator::Schedule(g_cnoInterval, &ChangeCno, utsPhysicalLayers);\n}\n\nint\nmain(int argc, char* argv[])\n{\n    bool varyingCno(false);\n    uint32_t maxSubdivisions(0);\n    uint32_t frameConfigType(2);\n    double initialBandwidth(3.75e6);\n    Time superframeDuration(MicroSeconds(26500));\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/generic-input-attributes.xml\";\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"generic-launcher\");\n    simulationHelper->SetDefaultValues();\n\n    CommandLine cmd;\n    cmd.AddValue(\"MaxCarrierSubdivision\",\n                 \"The maximum amount of subdivision for a single carrier\",\n                 maxSubdivisions);\n    cmd.AddValue(\"FrameConfigType\",\n                 \"The frame configuration type used for super frame\",\n                 frameConfigType);\n    cmd.AddValue(\"UseVaryingCno\",\n                 \"Simulate varying C/N0 for UTs instead of changing their traffic overtime\",\n                 varyingCno);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n\n    Config::SetDefault(\"ns3::SimulationHelperConf::BeamsIDs\", StringValue(\"12\"));\n    Config::SetDefault(\"ns3::SimulationHelperConf::UtCountPerBeam\",\n                       StringValue(\"ns3::ConstantRandomVariable[Constant=30]\"));\n    Config::SetDefault(\"ns3::SimulationHelperConf::UserCountPerUt\",\n                       StringValue(\"ns3::ConstantRandomVariable[Constant=1]\"));\n\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameCount\", UintegerValue(1));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\",\n                       StringValue(\"ConfigType_\" + std::to_string(frameConfigType)));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::MaxCarrierSubdivision\",\n                       UintegerValue(maxSubdivisions));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_AllocatedBandwidthHz\",\n                       DoubleValue(initialBandwidth));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_CarrierAllocatedBandwidthHz\",\n                       DoubleValue(initialBandwidth));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_CarrierRollOff\", DoubleValue(0.2));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_CarrierSpacing\", DoubleValue(0.0));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_RandomAccessFrame\", BooleanValue(false));\n\n    Config::SetDefault(\"ns3::SatSuperframeSeq::TargetDuration\", TimeValue(superframeDuration));\n    Config::SetDefault(\"ns3::CbrApplication::Interval\", TimeValue(superframeDuration));\n\n    Config::SetDefault(\"ns3::SatFwdLinkScheduler::CnoEstimationWindow\",\n                       TimeValue(MilliSeconds(500)));\n    Config::SetDefault(\"ns3::SatRequestManager::CnoReportInterval\", TimeValue(g_cnoInterval));\n    Config::SetDefault(\"ns3::SatBeamScheduler::CnoEstimationMode\",\n                       StringValue(\"MinimumValueInWindow\"));\n    Config::SetDefault(\"ns3::SatBeamScheduler::CnoEstimationWindow\", TimeValue(g_cnoInterval));\n\n    Config::SetDefault(\"ns3::SatUtPhy::TxMaxPowerDbw\", DoubleValue(g_txMaxPower));\n    Config::SetDefault(\"ns3::SatOrbiterUserPhy::TxMaxPowerDbw\", DoubleValue(15.0));\n    Config::SetDefault(\"ns3::SatOrbiterFeederPhy::FixedAmplificationGainDb\", DoubleValue(200.0));\n\n    simulationHelper->ReadInputAttributesFromFile(inputFileNameWithPath);\n\n    // Manual configuration of the simulation to avoid creating unnecessary traffic\n    Ptr<SimulationHelperConf> simulationConf = CreateObject<SimulationHelperConf>();\n    g_simulationTime = simulationConf->m_simTime;\n    simulationHelper->SetBeams(simulationConf->m_enabledBeams);\n    simulationHelper->SetUtCountPerBeam(simulationConf->m_utCount);\n    simulationHelper->SetUserCountPerUt(simulationConf->m_utUserCount);\n    simulationHelper->SetUserCountPerMobileUt(simulationConf->m_utMobileUserCount);\n    simulationHelper->SetSimulationTime(g_simulationTime);\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario(SatHelper::NONE, simulationConf->m_mobileUtsFolder);\n    if (simulationConf->m_activateProgressLogging)\n    {\n        simulationHelper->EnableProgressLogs();\n    }\n\n    simulationHelper->StoreAttributesToFile(\"parametersUsed.xml\");\n\n    if (varyingCno)\n    {\n        std::vector<Ptr<SatUtPhy>> utsPhysicalLayers;\n        NodeContainer utNodes = Singleton<SatTopology>::Get()->GetUtNodes();\n        Ptr<Node> node;\n        for (NodeContainer::Iterator it = utNodes.Begin(); it != utNodes.End(); it++)\n        {\n            node = *it;\n            for (uint32_t j = 0; j < node->GetNDevices(); ++j)\n            {\n                Ptr<SatNetDevice> dev = DynamicCast<SatNetDevice>(node->GetDevice(j));\n                if (dev != nullptr)\n                {\n                    Ptr<SatUtPhy> phy = DynamicCast<SatUtPhy>(dev->GetPhy());\n                    if (phy != nullptr)\n                    {\n                        utsPhysicalLayers.push_back(phy);\n                    }\n                }\n            }\n        }\n        Simulator::Schedule(Seconds(0), &ChangeCno, utsPhysicalLayers);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            512,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(0),\n            g_simulationTime,\n            MilliSeconds(50));\n    }\n    else\n    {\n        // Configure our own kind of traffic\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            40,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(0),\n            g_simulationTime,\n            MilliSeconds(50));\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            25600,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(0),\n            Seconds(10),\n            MilliSeconds(50),\n            0.3);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            1000,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(5),\n            Seconds(15),\n            MilliSeconds(50),\n            0.4);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            1000,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(10),\n            Seconds(20),\n            MilliSeconds(50),\n            0.5);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            40000,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(15),\n            Seconds(25),\n            MilliSeconds(50),\n            0.2);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            1,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(20),\n            Seconds(30),\n            MilliSeconds(50),\n            0.7);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            100,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(25),\n            Seconds(35),\n            MilliSeconds(50),\n            0.45);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            3000,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(30),\n            Seconds(40),\n            MilliSeconds(50),\n            0.55);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            40000,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(35),\n            Seconds(45),\n            MilliSeconds(50),\n            0.2);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            30000,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(40),\n            Seconds(50),\n            MilliSeconds(50),\n            0.3);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            1500,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(45),\n            Seconds(55),\n            MilliSeconds(50),\n            0.6);\n\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            superframeDuration,\n            800,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            Seconds(50),\n            Seconds(60),\n            MilliSeconds(50),\n            0.9);\n    }\n\n    if (simulationConf->m_activateStatistics)\n    {\n        simulationHelper->CreateDefaultStats();\n        Ptr<SatStatsHelperContainer> stats = simulationHelper->GetStatisticsContainer();\n        stats->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        stats->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        stats->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        stats->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        stats->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        stats->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        stats->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        stats->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        stats->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        stats->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        stats->AddPerUtCarrierId(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        stats->AddPerUtCarrierId(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        stats->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        stats->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    }\n\n    simulationHelper->RunSimulation();\n}\n"
    },
    {
      "file_path": "examples/sat-environmental-variables-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/core-module.h\"\n#include \"ns3/satellite-module.h\"\n\n#include <stdint.h>\n\nusing namespace ns3;\n\n/**\n * \\file sat-environmental-variables-example.cc\n * \\ingroup satellite\n *\n * \\brief Example for environmental variables class.\n * Demonstrates various functions for locating directories\n * used by the satellite module.\n *\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-environmental-variables-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    LogComponentEnable(\"sat-environmental-variables-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatEnvVariables\", LOG_LEVEL_INFO);\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"exampleCampaign\");\n    simulationHelper->SetOutputTag(\"exampleTag\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    CommandLine cmd;\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Create default environmental variables\n    Ptr<SatEnvVariables> envVariables = CreateObject<SatEnvVariables>();\n\n    /// Run simulation\n    Simulator::Schedule(MilliSeconds(0),\n                        &SatEnvVariables::GetCurrentWorkingDirectory,\n                        envVariables);\n    Simulator::Schedule(MilliSeconds(1), &SatEnvVariables::GetPathToExecutable, envVariables);\n    Simulator::Schedule(MilliSeconds(2), &SatEnvVariables::GetDataPath, envVariables);\n    Simulator::Schedule(MilliSeconds(3), &SatEnvVariables::GetOutputPath, envVariables);\n    Simulator::Schedule(MilliSeconds(4), &SatEnvVariables::LocateDataDirectory, envVariables);\n    Simulator::Schedule(MilliSeconds(5),\n                        &SatEnvVariables::LocateDirectory,\n                        envVariables,\n                        \"contrib/satellite/data\");\n    Simulator::Schedule(MilliSeconds(6),\n                        &SatEnvVariables::IsValidDirectory,\n                        envVariables,\n                        \"contrib/satellite/data/notfound\");\n    Simulator::Schedule(MilliSeconds(7), &SatEnvVariables::GetCurrentDateAndTime, envVariables);\n\n    simulationHelper->SetSimulationTime(Seconds(1));\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-essa-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-essa-example.cc\n * \\ingroup satellite\n *\n * \\brief This file allows to create a E-SSA scenario\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-essa-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Variables\n    std::string beams = \"8\";\n    uint32_t nbGw = 1;\n    uint32_t nbUtsPerBeam = 100;\n    uint32_t nbEndUsersPerUt = 1;\n\n    Time appStartTime = Seconds(0.001);\n    Time simLength = Seconds(60.0);\n\n    uint32_t packetSize = 64;\n    std::string dataRate = \"5kbps\";\n    std::string onTime = \"0.2\";\n    std::string offTime = \"0.8\";\n\n    double frameAllocatedBandwidthHz = 15000;\n    double frameCarrierAllocatedBandwidthHz = 15000;\n    double frameCarrierRollOff = 0.22;\n    double frameCarrierSpacing = 0;\n    uint32_t frameSpreadingFactor = 256;\n\n    bool interferenceModePerPacket = true;\n    bool displayTraces = true;\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-essa\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"modelPP\", \"interferenceModePerPacket\", interferenceModePerPacket);\n    cmd.AddValue(\"traces\", \"displayTraces\", displayTraces);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", nbUtsPerBeam);\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"packetSize\", \"Constant packet size in bytes\", packetSize);\n    cmd.AddValue(\"dataRate\", \"Data rate (e.g. 500kb/s)\", dataRate);\n    cmd.AddValue(\"onTime\", \"Time for packet sending is on in seconds\", onTime);\n    cmd.AddValue(\"offTime\", \"Time for packet sending is off in seconds\", offTime);\n    cmd.AddValue(\"frameAllocatedBandwidthHz\",\n                 \"Allocated bandwidth in Hz\",\n                 frameAllocatedBandwidthHz);\n    cmd.AddValue(\"frameCarrierAllocatedBandwidthHz\",\n                 \"Allocated carrier bandwidth in Hz\",\n                 frameCarrierAllocatedBandwidthHz);\n    cmd.AddValue(\"frameCarrierRollOff\", \"Roll-off factor\", frameCarrierRollOff);\n    cmd.AddValue(\"frameCarrierSpacing\", \"Carrier spacing factor\", frameCarrierSpacing);\n    cmd.AddValue(\"frameSpreadingFactor\", \"Carrier spreading factor\", frameSpreadingFactor);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // Defaults\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Superframe configuration\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\",\n                       EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::FrameConfigType\",\n                       EnumValue(SatSuperframeConf::CONFIG_TYPE_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_AllocatedBandwidthHz\",\n                       DoubleValue(frameAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierAllocatedBandwidthHz\",\n                       DoubleValue(frameCarrierAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierRollOff\",\n                       DoubleValue(frameCarrierRollOff));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierSpacing\",\n                       DoubleValue(frameCarrierSpacing));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_SpreadingFactor\",\n                       UintegerValue(frameSpreadingFactor));\n\n    // CRDSA only\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaServiceCount\", UintegerValue(4));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Configure RA\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue(SatEnums::RA_MODEL_ESSA));\n    if (interferenceModePerPacket)\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                           EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    }\n    else\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                           EnumValue(SatPhyRxCarrierConf::IF_PER_FRAGMENT));\n    }\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceEliminationModel\",\n                       EnumValue(SatPhyRxCarrierConf::SIC_RESIDUAL));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n    Config::SetDefault(\"ns3::SatBeamHelper::ReturnLinkLinkResults\", EnumValue(SatEnums::LR_FSIM));\n\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDuration\", StringValue(\"600ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowStep\", StringValue(\"200ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDelay\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::FirstWindow\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowSICIterations\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::SpreadingFactor\", UintegerValue(1));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::DetectionThreshold\", DoubleValue(0));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::EnableSIC\", BooleanValue(false));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(50));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.99));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_SlottedAlohaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_CrdsaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_EssaAllowed\", BooleanValue(true));\n\n    // Traffics\n    simulationHelper->SetSimulationTime(simLength);\n\n    simulationHelper->SetGwUserCount(nbGw);\n    simulationHelper->SetUtCountPerBeam(nbUtsPerBeam);\n    simulationHelper->SetUserCountPerUt(nbEndUsersPerUt);\n    simulationHelper->SetBeams(beams);\n\n    simulationHelper->LoadScenario(\"geo-33E-fsim\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddOnOffTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        dataRate,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        \"ns3::ConstantRandomVariable[Constant=\" + onTime + \"]\",\n        \"ns3::ConstantRandomVariable[Constant=\" + offTime + \"]\",\n        appStartTime,\n        simLength,\n        Seconds(0));\n\n    // Outputs\n    simulationHelper->EnableProgressLogs();\n\n    std::string outputPath = Singleton<SatEnvVariables>::Get()->LocateDirectory(\n        \"contrib/satellite/data/sims/example-essa\");\n    Config::SetDefault(\"ns3::ConfigStore::Filename\",\n                       StringValue(outputPath + \"/output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    if (displayTraces)\n    {\n        Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    }\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n\n} // end of `int main (int argc, char *argv[])`\n"
    },
    {
      "file_path": "examples/sat-fwd-link-beam-hopping-example.cc",
      "code": "/* -*-  Mode: C++; c-file-style: \"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2016 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-fwd-link-beam-hopping-example.cc\n * \\ingroup satellite\n *\n * This simulation script is an example of FWD link beam hopping\n * configuration. All spot-beams of GW-1 are enabled and a proper\n * beam hopping pattern is set at the simulation helper. Each spot-\n * beam has by default even loading.\n *\n *         execute command -> ./waf --run \"sat-fwd-link-beam-hopping-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-fwd-link-beam-hopping-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t endUsersPerUt(1);\n    Time simLength(Seconds(3.0));\n    bool scaleDown(true);\n\n    std::string simulationName(\"sat-fwd-link-beam-hopping-example\");\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"simTime\", \"Length of simulation\", simLength);\n    cmd.AddValue(\"scaleDown\",\n                 \"Scale down the bandwidth to see differences with less traffic\",\n                 scaleDown);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetDefaultValues();\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->ConfigureFwdLinkBeamHopping();\n    if (scaleDown)\n    {\n        Config::SetDefault(\"ns3::SatConf::FwdCarrierAllocatedBandwidth\", DoubleValue(1e+08));\n    }\n    simulationHelper->SetSimulationTime(simLength.GetSeconds());\n\n    // All spot-beams of GW-1 (14 in total)\n    simulationHelper->SetBeams(\"1 2 3 4 11 12 13 14 25 26 27 28 40 41\");\n    std::map<uint32_t, uint32_t> utsInBeam = {{1, 30},\n                                              {2, 9},\n                                              {3, 15},\n                                              {4, 30},\n                                              {11, 15},\n                                              {12, 30},\n                                              {13, 9},\n                                              {14, 18},\n                                              {25, 9},\n                                              {26, 15},\n                                              {27, 18},\n                                              {28, 30},\n                                              {40, 9},\n                                              {41, 15}};\n\n    // Set users unevenly in different beams\n    for (const auto& it : utsInBeam)\n    {\n        simulationHelper->SetUtCountPerBeam(it.first, it.second);\n    }\n\n    simulationHelper->LoadScenario(\"geo-33E-beam-hopping\");\n\n    // Create the scenario\n    simulationHelper->CreateSatScenario();\n\n    // Install traffic model\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(1),\n        512,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        MilliSeconds(1),\n        simLength,\n        MilliSeconds(1));\n\n    auto stats = simulationHelper->GetStatisticsContainer();\n    stats->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    stats->AddPerBeamFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    stats->AddPerBeamBeamServiceTime(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    stats->AddGlobalFwdAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    stats->AddGlobalFwdCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-fwd-system-test-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Sami Rantanen <sami.rantanen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-fwd-system-test-example.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to execute system tests for the forward link.\n *\n * To get help of the command line arguments for the example,\n * execute command -> ./waf --run \"sat-fwd-sys-test --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-fwd-sys-test\");\n\nstatic void\nPrintBbFrameInfo(Ptr<SatBbFrame> bbFrame)\n{\n    if (!bbFrame)\n    {\n        std::cout << \"[BBFrameTx] Time: \" << Now().GetSeconds() << \", Frame Type: DUMMY_FRAME\"\n                  << std::endl;\n        return;\n    }\n\n    std::cout << \"[BBFrameTx] \"\n              << \"Time: \" << Now().GetSeconds()\n              << \", Frame Type: \" << SatEnums::GetFrameTypeName(bbFrame->GetFrameType())\n              << \", ModCod: \" << SatEnums::GetModcodTypeName(bbFrame->GetModcod())\n              << \", Occupancy: \" << bbFrame->GetOccupancy()\n              << \", Duration: \" << bbFrame->GetDuration()\n              << \", Space used: \" << bbFrame->GetSpaceUsedInBytes()\n              << \", Space Left: \" << bbFrame->GetSpaceLeftInBytes();\n\n    std::cout << \" [Receivers: \";\n\n    for (SatBbFrame::SatBbFramePayload_t::const_iterator it = bbFrame->GetPayload().begin();\n         it != bbFrame->GetPayload().end();\n         it++)\n    {\n        SatMacTag tag;\n\n        if ((*it)->PeekPacketTag(tag))\n        {\n            if (it != bbFrame->GetPayload().begin())\n            {\n                std::cout << \", \";\n            }\n\n            std::cout << tag.GetDestAddress();\n        }\n        else\n        {\n            NS_FATAL_ERROR(\"No tag\");\n        }\n    }\n\n    std::cout << \"]\" << std::endl;\n}\n\nstatic void\nPrintBbFrameMergeInfo(Ptr<SatBbFrame> mergeTo, Ptr<SatBbFrame> mergeFrom)\n{\n    std::cout << \"[Merge Info Begins]\" << std::endl;\n    std::cout << \"Merge To   -> \";\n    PrintBbFrameInfo(mergeTo);\n    std::cout << \"Merge From <- \";\n    PrintBbFrameInfo(mergeFrom);\n    std::cout << \"[Merge Info Ends]\" << std::endl;\n}\n\nint\nmain(int argc, char* argv[])\n{\n    // Enable some logs.\n    LogComponentEnable(\"sat-fwd-sys-test\", LOG_INFO);\n\n    // Spot-beam served by GW1\n    uint32_t beamId = 26;\n    uint32_t gwEndUsers = 10;\n\n    uint32_t testCase = 0;\n    std::string trafficModel = \"cbr\";\n    double simLength(40.0); // in seconds\n    Time senderAppStartTime = Seconds(0.1);\n    bool traceFrameInfo = false;\n    bool traceMergeInfo = false;\n\n    uint32_t packetSize(128); // in bytes\n    Time interval(MicroSeconds(50));\n    DataRate dataRate(DataRate(16000));\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-fwd-system-test\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    Config::SetDefault(\"ns3::SatBbFrameConf::BbFrameHighOccupancyThreshold\", DoubleValue(0.9));\n    Config::SetDefault(\"ns3::SatBbFrameConf::BbFrameLowOccupancyThreshold\", DoubleValue(0.8));\n    Config::SetDefault(\"ns3::SatBbFrameConf::BBFrameUsageMode\",\n                       StringValue(\"ShortAndNormalFrames\"));\n    Config::SetDefault(\"ns3::SatConf::FwdCarrierAllocatedBandwidth\", DoubleValue(1.25e+07));\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\n        \"testCase\",\n        \"Test case to execute. 0 = scheduler, ACM off, 1 = scheduler, ACM on, 2 = ACM one UT\",\n        testCase);\n    cmd.AddValue(\"gwEndUsers\", \"Number of the GW end users\", gwEndUsers);\n    cmd.AddValue(\"simLength\", \"Length of simulation\", simLength);\n    cmd.AddValue(\"traceFrameInfo\", \"Trace (print) BB frame info\", traceFrameInfo);\n    cmd.AddValue(\"traceMergeInfo\", \"Trace (print) BB frame merge info\", traceMergeInfo);\n    cmd.AddValue(\"beamId\", \"Beam Id\", beamId);\n    cmd.AddValue(\"trafficModel\", \"Traffic model: either 'cbr' or 'onoff'\", trafficModel);\n    cmd.AddValue(\"senderAppStartTime\", \"Sender application (first) start time\", senderAppStartTime);\n    cmd.Parse(argc, argv);\n\n    if (trafficModel != \"cbr\" && trafficModel != \"onoff\")\n    {\n        NS_FATAL_ERROR(\"Invalid traffic model, use either 'cbr' or 'onoff'\");\n    }\n\n    simulationHelper->SetUtCountPerBeam(gwEndUsers);\n    simulationHelper->SetUserCountPerUt(1);\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetGwUserCount(gwEndUsers);\n    simulationHelper->SetBeamSet({beamId});\n\n    /**\n     * Select test case to execute\n     */\n\n    switch (testCase)\n    {\n    case 0: // scheduler, ACM disabled\n        Config::SetDefault(\"ns3::SatBbFrameConf::AcmEnabled\", BooleanValue(false));\n        break;\n\n    case 1: // scheduler, ACM enabled\n        Config::SetDefault(\"ns3::SatBbFrameConf::AcmEnabled\", BooleanValue(true));\n        break;\n\n    case 2: // ACM enabled, one UT with one user, Markov + external fading\n        Config::SetDefault(\"ns3::SatBbFrameConf::AcmEnabled\", BooleanValue(true));\n        Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", StringValue(\"FadingMarkov\"));\n\n        // Note, that the positions of the fading files do not necessarily match with the\n        // beam location, since this example is not using list position allocator!\n        Config::SetDefault(\"ns3::SatChannel::EnableExternalFadingInputTrace\", BooleanValue(true));\n        Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtFwdDownIndexFileName\",\n                           StringValue(\"BeamId-1_256_UT_fading_fwddwn_trace_index.txt\"));\n        Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtRtnUpIndexFileName\",\n                           StringValue(\"BeamId-1_256_UT_fading_rtnup_trace_index.txt\"));\n\n        gwEndUsers = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario();\n\n    // connect BB frame TX traces on, if enabled\n    if (traceFrameInfo)\n    {\n        Config::ConnectWithoutContext(\"/NodeList/*/DeviceList/*/SatMac/BBFrameTxTrace\",\n                                      MakeCallback(&PrintBbFrameInfo));\n    }\n\n    // connect BB frame merge traces on, if enabled\n    if (traceMergeInfo)\n    {\n        Config::ConnectWithoutContext(\n            \"/NodeList/*/DeviceList/*/SatMac/Scheduler/BBFrameContainer/BBFrameMergeTrace\",\n            MakeCallback(&PrintBbFrameMergeInfo));\n    }\n\n    /**\n     * Set-up CBR or OnOff traffic with sink receivers\n     */\n    if (trafficModel == \"cbr\")\n    {\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::FWD_LINK,\n            SatTrafficHelper::UDP,\n            interval,\n            packetSize,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            senderAppStartTime,\n            Seconds(simLength),\n            MicroSeconds(20));\n    }\n    else\n    {\n        simulationHelper->GetTrafficHelper()->AddOnOffTraffic(\n            SatTrafficHelper::FWD_LINK,\n            SatTrafficHelper::UDP,\n            dataRate,\n            packetSize,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            \"ns3::ExponentialRandomVariable[Mean=1.0|Bound=0.0]\",\n            \"ns3::ExponentialRandomVariable[Mean=1.0|Bound=0.0]\",\n            senderAppStartTime,\n            Seconds(simLength),\n            MicroSeconds(20));\n    }\n\n    simulationHelper->EnableProgressLogs();\n\n    NS_LOG_INFO(\"--- sat-fwd-sys-test ---\");\n    NS_LOG_INFO(\"  Packet size: \" << packetSize);\n    NS_LOG_INFO(\"  Interval (CBR): \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Data rate (OnOff): \" << dataRate);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of GW end users: \" << gwEndUsers);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (\"sat-fwd-sys-test.xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->RunSimulation();\n\n    Simulator::Destroy();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-generic-launcher.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2018 CNES\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Mathias Ettinger <mettinger@toulouse.viveris.fr>\n *\n */\n\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\n#include <stdint.h>\n\nusing namespace ns3;\n\n/**\n * \\file sat-generic-launcher.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results with\n * a high degree of customization through XML file.\n *\n * execute command -> ./waf --run \"sat-generic-launcher --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-generic-launcher\");\n\nint\nmain(int argc, char* argv[])\n{\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/generic-input-attributes.xml\";\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"generic-launcher\");\n    simulationHelper->DisableAllCapacityAssignmentCategories();\n    simulationHelper->EnableCrdsa();\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    CommandLine cmd;\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->ConfigureAttributesFromFile(inputFileNameWithPath);\n    simulationHelper->StoreAttributesToFile(\"parametersUsed.xml\");\n    simulationHelper->RunSimulation();\n}\n"
    },
    {
      "file_path": "examples/sat-group-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-group-example.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation with a several groups of UTs\n *\n * Stats using groups:\n * - [Fwd, Rtn] AppDelay\n * - [Fwd, Rtn] [Dev, Mac, Phy] Delay\n * - [Fwd, Rtn] Average AppDelay\n * - [Fwd, Rtn] [Dev, Mac, Phy] Average Delay\n * - [Fwd, Rtn] AppJitter\n * - [Fwd, Rtn] [Dev, Mac, Phy] Jitter\n * - [Fwd, Rtn] Average AppJitter\n * - [Fwd, Rtn] [Dev, Mac, Phy] Average Jitter\n * - [Fwd, Rtn] AppPlt\n * - [Fwd, Rtn] Average AppPlt\n * - [Fwd, Rtn] Queue [Bytes, Packets]\n * - [Fwd, Rtn] SignallingLoad\n * - [Fwd, Rtn] CompositeSinr\n * - [Fwd, Rtn] AppThroughput\n * - [Fwd, Rtn] [Dev, Mac, Phy] Throughput\n * - [Fwd, Rtn] Average AppThroughput\n * - [Fwd, Rtn] [Dev, Mac, Phy] Average Throughput\n * - [FwdDa, RtnDa, SlottedAloha, Crdsa, Essa] PacketError\n * - [SlottedAloha, Crdsa, Essa] PacketCollision\n * - CapacityRequest\n * - ResourcesGranted\n *\n * execute command -> ./waf --run \"sat-group-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-group-example\");\n\ntypedef enum\n{\n    MANUAL,\n    POSITION,\n    NUMBER,\n} GroupCreationMethod_t;\n\nvoid\nConfigureAllStats(Ptr<SatStatsHelperContainer> s)\n{\n    SatStatsHelper::OutputType_t outputType =\n        SatStatsHelper::OUTPUT_SCATTER_FILE; // Only format compatible with all per group statistics\n\n    s->AddPerBeamFwdAppDelay(outputType);\n\n    s->AddPerGroupFwdAppDelay(outputType);\n    s->AddPerGroupRtnAppDelay(outputType);\n\n    s->AddPerGroupFwdDevDelay(outputType);\n    s->AddPerGroupRtnDevDelay(outputType);\n    s->AddPerGroupFwdMacDelay(outputType);\n    s->AddPerGroupRtnMacDelay(outputType);\n    s->AddPerGroupFwdPhyDelay(outputType);\n    s->AddPerGroupRtnPhyDelay(outputType);\n\n    s->AddAverageGroupFwdAppDelay(outputType);\n    s->AddAverageGroupRtnAppDelay(outputType);\n\n    s->AddAverageGroupFwdDevDelay(outputType);\n    s->AddAverageGroupRtnDevDelay(outputType);\n    s->AddAverageGroupFwdMacDelay(outputType);\n    s->AddAverageGroupRtnMacDelay(outputType);\n    s->AddAverageGroupFwdPhyDelay(outputType);\n    s->AddAverageGroupRtnPhyDelay(outputType);\n\n    s->AddPerGroupFwdAppJitter(outputType);\n    s->AddPerGroupRtnAppJitter(outputType);\n\n    s->AddPerGroupFwdDevJitter(outputType);\n    s->AddPerGroupRtnDevJitter(outputType);\n    s->AddPerGroupFwdMacJitter(outputType);\n    s->AddPerGroupRtnMacJitter(outputType);\n    s->AddPerGroupFwdPhyJitter(outputType);\n    s->AddPerGroupRtnPhyJitter(outputType);\n\n    s->AddAverageGroupFwdAppJitter(outputType);\n    s->AddAverageGroupRtnAppJitter(outputType);\n\n    s->AddAverageGroupFwdDevJitter(outputType);\n    s->AddAverageGroupRtnDevJitter(outputType);\n    s->AddAverageGroupFwdMacJitter(outputType);\n    s->AddAverageGroupRtnMacJitter(outputType);\n    s->AddAverageGroupFwdPhyJitter(outputType);\n    s->AddAverageGroupRtnPhyJitter(outputType);\n\n    s->AddPerGroupFwdAppPlt(outputType);\n    s->AddPerGroupRtnAppPlt(outputType);\n\n    s->AddAverageGroupFwdAppPlt(outputType);\n    s->AddAverageGroupRtnAppPlt(outputType);\n\n    s->AddPerGroupFwdQueueBytes(outputType);\n    s->AddPerGroupRtnQueueBytes(outputType);\n\n    s->AddPerGroupFwdQueuePackets(outputType);\n    s->AddPerGroupRtnQueuePackets(outputType);\n\n    s->AddPerGroupFwdSignallingLoad(outputType);\n    s->AddPerGroupRtnSignallingLoad(outputType);\n\n    s->AddPerGroupFwdCompositeSinr(outputType);\n    s->AddPerGroupRtnCompositeSinr(outputType);\n\n    s->AddPerGroupFwdAppThroughput(outputType);\n    s->AddPerGroupRtnAppThroughput(outputType);\n\n    s->AddPerGroupFwdUserDevThroughput(outputType);\n    s->AddPerGroupRtnFeederDevThroughput(outputType);\n    s->AddPerGroupFwdUserMacThroughput(outputType);\n    s->AddPerGroupRtnFeederMacThroughput(outputType);\n    s->AddPerGroupFwdUserPhyThroughput(outputType);\n    s->AddPerGroupRtnFeederPhyThroughput(outputType);\n\n    s->AddAverageGroupFwdAppThroughput(outputType);\n    s->AddAverageGroupRtnAppThroughput(outputType);\n\n    s->AddAverageGroupFwdUserDevThroughput(outputType);\n    s->AddAverageGroupRtnFeederDevThroughput(outputType);\n    s->AddAverageGroupFwdUserMacThroughput(outputType);\n    s->AddAverageGroupRtnFeederMacThroughput(outputType);\n    s->AddAverageGroupFwdUserPhyThroughput(outputType);\n    s->AddAverageGroupRtnFeederPhyThroughput(outputType);\n\n    s->AddPerGroupFwdUserDaPacketError(outputType);\n    s->AddPerGroupRtnFeederDaPacketError(outputType);\n    s->AddPerGroupFeederSlottedAlohaPacketError(outputType);\n    s->AddPerGroupFeederCrdsaPacketError(outputType);\n    s->AddPerGroupFeederEssaPacketError(outputType);\n\n    s->AddPerGroupFeederSlottedAlohaPacketCollision(outputType);\n    s->AddPerGroupFeederCrdsaPacketCollision(outputType);\n    s->AddPerGroupFeederEssaPacketCollision(outputType);\n\n    s->AddPerGroupCapacityRequest(outputType);\n\n    s->AddPerGroupResourcesGranted(outputType);\n}\n\nint\nmain(int argc, char* argv[])\n{\n    // Enable info logs\n    LogComponentEnable(\"sat-group-example\", LOG_LEVEL_INFO);\n\n    // Variables\n    uint32_t beamId = 1;\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(20);\n\n    uint32_t packetSize(1500);\n    Time interval(Seconds(1.0));\n\n    Time appStartTime = Seconds(0.1);\n    Time simLength(Seconds(60.0));\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"sat-group-example\");\n\n    // Parse command-line\n    CommandLine cmd;\n    cmd.AddValue(\"UtsPerBeam\", \"Number of UTs per beam\", utsPerBeam);\n    cmd.AddValue(\"PacketSize\", \"UDP packet size (in bytes)\", packetSize);\n    cmd.AddValue(\"Interval\", \"CBR interval (in seconds, or add unit)\", interval);\n    cmd.AddValue(\"SimLength\", \"Simulation length (in seconds, or add unit)\", simLength);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Set default values\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n\n    // Set beam ID\n    std::stringstream beamsEnabled;\n    beamsEnabled << beamId;\n    simulationHelper->SetBeams(beamsEnabled.str());\n\n    Ptr<SatGroupHelper> groupHelper = simulationHelper->GetGroupHelper();\n\n    // Create group 5 and create 100 UTs (in addition to the ones are created by SimulationHelper,\n    // using utsPerBeam) to in this group\n    groupHelper->CreateUtNodesFromPosition(5, 10, GeoCoordinate(56.4243, -16.042, 122.427), 100000);\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Create reference system\n    simulationHelper->CreateSatScenario();\n\n    // Create groups\n    NodeContainer utNodes = Singleton<SatTopology>::Get()->GetUtNodes();\n\n    GroupCreationMethod_t creationMethod = GroupCreationMethod_t::NUMBER;\n\n    if (creationMethod == GroupCreationMethod_t::MANUAL)\n    {\n        groupHelper->AddUtNodeToGroup(1, utNodes.Get(0));\n\n        NodeContainer nodes2To10;\n        for (uint32_t i = 2; i < 11; i++)\n        {\n            nodes2To10.Add(utNodes.Get(i));\n        }\n        groupHelper->AddUtNodesToGroup(2, nodes2To10);\n    }\n    else if (creationMethod == GroupCreationMethod_t::POSITION)\n    {\n        // Add all nodes less than 100km from node 0\n        groupHelper->CreateGroupFromPosition(\n            2,\n            utNodes,\n            utNodes.Get(0)->GetObject<SatMobilityModel>()->GetGeoPosition(),\n            100000);\n    }\n    else if (creationMethod == GroupCreationMethod_t::NUMBER)\n    {\n        std::vector<uint32_t> groups = {1, 2, 3};\n        groupHelper->CreateGroupsUniformly(groups, utNodes);\n    }\n    else\n    {\n        NS_FATAL_ERROR(\"Unknown value of GroupCreationMethod_t: \" << creationMethod);\n    }\n\n    // setup CBR traffic\n    Config::SetDefault(\"ns3::CbrApplication::Interval\", TimeValue(interval));\n    Config::SetDefault(\"ns3::CbrApplication::PacketSize\", UintegerValue(packetSize));\n\n    // Setup custom traffics\n    Ptr<SatTrafficHelper> trafficHelper = simulationHelper->GetTrafficHelper();\n    trafficHelper->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(100),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(groupHelper->GetUtNodes(2)),\n        appStartTime,\n        appStartTime + simLength,\n        Seconds(0.05));\n\n    trafficHelper->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Seconds(1),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(groupHelper->GetUtNodes(0)),\n        appStartTime,\n        appStartTime + simLength,\n        Seconds(0.05));\n\n    trafficHelper->AddHttpTraffic(\n        SatTrafficHelper::FWD_LINK,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(groupHelper->GetUtNodes(1)),\n        appStartTime,\n        appStartTime + simLength,\n        Seconds(0.05));\n\n    trafficHelper->AddVoipTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::G_711_1,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(groupHelper->GetUtNodes(5)),\n        appStartTime,\n        appStartTime + simLength,\n        Seconds(0.05));\n\n    NS_LOG_INFO(\"--- sat-group-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number total of UTs: \" << Singleton<SatTopology>::Get()->GetNUtNodes());\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  Number of groups: \" << groupHelper->GetN());\n    NS_LOG_INFO(\"  Nodes in default group: \" << groupHelper->GetUtNodes(0).GetN());\n    std::list<uint32_t> groupIds = groupHelper->GetGroups();\n    groupIds.sort();\n    for (uint32_t groupId : groupIds)\n    {\n        NS_LOG_INFO(\"  Nodes in group \" << groupId << \": \"\n                                        << groupHelper->GetUtNodes(groupId).GetN());\n    }\n    NS_LOG_INFO(\"  \");\n\n    // Set statistics\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n    simulationHelper->EnableProgressLogs();\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    ConfigureAllStats(s);\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-gw-handover-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien TAURAN <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-gw-handover-example.cc\n * \\ingroup satellite\n *\n * \\brief  Test handover for both GW and UT\n *\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-gw-handover-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n\n    Config::SetDefault(\"ns3::SatOrbiterFeederPhy::QueueSize\", UintegerValue(100000));\n\n    Config::SetDefault(\"ns3::SatHelper::HandoversEnabled\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHandoverModule::NumberClosestSats\", UintegerValue(2));\n\n    Config::SetDefault(\"ns3::SatGwMac::DisableSchedulingIfNoDeviceConnected\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatOrbiterMac::DisableSchedulingIfNoDeviceConnected\",\n                       BooleanValue(true));\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-gw-handover\");\n    Ptr<SimulationHelperConf> simulationConf = CreateObject<SimulationHelperConf>();\n    simulationHelper->SetSimulationTime(Seconds(100));\n    simulationHelper->SetGwUserCount(1);\n    simulationHelper->SetUserCountPerUt(1);\n    std::set<uint32_t> beamSetAll = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,\n                                     16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                                     31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\n                                     46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n                                     61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72};\n    simulationHelper->SetBeamSet(beamSetAll);\n    simulationHelper->SetUserCountPerMobileUt(simulationConf->m_utMobileUserCount);\n\n    simulationHelper->LoadScenario(\"constellation-leo-2-satellites\");\n\n    simulationHelper->CreateSatScenario(SatHelper::NONE);\n\n    Singleton<SatTopology>::Get()->PrintTopology(std::cout);\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(100),\n        512,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1.0),\n        Seconds(100.0),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(100),\n        512,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1.0),\n        Seconds(100.0),\n        Seconds(0));\n\n    // To store attributes to file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddPerSatFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFwdUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatRtnUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerBeamFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamFwdUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamBeamServiceTime(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-handover-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien TAURAN <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\n#include <stdint.h>\n\nusing namespace ns3;\n\n/**\n * \\file sat-handover-example.cc\n * \\ingroup satellite\n *\n * \\brief  Test handover for UTs\n *\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-handover-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n\n    Config::SetDefault(\"ns3::SatOrbiterFeederPhy::QueueSize\", UintegerValue(100000));\n\n    Config::SetDefault(\"ns3::SatHelper::HandoversEnabled\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHandoverModule::NumberClosestSats\", UintegerValue(2));\n\n    Config::SetDefault(\"ns3::SatGwMac::DisableSchedulingIfNoDeviceConnected\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatOrbiterMac::DisableSchedulingIfNoDeviceConnected\",\n                       BooleanValue(true));\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-handover\");\n    Ptr<SimulationHelperConf> simulationConf = CreateObject<SimulationHelperConf>();\n    simulationHelper->SetSimulationTime(Seconds(100));\n    simulationHelper->SetGwUserCount(1);\n    simulationHelper->SetUserCountPerUt(1);\n    simulationHelper->SetBeamSet({0,  20, 21, 22, 32, 33, 34, 35, 36, 37, 44, 45, 46,\n                                  47, 53, 54, 55, 56, 59, 60, 61, 66, 67, 68, 71, 72});\n    simulationHelper->SetUserCountPerMobileUt(simulationConf->m_utMobileUserCount);\n\n    simulationHelper->LoadScenario(\"constellation-eutelsat-geo-2-sats-handovers\");\n\n    std::string mobileUtFolder = Singleton<SatEnvVariables>::Get()->LocateDataDirectory() +\n                                 \"/additional-input/utpositions/mobiles/scenario6\";\n    simulationHelper->CreateSatScenario(SatHelper::NONE, mobileUtFolder);\n\n    Singleton<SatTopology>::Get()->PrintTopology(std::cout);\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(100),\n        512,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1.0),\n        Seconds(100.0),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(100),\n        512,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1.0),\n        Seconds(100.0),\n        Seconds(0));\n\n    // To store attributes to file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddPerSatFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerGwFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerSatRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerGwRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerSatFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerGwFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerSatRtnUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerGwRtnUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerBeamFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamFwdUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamBeamServiceTime(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerSatFwdFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-http-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Budiarto Herman <budiarto.herman@magister.fi>\n *\n */\n\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-http-example.cc\n * \\ingroup satellite\n * \\brief Example of using HTTP traffic model in a satellite network.\n *\n * One HTTP server application is installed in the first GW user. Then one HTTP\n * client application is installed in each UT user, configured to point to the\n * server. TCP protocol is used between the applications.\n *\n * By default, the SIMPLE test scenario is used. Another test scenario can be\n * given from command line as user argument, e.g.:\n *\n *     $ ./waf --run=\"sat-http-example --scenario=larger\"\n *     $ ./waf --run=\"sat-http-example --scenario=full\"\n *\n * Simulation runs for 1000 seconds by default. This can be changed from the\n * command line argument as well, e.g.:\n *\n *     $ ./waf --run=\"sat-http-example --duration=500\"\n *\n * To see help for user arguments:\n *\n *     $ ./waf --run \"sat-http-example --PrintHelp\"\n *\n */\nNS_LOG_COMPONENT_DEFINE(\"sat-http-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    std::string scenario = \"simple\";\n    double duration = 1000;\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-http\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full)\", scenario);\n    cmd.AddValue(\"duration\", \"Simulation duration (in seconds)\", duration);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    /// Set simulation output details\n    simulationHelper->SetSimulationTime(duration);\n    simulationHelper->SetOutputTag(scenario);\n\n    // LogComponentEnableAll (LOG_PREFIX_ALL);\n    // LogComponentEnable (\"HttpClient\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"HttpServer\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"sat-http-example\", LOG_LEVEL_INFO);\n\n    // remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario(satScenario);\n\n    // get users\n    NodeContainer utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes();\n    NodeContainer gwUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n\n    ThreeGppHttpHelper httpHelper;\n    httpHelper.InstallUsingIpv4(gwUsers.Get(0), utUsers);\n    httpHelper.GetServer().Start(Seconds(1.0));\n\n    auto apps = httpHelper.GetClients();\n    apps.Start(Seconds(3.0));\n\n    uint32_t i = 0;\n    std::vector<Ptr<ClientRxTracePlot>> plots;\n    for (auto app = apps.Begin(); app != apps.End(); app++, i++)\n    {\n        std::stringstream plotName;\n        plotName << \"3GPP-HTTP-client-\" << i << \"-trace\";\n        plots.push_back(CreateObject<ClientRxTracePlot>(*app, plotName.str()));\n    }\n\n    NS_LOG_INFO(\"--- sat-http-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->EnableProgressLogs();\n\n    // Add PLT statistics\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n    s->AddGlobalFwdAppPlt(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdAppPlt(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdAppPlt(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtFwdAppPlt(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerGwFwdAppPlt(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerGwFwdAppPlt(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    simulationHelper->RunSimulation();\n\n    plots.clear();\n\n    return 0;\n\n} // end of `int main (int argc, char *argv[])`\n"
    },
    {
      "file_path": "examples/sat-iot-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-iot-example.cc\n * \\ingroup satellite\n *\n * \\brief This file allows to create an IoT scenario\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-iot-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Variables\n    std::string beam = \"8\";\n    uint32_t nbGw = 1;\n    uint32_t nbUtsPerBeam = 1;\n    uint32_t nbEndUsersPerUt = 1;\n\n    Time appStartTime = Seconds(0.001);\n    Time simLength = Seconds(60.0);\n\n    uint32_t queueSize = 50;\n    double maxPowerTerminalW = 0.3;\n\n    double rtnFeederLinkBaseFrequency = 1.77e+10;\n    double rtnUserLinkBaseFrequency = 2.95e+10;\n    double rtnFeederLinkBandwidth = 4.6848e+6;\n    double frame0_AllocatedBandwidthHz = 2.928e+05;\n    double frame0_CarrierAllocatedBandwidthHz = 2.928e+05;\n    double frame0_CarrierRollOff = 0.22;\n    double frame0_CarrierSpacing = 0;\n\n    std::string modcodsUsed =\n        \"QPSK_1_TO_2 QPSK_3_TO_5 QPSK_2_TO_3 QPSK_3_TO_4 QPSK_4_TO_5 QPSK_5_TO_6 QPSK_8_TO_9 \"\n        \"QPSK_9_TO_10 \"\n        \"8PSK_3_TO_5 8PSK_2_TO_3 8PSK_3_TO_4 8PSK_5_TO_6 8PSK_8_TO_9 8PSK_9_TO_10 \"\n        \"16APSK_2_TO_3 16APSK_3_TO_4 16APSK_4_TO_5 16APSK_5_TO_6 16APSK_8_TO_9 16APSK_9_TO_10 \"\n        \"32APSK_3_TO_4 32APSK_4_TO_5 32APSK_5_TO_6 32APSK_8_TO_9\";\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"sat-iot-example\");\n\n    // Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"Beam\", \"Id of beam used (cannot use multiple beams)\", beam);\n    cmd.AddValue(\"NbGw\", \"Number of GWs\", nbGw);\n    cmd.AddValue(\"NbUtsPerBeam\", \"Number of UTs per spot-beam\", nbUtsPerBeam);\n    cmd.AddValue(\"NbEndUsersPerUt\", \"Number of end users per UT\", nbEndUsersPerUt);\n    cmd.AddValue(\"QueueSize\", \"Satellite queue sizes in packets\", queueSize);\n    cmd.AddValue(\"AppStartTime\", \"Applications start time (in seconds, or add unit)\", appStartTime);\n    cmd.AddValue(\"SimLength\", \"Simulation length (in seconds, or add unit)\", simLength);\n    cmd.AddValue(\"MaxPowerTerminalW\", \"Maximum power of terminals in W\", maxPowerTerminalW);\n    cmd.AddValue(\"RtnFeederLinkBaseFrequency\",\n                 \"Base frequency of the return feeder link band\",\n                 rtnFeederLinkBaseFrequency);\n    cmd.AddValue(\"RtnUserLinkBaseFrequency\",\n                 \"Base frequency of the return user link band\",\n                 rtnUserLinkBaseFrequency);\n    cmd.AddValue(\"RtnFeederLinkBandwidth\",\n                 \"Bandwidth of the return feeder link band\",\n                 rtnFeederLinkBandwidth);\n    cmd.AddValue(\"Frame0_AllocatedBandwidthHz\",\n                 \"The allocated bandwidth [Hz] for frame\",\n                 frame0_AllocatedBandwidthHz);\n    cmd.AddValue(\"Frame0_CarrierAllocatedBandwidthHz\",\n                 \"The allocated carrier bandwidth [Hz] for frame\",\n                 frame0_CarrierAllocatedBandwidthHz);\n    cmd.AddValue(\"Frame0_CarrierRollOff\", \"The roll-off factor for frame\", frame0_CarrierRollOff);\n    cmd.AddValue(\"Frame0_CarrierSpacing\",\n                 \"The carrier spacing factor for frame\",\n                 frame0_CarrierSpacing);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    /*\n     * FWD link\n     */\n    // Set defaults\n    Config::SetDefault(\"ns3::SatConf::FwdUserLinkBandwidth\", DoubleValue(2e+08));\n    Config::SetDefault(\"ns3::SatConf::FwdFeederLinkBandwidth\", DoubleValue(8e+08));\n    Config::SetDefault(\"ns3::SatConf::FwdCarrierAllocatedBandwidth\", DoubleValue(50e+06));\n    Config::SetDefault(\"ns3::SatConf::FwdCarrierRollOff\", DoubleValue(0.05));\n\n    // ModCods selection\n    Config::SetDefault(\"ns3::SatBeamHelper::DvbVersion\", StringValue(\"DVB_S2\"));\n    Config::SetDefault(\"ns3::SatBbFrameConf::ModCodsUsed\", StringValue(modcodsUsed));\n    Config::SetDefault(\"ns3::SatBbFrameConf::DefaultModCod\", StringValue(\"QPSK_1_TO_2\"));\n\n    // Queue size\n    Config::SetDefault(\"ns3::SatQueue::MaxPackets\", UintegerValue(queueSize));\n\n    // Power limitation\n    Config::SetDefault(\"ns3::SatUtPhy::TxMaxPowerDbw\",\n                       DoubleValue(SatUtils::LinearToDb(maxPowerTerminalW)));\n\n    /*\n     * RTN link\n     */\n    // Default plan\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameCount\", UintegerValue(1));\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\",\n                       EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_0));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\",\n                       EnumValue(SatSuperframeConf::CONFIG_TYPE_0));\n\n    Config::SetDefault(\"ns3::SatConf::RtnFeederLinkBaseFrequency\",\n                       DoubleValue(rtnFeederLinkBaseFrequency)); // Default value\n    Config::SetDefault(\"ns3::SatConf::RtnUserLinkBaseFrequency\",\n                       DoubleValue(rtnUserLinkBaseFrequency)); // Default value\n    Config::SetDefault(\"ns3::SatConf::RtnFeederLinkBandwidth\", DoubleValue(rtnFeederLinkBandwidth));\n    Config::SetDefault(\"ns3::SatConf::RtnUserLinkBandwidth\",\n                       DoubleValue(rtnFeederLinkBandwidth / 4));\n\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_AllocatedBandwidthHz\",\n                       DoubleValue(frame0_AllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_CarrierAllocatedBandwidthHz\",\n                       DoubleValue(frame0_CarrierAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_CarrierRollOff\",\n                       DoubleValue(frame0_CarrierRollOff));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_CarrierSpacing\",\n                       DoubleValue(frame0_CarrierSpacing));\n\n    /*\n     * Traffics\n     */\n    simulationHelper->SetSimulationTime(simLength);\n\n    simulationHelper->SetGwUserCount(nbGw);\n    simulationHelper->SetUtCountPerBeam(nbUtsPerBeam);\n    simulationHelper->SetUserCountPerUt(nbEndUsersPerUt);\n    simulationHelper->SetBeams(beam);\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    Ptr<SatHelper> satHelper = simulationHelper->GetSatelliteHelper();\n    Ptr<SatTrafficHelper> trafficHelper = simulationHelper->GetTrafficHelper();\n    trafficHelper->AddPoissonTraffic(SatTrafficHelper::RTN_LINK,\n                                     Seconds(1),\n                                     Seconds(0.1),\n                                     DataRate(\"200kb/s\"),\n                                     300,\n                                     NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n                                     Singleton<SatTopology>::Get()->GetUtUserNodes(),\n                                     appStartTime,\n                                     simLength,\n                                     Seconds(0.001)); // 200kb/s == 100kBaud\n    trafficHelper->AddCbrTraffic(SatTrafficHelper::RTN_LINK,\n                                 SatTrafficHelper::UDP,\n                                 MilliSeconds(8.5),\n                                 300,\n                                 NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n                                 Singleton<SatTopology>::Get()->GetUtUserNodes(),\n                                 appStartTime,\n                                 simLength,\n                                 Seconds(0.001)); // 280kb/s == 140kBaud\n\n    // Link results\n    // Uncomment to use custom C/N0 traces or constants for some links\n    /*\n    Ptr<SatCnoHelper> satCnoHelper = simulationHelper->GetCnoHelper ();\n    satCnoHelper->UseTracesForDefault (false);\n    for (uint32_t i = 0; i < Singleton<SatTopology>::Get()->GetNUtNodes(); i++)\n      {\n        satCnoHelper->SetUtNodeCnoFile (Singleton<SatTopology>::Get()->GetUtNode(i),\n    SatEnums::FORWARD_USER_CH, \"path_to_cno_file\"); // For input trace file\n        // or\n        satCnoHelper->SetGwNodeCno (Singleton<SatTopology>::Get()->GetUtNode(i),\n    SatEnums::FORWARD_USER_CH, 1e10); // For constant value\n      }\n    */\n\n    /*\n     * Outputs\n     * Note: some outputs are automatically generated by traffic helper\n     */\n    simulationHelper->EnableProgressLogs();\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    // Link SINR\n    s->AddGlobalFwdFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalFwdUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    // SINR\n    s->AddGlobalFwdCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalFwdCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerUtFwdCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    // Link RX Power\n    s->AddGlobalFwdFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalFwdUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    // Return link load\n    s->AddGlobalFrameUserLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerGwFrameUserLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFrameUserLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddGlobalFrameUserLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerGwFrameUserLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFrameUserLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    // Frame type usage\n    s->AddGlobalFrameTypeUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n\n} // end of `int main (int argc, char *argv[])`\n"
    },
    {
      "file_path": "examples/sat-link-budget-example.cc",
      "code": "/* -*-  Mode: C++; c-file-style: \"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Sami Rantanen <sami.rantanen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-link-budget-example.cc\n * \\ingroup satellite\n *\n * \\brief  Link budget example application for link budget calculation purposes in satellite\n * network. Some parameter can be set as command line arguments. To see help for user arguments:\n *         execute command -> ./waf --run \"sat-link-budget-example --PrintHelp\"\n *\n *         Application sends one packet from GW connected user to UT connected users and\n *         from UT connected user to GW connected user. User defined scenario is created with given\n * beam ID.\n *\n *         Example reads sat-link-budget-input-attributes.xml, so user is able to change link budget\n * parameter by modifying this file without compiling example.\n *\n *         Used parameters and link budget calculation result are printed as log info.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-link-budget-example\");\n\n// callback called when packet is received by phy RX carrier\nstatic void\nLinkBudgetTraceCb(std::string context,\n                  Ptr<SatSignalParameters> params,\n                  Mac48Address ownAdd,\n                  Mac48Address destAdd,\n                  double ifPower,\n                  double cSinr)\n{\n    // print only unicast message to prevent printing control messages like TBTP messages\n    if (!destAdd.IsBroadcast())\n    {\n        NS_LOG_INFO(\"\" << params->m_channelType << \" \" << ownAdd << \" \" << destAdd << \" \"\n                       << params->m_beamId << \" \" << params->m_carrierFreq_hz << \" \"\n                       << SatUtils::WToDbW(ifPower) << \" \" << SatUtils::WToDbW(params->m_rxPower_W)\n                       << \" \" << SatUtils::LinearToDb(params->GetSinr()) << \" \"\n                       << SatUtils::LinearToDb(cSinr));\n    }\n}\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId = 11;\n    double latitude = 50.00;\n    double longitude = -1.00;\n    double altitude = 0.00;\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-link-budget\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/sat-link-budget-input-attributes.xml\";\n\n    // read command line parameters can be given by user\n    CommandLine cmd;\n    cmd.AddValue(\"beam\", \"Beam to use for testing. (1 - 72)\", beamId);\n    cmd.AddValue(\"latitude\", \"Latitude of UT position (-90 ... 90.0)\", latitude);\n    cmd.AddValue(\"longitude\", \"Longitude of UT position (-180 ... 180)\", longitude);\n    cmd.AddValue(\"altitude\", \"Altitude of UT position (meters)\", altitude);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n\n    // To change attributes having affect on link budget,\n    // modify attributes available in sat-link-budget-input-attributes.xml found in same directory\n    // this source file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(inputFileNameWithPath));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    ConfigStore inputConfig;\n    inputConfig.ConfigureDefaults();\n\n    simulationHelper->SetUtCountPerBeam(1);\n    simulationHelper->SetUserCountPerUt(1);\n    simulationHelper->SetBeamSet({beamId});\n    simulationHelper->SetSimulationTime(Seconds(1.1));\n\n    // enable info logs\n    LogComponentEnable(\"sat-link-budget-example\", LOG_LEVEL_INFO);\n\n    // Create a position allocator for our single UT\n    Ptr<SatListPositionAllocator> posAllocator = CreateObject<SatListPositionAllocator>();\n    posAllocator->Add(GeoCoordinate(latitude, longitude, altitude));\n    simulationHelper->SetUtPositionAllocatorForBeam(beamId, posAllocator);\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario();\n\n    // set callback traces where we want results out\n    Config::Connect(\"/NodeList/*/DeviceList/*/SatPhy/PhyRx/RxCarrierList/*/LinkBudgetTrace\",\n                    MakeCallback(&LinkBudgetTraceCb));\n\n    Config::Connect(\"/NodeList/*/DeviceList/*/UserPhy/*/PhyRx/RxCarrierList/*/LinkBudgetTrace\",\n                    MakeCallback(&LinkBudgetTraceCb));\n\n    Config::Connect(\"/NodeList/*/DeviceList/*/FeederPhy/*/PhyRx/RxCarrierList/*/LinkBudgetTrace\",\n                    MakeCallback(&LinkBudgetTraceCb));\n    // Set UT position\n    Ptr<SatMobilityModel> utMob =\n        Singleton<SatTopology>::Get()->GetUtNode(0)->GetObject<SatMobilityModel>();\n\n    // Install CBR traffic model\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(100),\n        512,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(0.1),\n        Seconds(0.25),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(100),\n        512,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(0.1),\n        Seconds(0.25),\n        Seconds(0));\n\n    Ptr<SatMobilityModel> gwMob =\n        Singleton<SatTopology>::Get()->GetGwNode(0)->GetObject<SatMobilityModel>();\n\n    Ptr<Node> sat = Singleton<SatTopology>::Get()->GetOrbiterNode(0);\n    Ptr<SatMobilityModel> satMob = sat->GetObject<SatMobilityModel>();\n\n    // print used parameters using log info\n    NS_LOG_INFO(\"--- satellite-link-budget-example ---\");\n    NS_LOG_INFO(\" Beam ID: \" << beamId);\n    NS_LOG_INFO(\" Sat position: \" << satMob->GetGeoPosition() << \" \" << satMob->GetPosition());\n    NS_LOG_INFO(\" GW position: \" << gwMob->GetGeoPosition() << \" \" << gwMob->GetPosition());\n    NS_LOG_INFO(\" UT position: \" << utMob->GetGeoPosition() << \" \" << utMob->GetPosition());\n    NS_LOG_INFO(\"  \");\n    NS_LOG_INFO(\"Link results (Time, Channel type, Own address, Dest. address, Beam ID, Carrier \"\n                \"Center freq, IF Power, RX Power, SINR, Composite SINR) :\");\n    // results are printed out in callback (LinkBudgetTraceCb)\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-link-results-plot.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Budiarto Herman <budiarto.herman@magister.fi>\n *\n */\n\n#include \"ns3/core-module.h\"\n#include \"ns3/gnuplot.h\"\n#include \"ns3/satellite-env-variables.h\"\n#include \"ns3/satellite-look-up-table.h\"\n#include \"ns3/singleton.h\"\n\n#include <fstream>\n#include <stdint.h>\n\n/**\n * \\file sat-link-results-plot.cc\n * \\ingroup satellite\n * \\brief Example for plotting satellite link results data.\n *\n * \\sa SatLinkResultsPlot\n */\nNS_LOG_COMPONENT_DEFINE(\"SatLinkResultsPlot\");\n\nnamespace ns3\n{\n\n/**\n * \\ingroup satellite\n * \\brief Example for plotting satellite link results data.\n *\n * This example can be run as it is, without any argument, i.e.:\n *\n *     $ ./waf --run=\"link-results-plot\"\n *\n * Several Gnuplot files (.plt) will be generated as output. Each of these\n * files can be converted to a PNG file, for example by this command:\n *\n *     $ gnuplot s2-32apsk.plt\n *\n * which will produce `s2-32apsk.png` file in the same directory. To convert all\n * the Gnuplot files in the directory, the command below can be used:\n *\n *     $ gnuplot *.plt\n *\n */\nclass SatLinkResultsPlot : public SimpleRefCount<SatLinkResultsPlot>\n{\n  public:\n    /// Creates an empty instance.\n    SatLinkResultsPlot();\n    /// Load link results data files and generate plots from them.\n    void Run();\n\n  private:\n    void RunDvbRcs2Qpsk();\n    void RunDvbRcs2Psk8();\n    void RunDvbRcs2Qam16();\n    void RunDvbS2Qpsk();\n    void RunDvbS2Psk8();\n    void RunDvbS2Apsk16();\n    void RunDvbS2Apsk32();\n\n    Gnuplot2dDataset GetGnuplotDataset(Ptr<SatLookUpTable> table, std::string title);\n    Gnuplot GetGnuplot(std::string outputName, std::string title);\n\n    double m_resolutionDb;\n    double m_minSinrDb;\n    double m_maxSinrDb;\n    std::string m_inputPath;\n\n}; // end of class SatLinkResultsPlot\n\nSatLinkResultsPlot::SatLinkResultsPlot()\n{\n    m_resolutionDb = 0.01;\n    m_minSinrDb = 0.0;\n    m_maxSinrDb = 20.0;\n    m_inputPath =\n        Singleton<SatEnvVariables>::Get()->GetDataPath() + \"/additional-input/linkresults/\";\n}\n\nvoid\nSatLinkResultsPlot::Run()\n{\n    RunDvbRcs2Qpsk();\n    RunDvbRcs2Psk8();\n    RunDvbRcs2Qam16();\n    RunDvbS2Qpsk();\n    RunDvbS2Psk8();\n    RunDvbS2Apsk16();\n    RunDvbS2Apsk32();\n}\n\nvoid\nSatLinkResultsPlot::RunDvbRcs2Qpsk()\n{\n    Ptr<SatLookUpTable> table1 = CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat2.txt\");\n    Ptr<SatLookUpTable> table2 = CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat3.txt\");\n    Ptr<SatLookUpTable> table3 = CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat4.txt\");\n    Ptr<SatLookUpTable> table4 = CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat5.txt\");\n    Ptr<SatLookUpTable> table5 = CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat6.txt\");\n    Ptr<SatLookUpTable> table6 = CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat7.txt\");\n    Ptr<SatLookUpTable> table7 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat13.txt\");\n    Ptr<SatLookUpTable> table8 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat14.txt\");\n    Ptr<SatLookUpTable> table9 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat15.txt\");\n    Ptr<SatLookUpTable> table10 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat16.txt\");\n    Ptr<SatLookUpTable> table11 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat17.txt\");\n\n    Gnuplot2dDataset dataset1 = GetGnuplotDataset(table1, \"Waveform 2: 112 bits, QPSK 1/3\");\n    Gnuplot2dDataset dataset2 = GetGnuplotDataset(table2, \"Waveform 3: 304 bits, QPSK 1/3\");\n    Gnuplot2dDataset dataset3 = GetGnuplotDataset(table3, \"Waveform 4: 472 bits, QPSK 1/2\");\n    Gnuplot2dDataset dataset4 = GetGnuplotDataset(table4, \"Waveform 5: 680 bits, QPSK 2/3\");\n    Gnuplot2dDataset dataset5 = GetGnuplotDataset(table5, \"Waveform 6: 768 bits, QPSK 3/4\");\n    Gnuplot2dDataset dataset6 = GetGnuplotDataset(table6, \"Waveform 7: 864 bits, QPSK 5/6\");\n    Gnuplot2dDataset dataset7 = GetGnuplotDataset(table7, \"Waveform 13: 984 bits, QPSK 1/3\");\n    Gnuplot2dDataset dataset8 = GetGnuplotDataset(table8, \"Waveform 14: 1504 bits, QPSK 1/2\");\n    Gnuplot2dDataset dataset9 = GetGnuplotDataset(table9, \"Waveform 15: 2112 bits, QPSK 2/3\");\n    Gnuplot2dDataset dataset10 = GetGnuplotDataset(table10, \"Waveform 16: 2384 bits, QPSK 3/4\");\n    Gnuplot2dDataset dataset11 = GetGnuplotDataset(table11, \"Waveform 17: 2664 bits, QPSK 5/6\");\n\n    Gnuplot plot = GetGnuplot(\"rcs2_qpsk\", \"Link Results for DVB-RCS2 with QPSK\");\n    plot.AddDataset(dataset1);\n    plot.AddDataset(dataset2);\n    plot.AddDataset(dataset3);\n    plot.AddDataset(dataset4);\n    plot.AddDataset(dataset5);\n    plot.AddDataset(dataset6);\n    plot.AddDataset(dataset7);\n    plot.AddDataset(dataset8);\n    plot.AddDataset(dataset9);\n    plot.AddDataset(dataset10);\n    plot.AddDataset(dataset11);\n\n    std::string plotFileName = \"rcs2_qpsk.plt\";\n    std::ofstream plotFile(plotFileName.c_str());\n    plot.GenerateOutput(plotFile);\n    plotFile.close();\n\n    std::cout << \"Output file written: \" << plotFileName << std::endl;\n\n} // end of void SatLinkResultsPlot::RunDvbRcs2Qpsk ()\n\nvoid\nSatLinkResultsPlot::RunDvbRcs2Psk8()\n{\n    Ptr<SatLookUpTable> table1 = CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat8.txt\");\n    Ptr<SatLookUpTable> table2 = CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat9.txt\");\n    Ptr<SatLookUpTable> table3 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat10.txt\");\n    Ptr<SatLookUpTable> table4 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat18.txt\");\n    Ptr<SatLookUpTable> table5 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat19.txt\");\n    Ptr<SatLookUpTable> table6 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat20.txt\");\n\n    Gnuplot2dDataset dataset1 = GetGnuplotDataset(table1, \"Waveform 8: 920 bits, 8PSK 2/3\");\n    Gnuplot2dDataset dataset2 = GetGnuplotDataset(table2, \"Waveform 9: 1040 bits, 8PSK 3/4\");\n    Gnuplot2dDataset dataset3 = GetGnuplotDataset(table3, \"Waveform 10: 1152 bits, 8PSK 5/6\");\n    Gnuplot2dDataset dataset4 = GetGnuplotDataset(table4, \"Waveform 18: 2840 bits, 8PSK 2/3\");\n    Gnuplot2dDataset dataset5 = GetGnuplotDataset(table5, \"Waveform 19: 3200 bits, 8PSK 3/4\");\n    Gnuplot2dDataset dataset6 = GetGnuplotDataset(table6, \"Waveform 20: 3552 bits, 8PSK 5/6\");\n\n    Gnuplot plot = GetGnuplot(\"rcs2_8psk\", \"Link Results for DVB-RCS2 with 8PSK\");\n    plot.AddDataset(dataset1);\n    plot.AddDataset(dataset2);\n    plot.AddDataset(dataset3);\n    plot.AddDataset(dataset4);\n    plot.AddDataset(dataset5);\n    plot.AddDataset(dataset6);\n\n    std::string plotFileName = \"rcs2_8psk.plt\";\n    std::ofstream plotFile(plotFileName.c_str());\n    plot.GenerateOutput(plotFile);\n    plotFile.close();\n\n    std::cout << \"Output file written: \" << plotFileName << std::endl;\n\n} // end of void SatLinkResultsPlot::RunDvbRcs2Psk8 ()\n\nvoid\nSatLinkResultsPlot::RunDvbRcs2Qam16()\n{\n    Ptr<SatLookUpTable> table1 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat11.txt\");\n    Ptr<SatLookUpTable> table2 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat12.txt\");\n    Ptr<SatLookUpTable> table3 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat21.txt\");\n    Ptr<SatLookUpTable> table4 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"rcs2_waveformat22.txt\");\n\n    Gnuplot2dDataset dataset1 = GetGnuplotDataset(table1, \"Waveform 11: 1400 bits, 16QAM 3/4\");\n    Gnuplot2dDataset dataset2 = GetGnuplotDataset(table2, \"Waveform 12: 1552 bits, 16QAM 5/6\");\n    Gnuplot2dDataset dataset3 = GetGnuplotDataset(table3, \"Waveform 21: 4312 bits, 16QAM 3/4\");\n    Gnuplot2dDataset dataset4 = GetGnuplotDataset(table4, \"Waveform 22: 4792 bits, 16QAM 5/6\");\n\n    Gnuplot plot = GetGnuplot(\"rcs2_16qam\", \"Link Results for DVB-RCS2 with 16QAM\");\n    plot.AddDataset(dataset1);\n    plot.AddDataset(dataset2);\n    plot.AddDataset(dataset3);\n    plot.AddDataset(dataset4);\n\n    std::string plotFileName = \"rcs2_16qam.plt\";\n    std::ofstream plotFile(plotFileName.c_str());\n    plot.GenerateOutput(plotFile);\n    plotFile.close();\n\n    std::cout << \"Output file written: \" << plotFileName << std::endl;\n\n} // end of void SatLinkResultsPlot::RunDvbRcs2Qam16 ()\n\nvoid\nSatLinkResultsPlot::RunDvbS2Qpsk()\n{\n    Ptr<SatLookUpTable> table1 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_qpsk_1_to_2.txt\");\n    Ptr<SatLookUpTable> table2 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_qpsk_2_to_3.txt\");\n    Ptr<SatLookUpTable> table3 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_qpsk_3_to_4.txt\");\n    Ptr<SatLookUpTable> table4 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_qpsk_3_to_5.txt\");\n    Ptr<SatLookUpTable> table5 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_qpsk_4_to_5.txt\");\n    Ptr<SatLookUpTable> table6 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_qpsk_5_to_6.txt\");\n    Ptr<SatLookUpTable> table7 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_qpsk_8_to_9.txt\");\n    Ptr<SatLookUpTable> table8 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_qpsk_9_to_10.txt\");\n\n    Gnuplot2dDataset dataset1 = GetGnuplotDataset(table1, \"QPSK 1/2\");\n    Gnuplot2dDataset dataset2 = GetGnuplotDataset(table2, \"QPSK 2/3\");\n    Gnuplot2dDataset dataset3 = GetGnuplotDataset(table3, \"QPSK 3/4\");\n    Gnuplot2dDataset dataset4 = GetGnuplotDataset(table4, \"QPSK 3/5\");\n    Gnuplot2dDataset dataset5 = GetGnuplotDataset(table5, \"QPSK 4/5\");\n    Gnuplot2dDataset dataset6 = GetGnuplotDataset(table6, \"QPSK 5/6\");\n    Gnuplot2dDataset dataset7 = GetGnuplotDataset(table7, \"QPSK 8/9\");\n    Gnuplot2dDataset dataset8 = GetGnuplotDataset(table8, \"QPSK 9/10\");\n\n    Gnuplot plot = GetGnuplot(\"s2_qpsk\", \"Link Results for DVB-S2 with QPSK\");\n    plot.AddDataset(dataset1);\n    plot.AddDataset(dataset2);\n    plot.AddDataset(dataset3);\n    plot.AddDataset(dataset4);\n    plot.AddDataset(dataset5);\n    plot.AddDataset(dataset6);\n    plot.AddDataset(dataset7);\n    plot.AddDataset(dataset8);\n\n    std::string plotFileName = \"s2_qpsk.plt\";\n    std::ofstream plotFile(plotFileName.c_str());\n    plot.GenerateOutput(plotFile);\n    plotFile.close();\n\n    std::cout << \"Output file written: \" << plotFileName << std::endl;\n\n} // end of void SatLinkResultsPlot::RunDvbS2Qpsk ()\n\nvoid\nSatLinkResultsPlot::RunDvbS2Psk8()\n{\n    Ptr<SatLookUpTable> table1 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_8psk_2_to_3.txt\");\n    Ptr<SatLookUpTable> table2 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_8psk_3_to_4.txt\");\n    Ptr<SatLookUpTable> table3 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_8psk_3_to_5.txt\");\n    Ptr<SatLookUpTable> table4 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_8psk_5_to_6.txt\");\n    Ptr<SatLookUpTable> table5 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_8psk_8_to_9.txt\");\n    Ptr<SatLookUpTable> table6 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_8psk_9_to_10.txt\");\n\n    Gnuplot2dDataset dataset1 = GetGnuplotDataset(table1, \"8PSK 2/3\");\n    Gnuplot2dDataset dataset2 = GetGnuplotDataset(table2, \"8PSK 3/4\");\n    Gnuplot2dDataset dataset3 = GetGnuplotDataset(table3, \"8PSK 3/5\");\n    Gnuplot2dDataset dataset4 = GetGnuplotDataset(table4, \"8PSK 5/6\");\n    Gnuplot2dDataset dataset5 = GetGnuplotDataset(table5, \"8PSK 8/9\");\n    Gnuplot2dDataset dataset6 = GetGnuplotDataset(table6, \"8PSK 9/10\");\n\n    Gnuplot plot = GetGnuplot(\"s2_8psk\", \"Link Results for DVB-S2 with 8PSK\");\n    plot.AddDataset(dataset1);\n    plot.AddDataset(dataset2);\n    plot.AddDataset(dataset3);\n    plot.AddDataset(dataset4);\n    plot.AddDataset(dataset5);\n    plot.AddDataset(dataset6);\n\n    std::string plotFileName = \"s2_8psk.plt\";\n    std::ofstream plotFile(plotFileName.c_str());\n    plot.GenerateOutput(plotFile);\n    plotFile.close();\n\n    std::cout << \"Output file written: \" << plotFileName << std::endl;\n\n} // end of void SatLinkResultsPlot::RunDvbS2Psk8 ()\n\nvoid\nSatLinkResultsPlot::RunDvbS2Apsk16()\n{\n    Ptr<SatLookUpTable> table1 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_16apsk_2_to_3.txt\");\n    Ptr<SatLookUpTable> table2 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_16apsk_3_to_4.txt\");\n    Ptr<SatLookUpTable> table3 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_16apsk_4_to_5.txt\");\n    Ptr<SatLookUpTable> table4 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_16apsk_5_to_6.txt\");\n    Ptr<SatLookUpTable> table5 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_16apsk_8_to_9.txt\");\n    Ptr<SatLookUpTable> table6 =\n        CreateObject<SatLookUpTable>(m_inputPath + \"s2_16apsk_9_to_10.txt\");\n\n    Gnuplot2dDataset dataset1 = GetGnuplotDataset(table1, \"16APSK 2/3\");\n    Gnuplot2dDataset dataset2 = GetGnuplotDataset(table2, \"16APSK 3/4\");\n    Gnuplot2dDataset dataset3 = GetGnuplotDataset(table3, \"16APSK 4/5\");\n    Gnuplot2dDataset dataset4 = GetGnuplotDataset(table4, \"16APSK 5/6\");\n    Gnuplot2dDataset dataset5 = GetGnuplotDataset(table5, \"16APSK 8/9\");\n    Gnuplot2dDataset dataset6 = GetGnuplotDataset(table6, \"16APSK 9/10\");\n\n    Gnuplot plot = GetGnuplot(\"s2_16apsk\", \"Link Results for DVB-S2 with 16APSK\");\n    plot.AddDataset(dataset1);\n    plot.AddDataset(dataset2);\n    plot.AddDataset(dataset3);\n    plot.AddDataset(dataset4);\n    plot.AddDataset(dataset5);\n    plot.AddDataset(dataset6);\n\n    std::string plotFileName = \"s2_16apsk.plt\";\n    std::ofstream plotFile(plotFileName.c_str());\n    plot.GenerateOutput(plotFile);\n    plotFile.close();\n\n    std::cout << \"Output file written: \" << plotFileName << std::endl;\n\n} // end of void SatLinkResultsPlot::RunDvbS2Apsk16 ()\n\nvoid\nSatLinkResultsPlot::RunDvbS2Apsk32()\n{\n    Ptr<SatLookUpTable> table1 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_32apsk_3_to_4.txt\");\n    Ptr<SatLookUpTable> table2 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_32apsk_4_to_5.txt\");\n    Ptr<SatLookUpTable> table3 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_32apsk_5_to_6.txt\");\n    Ptr<SatLookUpTable> table4 = CreateObject<SatLookUpTable>(m_inputPath + \"s2_32apsk_8_to_9.txt\");\n\n    Gnuplot2dDataset dataset1 = GetGnuplotDataset(table1, \"32APSK 3/4\");\n    Gnuplot2dDataset dataset2 = GetGnuplotDataset(table2, \"32APSK 4/5\");\n    Gnuplot2dDataset dataset3 = GetGnuplotDataset(table3, \"32APSK 5/6\");\n    Gnuplot2dDataset dataset4 = GetGnuplotDataset(table4, \"32APSK 8/9\");\n\n    Gnuplot plot = GetGnuplot(\"s2_32apsk\", \"Link Results for DVB-S2 with 32APSK\");\n    plot.AddDataset(dataset1);\n    plot.AddDataset(dataset2);\n    plot.AddDataset(dataset3);\n    plot.AddDataset(dataset4);\n\n    std::string plotFileName = \"s2_32apsk.plt\";\n    std::ofstream plotFile(plotFileName.c_str());\n    plot.GenerateOutput(plotFile);\n    plotFile.close();\n\n    std::cout << \"Output file written: \" << plotFileName << std::endl;\n\n} // end of void SatLinkResultsPlot::RunDvbS2Apsk32 ()\n\nGnuplot2dDataset\nSatLinkResultsPlot::GetGnuplotDataset(Ptr<SatLookUpTable> table, std::string title)\n{\n    Gnuplot2dDataset ret;\n    ret.SetTitle(title);\n    ret.SetStyle(Gnuplot2dDataset::LINES);\n\n    bool writeFlag = false;\n    double bler;\n\n    for (double sinr = m_minSinrDb; sinr < m_maxSinrDb; sinr += m_resolutionDb)\n    {\n        bler = table->GetBler(sinr);\n\n        if (!writeFlag)\n        {\n            if (bler < 1)\n            {\n                // first time error rate is not 100%\n                writeFlag = true;                    // start writing the plot\n                ret.Add(sinr - m_resolutionDb, 1.0); // also add the previous point\n                ret.Add(sinr, bler);\n            }\n        }\n        else\n        {\n            if (bler < 1e-10)\n            {\n                // close enough to 0% error rate\n                writeFlag = false;  // stop writing the plot\n                sinr = m_maxSinrDb; // exit for\n            }\n            else\n            {\n                ret.Add(sinr, bler);\n            }\n        }\n\n    } // end of for (sinr = m_minSinrDb; sinr < m_maxSinrDb; sinr += m_resolutionDb)\n\n    return ret;\n\n} // end of GetGnuplotDataset\n\nGnuplot\nSatLinkResultsPlot::GetGnuplot(std::string outputName, std::string title)\n{\n    Gnuplot ret(outputName + \".png\");\n    ret.SetTitle(title);\n    ret.SetTerminal(\"png\");\n    ret.SetLegend(\"SINR (in dB)\", \"BLER\");\n    ret.AppendExtra(\"set key bottom left\");\n    ret.AppendExtra(\"set logscale y 10\");\n    ret.AppendExtra(\"set ytics 10\");\n    ret.AppendExtra(\"set mxtics 5\");\n    ret.AppendExtra(\"set grid xtics mxtics ytics\");\n    // TODO probably better if the X axis and its labels are on top and maybe emphasize major grid\n    // lines more than minor ones\n    return ret;\n}\n\n} // end of namespace ns3\n\nint\nmain(int argc, char* argv[])\n{\n    ns3::Ptr<ns3::SatLinkResultsPlot> stub;\n    stub = ns3::Create<ns3::SatLinkResultsPlot>();\n    stub->Run();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-list-position-ext-fading-example.cc",
      "code": "/* -*-  Mode: C++; c-file-style: \"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Sami Rantanen <sami.rantanen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-list-position-ext-fading-example.cc\n * \\ingroup satellite\n *\n * \\brief  List position external fading example demonstrates how to set user defined (list)\n *         positions with external fading. The example is useful when new list positions and\n *         external fading trace sources are taken into use.\n *\n *         The default values for list position (UT positions) and external fading trace are\n *         set before command line parsing, in order to replace them without re-compiling the\n * example.\n *\n *         Some parameter can be set as command line arguments.\n *         To see help for user arguments:\n *         execute command -> ./waf --run \"sat-ext-fading-example --PrintHelp\"\n *\n *         Example sends packets from GW connected user to every UT users and\n *         from every UT users to GW connected user.\n *\n *         Information of the created UTs and link budget info for every received packet\n *         are printed as log info.\n *\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-list-position-ext-fading-example\");\n\n// callback called when packet is received by phy RX carrier\nstatic void\nLinkBudgetTraceCb(std::string context,\n                  Ptr<SatSignalParameters> params,\n                  Mac48Address ownAdd,\n                  Mac48Address destAdd,\n                  double ifPower,\n                  double cSinr)\n{\n    // print only unicast message to prevent printing control messages like TBTP messages\n    if (!destAdd.IsBroadcast())\n    {\n        NS_LOG_INFO(\"\" << params->m_channelType << \" \" << ownAdd << \" \" << destAdd << \" \"\n                       << params->m_beamId << \" \" << SatUtils::LinearToDb(params->GetSinr()) << \" \"\n                       << SatUtils::LinearToDb(cSinr));\n    }\n}\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t utCount = 4;\n    uint32_t usersPerUt = 1;\n    uint32_t beamId = 1;\n    bool checkBeam = false;\n    std::string extUtPositions = Singleton<SatEnvVariables>::Get()->LocateDataDirectory() +\n                                 \"/additional-input/utpositions/BeamId-1_256_UT_Positions.txt\";\n\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-list-position-external-fading\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    // read command line parameters can be given by user\n    CommandLine cmd;\n    cmd.AddValue(\"beamId\", \"The beam ID to be used.\", beamId);\n    cmd.AddValue(\"checkBeam\",\n                 \"Check that given beam is the best according in the configured positions.\",\n                 checkBeam);\n    cmd.AddValue(\"utCount\", \"Number of the UTs.\", utCount);\n    cmd.AddValue(\"usersPerUt\", \"Users per UT.\", usersPerUt);\n    cmd.AddValue(\"externalUtPositionFile\", \"UT position input file (in data/)\", extUtPositions);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // Set default values for some attributes for position setting and external fading trace\n    // This done before command line parsing in order to override them if needed\n\n    simulationHelper->SetUserCountPerUt(usersPerUt);\n    simulationHelper->SetUtCountPerBeam(utCount);\n    simulationHelper->SetBeamSet({beamId});\n    simulationHelper->SetSimulationTime(Seconds(1.1));\n\n    // Enable default fading traces\n    simulationHelper->EnableExternalFadingInputTrace();\n\n    // Enable UT positions from input file\n    simulationHelper->EnableUtListPositionsFromInputFile(extUtPositions, checkBeam);\n\n    // enable info logs\n    LogComponentEnable(\"sat-list-position-ext-fading-example\", LOG_LEVEL_INFO);\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system. Note, currently the satellite module supports\n    // only one reference system, which is named as \"Scenario72\". The string is utilized\n    // in mapping the scenario to the needed reference system configuration files. Arbitrary\n    // scenario name results in fatal error.\n    Ptr<SatHelper> helper = simulationHelper->CreateSatScenario();\n\n    // set callback traces where we want results out\n    Config::Connect(\"/NodeList/*/DeviceList/*/SatPhy/PhyRx/RxCarrierList/*/LinkBudgetTrace\",\n                    MakeCallback(&LinkBudgetTraceCb));\n\n    Config::Connect(\"/NodeList/*/DeviceList/*/UserPhy/*/PhyRx/RxCarrierList/*/LinkBudgetTrace\",\n                    MakeCallback(&LinkBudgetTraceCb));\n\n    Config::Connect(\"/NodeList/*/DeviceList/*/FeederPhy/*/PhyRx/RxCarrierList/*/LinkBudgetTrace\",\n                    MakeCallback(&LinkBudgetTraceCb));\n\n    // Install CBR traffic model\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(100),\n        512,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(0.1),\n        Seconds(0.25),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(100),\n        512,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(0.1),\n        Seconds(0.25),\n        Seconds(0));\n\n    NS_LOG_INFO(\"--- List Position External Fading Example ---\");\n    NS_LOG_INFO(\"UT info (Beam ID, UT ID, Latitude, Longitude, Altitude + addresses\");\n\n    // print UT info\n    NS_LOG_INFO(helper->GetBeamHelper()->GetUtInfo());\n    NS_LOG_INFO(\"Link results (Time, Channel type, Own address, Dest. address, Beam ID, SINR, \"\n                \"Composite SINR) :\");\n    // results are printed out in callback (PacketTraceCb)\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-log-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/core-module.h\"\n#include \"ns3/satellite-module.h\"\n\n#include <stdint.h>\n\nusing namespace ns3;\n\n/**\n * \\file sat-log-example.cc\n * \\ingroup satellite\n *\n * \\brief Example for message log class.\n *\n * The format for messages is (type, custom file tag, message). Custom file tag\n * is in effect only with LOG_CUSTOM. With other types it does not matter and can\n * be left empty. It is also possible to define a simulation specific tag, which\n * is useful with simulation campaigns for avoiding log file overwrite.\n *\n * The class specifies the following log types:\n * LOG_GENERIC - for all messages\n * LOG_INFO - for info messages\n * LOG_WARNING - for warning messages\n * LOG_ERROR - for error messages\n * LOG_CUSTOM - for custom messages specified by the second parameter\n *\n * The output files are located in contrib/satellite/data/logs folder. The output file\n * format is the following: log<type><custom file tag><simulation tag>\n *\n * With (LOG_CUSTOM, \"_exampleTag\", \"Example message for custom log\") and simulation tag\n * \"_ut30_beam1\" the file log_exampleTag_ut30_beam1 would contain the message\n * \"Example message for custom log\".\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-log-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    LogComponentEnable(\"sat-log-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatLog\", LOG_LEVEL_INFO);\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationCampaignName\", StringValue(\"example-log\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationTag\", StringValue(\"\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    Singleton<SatLog>::Get()->AddToLog(SatLog::LOG_GENERIC,\n                                       \"\",\n                                       \"Logging for generic messages started\");\n    Singleton<SatLog>::Get()->AddToLog(SatLog::LOG_INFO, \"\", \"Logging for info messages started\");\n    Singleton<SatLog>::Get()->AddToLog(SatLog::LOG_WARNING,\n                                       \"\",\n                                       \"Logging for warning messages started\");\n    Singleton<SatLog>::Get()->AddToLog(SatLog::LOG_ERROR, \"\", \"Logging for error messages started\");\n    Singleton<SatLog>::Get()->AddToLog(SatLog::LOG_CUSTOM,\n                                       \"_customTag\",\n                                       \"Logging for custom messages started\");\n\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-logon-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-logon-example.cc\n * \\ingroup satellite *\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-logon-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId = 1;\n    uint32_t endUsersPerUt = 1;\n    uint32_t utsPerBeam = 10;\n\n    uint32_t packetSize = 512;\n    std::string interval = \"10ms\";\n\n    double simLength = 30.0;\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-logon\");\n    simulationHelper->SetSimulationTime(Seconds(simLength));\n    simulationHelper->EnableProgressLogs();\n\n    // Set beam ID\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n\n    // Set 2 RA frames including one for logon\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\",\n                       EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_0));\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_SLOTTED_ALOHA));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_RandomAccessFrame\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame1_RandomAccessFrame\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame1_LogonFrame\", BooleanValue(true));\n\n    Config::SetDefault(\"ns3::SatUtMac::WindowInitLogon\", TimeValue(Seconds(20)));\n    Config::SetDefault(\"ns3::SatUtMac::MaxWaitingTimeLogonResponse\", TimeValue(Seconds(1)));\n\n    // Disable DA\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(0.1),\n        Seconds(simLength),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(0.1),\n        Seconds(simLength),\n        Seconds(0));\n\n    // To store attributes to file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n    simulationHelper->StoreAttributesToFile(\"output-attributes.xml\");\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-loo-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/core-module.h\"\n#include \"ns3/satellite-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-loo-example.cc\n * \\ingroup satellite\n *\n * \\brief Example for Loo's model fader class. Demonstrates the functionality\n * of the Loo's model fader used by the Markov-fading. The example creates\n * three faders with different parameters, switches the faders in time and\n * outputs the fading values.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-loo-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    /// Enable info logs\n    LogComponentEnable(\"sat-loo-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatLooModel\", LOG_LEVEL_INFO);\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationCampaignName\", StringValue(\"example-loo\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationTag\", StringValue(\"\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Load default configuration\n    Ptr<SatLooConf> looConf = CreateObject<SatLooConf>();\n\n    /// Create faders\n    Ptr<SatLooModel> looFaderLineOfSight = CreateObject<SatLooModel>(looConf, 3, 0, 0);\n    Ptr<SatLooModel> looFaderLightShadowing = CreateObject<SatLooModel>(looConf, 3, 0, 1);\n    Ptr<SatLooModel> looFaderHeavyShadowing = CreateObject<SatLooModel>(looConf, 3, 0, 2);\n\n    /// Run simulation\n    for (uint32_t i = 0; i < 1000; i++)\n    {\n        Simulator::Schedule(Time(300000 + i * 500000),\n                            &SatLooModel::GetChannelGainDb,\n                            looFaderLineOfSight);\n        Simulator::Schedule(Time(500000 + i * 500000),\n                            &SatLooModel::GetChannelGainDb,\n                            looFaderLightShadowing);\n        Simulator::Schedule(Time(700000 + i * 500000),\n                            &SatLooModel::GetChannelGainDb,\n                            looFaderHeavyShadowing);\n    }\n\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-lora-constellation-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-lora-constellation-example.cc\n * \\ingroup satellite\n *\n * \\brief This file allows to create a scenario with Lora configuration\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-lora-constellation-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Variables\n    std::string beams = \"30 43\";\n    uint32_t nbGwUser = 1;\n    uint32_t nbUtsPerBeam = 5;\n    uint32_t nbEndUsersPerUt = 1;\n\n    Time appStartTime = Seconds(0.001);\n    Time simLength = Seconds(15.0);\n\n    uint32_t packetSize = 24;\n    Time loraInterval = Seconds(10);\n    std::string interval = \"10s\";\n\n    double frameAllocatedBandwidthHz = 15000;\n    double frameCarrierAllocatedBandwidthHz = 15000;\n    double frameCarrierRollOff = 0.22;\n    double frameCarrierSpacing = 0;\n    uint32_t frameSpreadingFactor = 256;\n\n    bool interferenceModePerPacket = true;\n    bool displayTraces = true;\n\n    Time firstWindowDelay = MilliSeconds(1500);\n    Time secondWindowDelay = Seconds(2);\n    Time firstWindowDuration = MilliSeconds(400);\n    Time secondWindowDuration = MilliSeconds(500);\n    Time firstWindowAnswerDelay = Seconds(1);\n    Time secondWindowAnswerDelay = Seconds(2);\n\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"example-lora-constellation\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"modelPP\", \"interferenceModePerPacket\", interferenceModePerPacket);\n    cmd.AddValue(\"traces\", \"displayTraces\", displayTraces);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", nbUtsPerBeam);\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"packetSize\", \"Constant packet size in bytes\", packetSize);\n    cmd.AddValue(\"loraInterval\",\n                 \"Interval between two transmissions for each UT in seconds\",\n                 loraInterval);\n    cmd.AddValue(\"frameAllocatedBandwidthHz\",\n                 \"Allocated bandwidth in Hz\",\n                 frameAllocatedBandwidthHz);\n    cmd.AddValue(\"frameCarrierAllocatedBandwidthHz\",\n                 \"Allocated carrier bandwidth in Hz\",\n                 frameCarrierAllocatedBandwidthHz);\n    cmd.AddValue(\"frameCarrierRollOff\", \"Roll-off factor\", frameCarrierRollOff);\n    cmd.AddValue(\"frameCarrierSpacing\", \"Carrier spacing factor\", frameCarrierSpacing);\n    cmd.AddValue(\"frameSpreadingFactor\", \"Carrier spreading factor\", frameSpreadingFactor);\n\n    cmd.AddValue(\"firstWindowDelay\",\n                 \"Delay between end of transmission and opening of first window on End Device\",\n                 firstWindowDelay);\n    cmd.AddValue(\"secondWindowDelay\",\n                 \"Delay between end of transmission and opening of second window on End Device\",\n                 secondWindowDelay);\n    cmd.AddValue(\"firstWindowDuration\", \"First window duration on End Device\", firstWindowDuration);\n    cmd.AddValue(\"secondWindowDuration\",\n                 \"Second window duration on End Device\",\n                 secondWindowDuration);\n    cmd.AddValue(\"firstWindowAnswerDelay\",\n                 \"Delay between end of reception and start of ack on first window on Gateway\",\n                 firstWindowAnswerDelay);\n    cmd.AddValue(\"secondWindowAnswerDelay\",\n                 \"Delay between end of reception and start of ack on second window on Gateway\",\n                 secondWindowAnswerDelay);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n\n    // Enable Lora\n    Config::SetDefault(\"ns3::LorawanMacEndDevice::DataRate\", UintegerValue(5));\n    Config::SetDefault(\"ns3::LorawanMacEndDevice::MType\",\n                       EnumValue(LorawanMacHeader::CONFIRMED_DATA_UP));\n\n    // Config::SetDefault (\"ns3::SatLoraConf::Standard\", EnumValue (SatLoraConf::EU863_870));\n    Config::SetDefault(\"ns3::SatLoraConf::Standard\", EnumValue(SatLoraConf::SATELLITE));\n\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::FirstWindowDelay\",\n                       TimeValue(firstWindowDelay));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::SecondWindowDelay\",\n                       TimeValue(secondWindowDelay));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::FirstWindowDuration\",\n                       TimeValue(firstWindowDuration));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::SecondWindowDuration\",\n                       TimeValue(secondWindowDuration));\n    Config::SetDefault(\"ns3::LoraNetworkScheduler::FirstWindowAnswerDelay\",\n                       TimeValue(firstWindowAnswerDelay));\n    Config::SetDefault(\"ns3::LoraNetworkScheduler::SecondWindowAnswerDelay\",\n                       TimeValue(secondWindowAnswerDelay));\n\n    // Defaults\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Superframe configuration\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\",\n                       EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::FrameConfigType\",\n                       EnumValue(SatSuperframeConf::CONFIG_TYPE_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_AllocatedBandwidthHz\",\n                       DoubleValue(frameAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierAllocatedBandwidthHz\",\n                       DoubleValue(frameCarrierAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierRollOff\",\n                       DoubleValue(frameCarrierRollOff));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierSpacing\",\n                       DoubleValue(frameCarrierSpacing));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_SpreadingFactor\",\n                       UintegerValue(frameSpreadingFactor));\n\n    // CRDSA only\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaServiceCount\", UintegerValue(4));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Configure RA\n    Config::SetDefault(\"ns3::SatOrbiterHelper::FwdLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::RtnLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue(SatEnums::RA_MODEL_ESSA));\n    if (interferenceModePerPacket)\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                           EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    }\n    else\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                           EnumValue(SatPhyRxCarrierConf::IF_PER_FRAGMENT));\n    }\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceEliminationModel\",\n                       EnumValue(SatPhyRxCarrierConf::SIC_RESIDUAL));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n    Config::SetDefault(\"ns3::SatBeamHelper::ReturnLinkLinkResults\", EnumValue(SatEnums::LR_LORA));\n\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDuration\", StringValue(\"600ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowStep\", StringValue(\"200ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDelay\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::FirstWindow\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowSICIterations\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::SpreadingFactor\", UintegerValue(1));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::DetectionThreshold\", DoubleValue(0));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::EnableSIC\", BooleanValue(false));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(50));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.99));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_SlottedAlohaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_CrdsaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_EssaAllowed\", BooleanValue(true));\n\n    // Traffics\n    simulationHelper->SetSimulationTime(simLength);\n\n    simulationHelper->SetGwUserCount(nbGwUser);\n    simulationHelper->SetUtCountPerBeam(nbUtsPerBeam);\n    simulationHelper->SetUserCountPerUt(nbEndUsersPerUt);\n    simulationHelper->SetBeams(beams);\n\n    simulationHelper->LoadScenario(\"constellation-eutelsat-geo-2-sats-isls-lora\");\n\n    simulationHelper->CreateSatScenario();\n\n    /*simulationHelper->GetTrafficHelper()->AddLoraCbrTraffic(\n        loraInterval,\n        packetSize,\n        Singleton<SatTopology>::Get()->GetGwUserNodes(),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength,\n        Seconds(1));*/\n\n    simulationHelper->GetTrafficHelper()->AddLoraPeriodicTraffic(\n        loraInterval,\n        packetSize,\n        Singleton<SatTopology>::Get()->GetUtNodes(),\n        appStartTime,\n        simLength,\n        Seconds(1));\n\n    // Outputs\n    simulationHelper->EnableProgressLogs();\n\n    std::string outputPath = Singleton<SatEnvVariables>::Get()->LocateDirectory(\n        \"contrib/satellite/data/sims/example-lora-constellation\");\n    Config::SetDefault(\"ns3::ConfigStore::Filename\",\n                       StringValue(outputPath + \"/output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    if (displayTraces)\n    {\n        Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerSatFwdFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerSatFwdFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerSatRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerSatRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerSatFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerSatFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerSatRtnUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerSatRtnUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFwdAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    }\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n\n} // end of `int main (int argc, char *argv[])`\n"
    },
    {
      "file_path": "examples/sat-lora-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-lora-example.cc\n * \\ingroup satellite\n *\n * \\brief This file allows to create a scenario with Lora configuration\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-lora-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Variables\n    std::string beams = \"3 4 5 6\";\n    // std::string beams = \"8\";\n    uint32_t nbGwUser = 1;\n    uint32_t nbUtsPerBeam = 5;\n    uint32_t nbEndUsersPerUt = 1;\n\n    Time appStartTime = Seconds(0.001);\n    Time simLength = Seconds(15.0);\n\n    uint32_t packetSize = 24;\n    Time loraInterval = Seconds(10);\n    std::string interval = \"10s\";\n\n    double frameAllocatedBandwidthHz = 15000;\n    double frameCarrierAllocatedBandwidthHz = 15000;\n    double frameCarrierRollOff = 0.22;\n    double frameCarrierSpacing = 0;\n    uint32_t frameSpreadingFactor = 256;\n\n    bool interferenceModePerPacket = true;\n    bool displayTraces = true;\n\n    Time firstWindowDelay = MilliSeconds(1500);\n    Time secondWindowDelay = Seconds(2);\n    Time firstWindowDuration = MilliSeconds(400);\n    Time secondWindowDuration = MilliSeconds(400);\n    Time firstWindowAnswerDelay = Seconds(1);\n    Time secondWindowAnswerDelay = Seconds(2);\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-lora\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"modelPP\", \"interferenceModePerPacket\", interferenceModePerPacket);\n    cmd.AddValue(\"traces\", \"displayTraces\", displayTraces);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", nbUtsPerBeam);\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"packetSize\", \"Constant packet size in bytes\", packetSize);\n    cmd.AddValue(\"loraInterval\",\n                 \"Interval between two transmissions for each UT in seconds\",\n                 loraInterval);\n    cmd.AddValue(\"frameAllocatedBandwidthHz\",\n                 \"Allocated bandwidth in Hz\",\n                 frameAllocatedBandwidthHz);\n    cmd.AddValue(\"frameCarrierAllocatedBandwidthHz\",\n                 \"Allocated carrier bandwidth in Hz\",\n                 frameCarrierAllocatedBandwidthHz);\n    cmd.AddValue(\"frameCarrierRollOff\", \"Roll-off factor\", frameCarrierRollOff);\n    cmd.AddValue(\"frameCarrierSpacing\", \"Carrier spacing factor\", frameCarrierSpacing);\n    cmd.AddValue(\"frameSpreadingFactor\", \"Carrier spreading factor\", frameSpreadingFactor);\n\n    cmd.AddValue(\"firstWindowDelay\",\n                 \"Delay between end of transmission and opening of first window on End Device\",\n                 firstWindowDelay);\n    cmd.AddValue(\"secondWindowDelay\",\n                 \"Delay between end of transmission and opening of second window on End Device\",\n                 secondWindowDelay);\n    cmd.AddValue(\"firstWindowDuration\", \"First window duration on End Device\", firstWindowDuration);\n    cmd.AddValue(\"secondWindowDuration\",\n                 \"Second window duration on End Device\",\n                 secondWindowDuration);\n    cmd.AddValue(\"firstWindowAnswerDelay\",\n                 \"Delay between end of reception and start of ack on first window on Gateway\",\n                 firstWindowAnswerDelay);\n    cmd.AddValue(\"secondWindowAnswerDelay\",\n                 \"Delay between end of reception and start of ack on second window on Gateway\",\n                 secondWindowAnswerDelay);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::TRANSPARENT));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::TRANSPARENT));\n\n    // Enable Lora\n    Config::SetDefault(\"ns3::LorawanMacEndDevice::DataRate\", UintegerValue(5));\n    Config::SetDefault(\"ns3::LorawanMacEndDevice::MType\",\n                       EnumValue(LorawanMacHeader::CONFIRMED_DATA_UP));\n\n    // Config::SetDefault (\"ns3::SatLoraConf::Standard\", EnumValue (SatLoraConf::EU863_870));\n    Config::SetDefault(\"ns3::SatLoraConf::Standard\", EnumValue(SatLoraConf::SATELLITE));\n\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::FirstWindowDelay\",\n                       TimeValue(firstWindowDelay));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::SecondWindowDelay\",\n                       TimeValue(secondWindowDelay));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::FirstWindowDuration\",\n                       TimeValue(firstWindowDuration));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::SecondWindowDuration\",\n                       TimeValue(secondWindowDuration));\n    Config::SetDefault(\"ns3::LoraNetworkScheduler::FirstWindowAnswerDelay\",\n                       TimeValue(firstWindowAnswerDelay));\n    Config::SetDefault(\"ns3::LoraNetworkScheduler::SecondWindowAnswerDelay\",\n                       TimeValue(secondWindowAnswerDelay));\n\n    // Defaults\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Superframe configuration\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\",\n                       EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::FrameConfigType\",\n                       EnumValue(SatSuperframeConf::CONFIG_TYPE_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_AllocatedBandwidthHz\",\n                       DoubleValue(frameAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierAllocatedBandwidthHz\",\n                       DoubleValue(frameCarrierAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierRollOff\",\n                       DoubleValue(frameCarrierRollOff));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierSpacing\",\n                       DoubleValue(frameCarrierSpacing));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_SpreadingFactor\",\n                       UintegerValue(frameSpreadingFactor));\n\n    // CRDSA only\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaServiceCount\", UintegerValue(4));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Configure RA\n    Config::SetDefault(\"ns3::SatOrbiterHelper::FwdLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::RtnLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue(SatEnums::RA_MODEL_ESSA));\n    if (interferenceModePerPacket)\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                           EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    }\n    else\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                           EnumValue(SatPhyRxCarrierConf::IF_PER_FRAGMENT));\n    }\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceEliminationModel\",\n                       EnumValue(SatPhyRxCarrierConf::SIC_RESIDUAL));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n    Config::SetDefault(\"ns3::SatBeamHelper::ReturnLinkLinkResults\", EnumValue(SatEnums::LR_LORA));\n\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDuration\", StringValue(\"600ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowStep\", StringValue(\"200ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDelay\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::FirstWindow\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowSICIterations\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::SpreadingFactor\", UintegerValue(1));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::DetectionThreshold\", DoubleValue(0));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::EnableSIC\", BooleanValue(false));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(50));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.99));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_SlottedAlohaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_CrdsaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_EssaAllowed\", BooleanValue(true));\n\n    // Traffics\n    simulationHelper->SetSimulationTime(simLength);\n\n    simulationHelper->SetGwUserCount(nbGwUser);\n    simulationHelper->SetUtCountPerBeam(nbUtsPerBeam);\n    simulationHelper->SetUserCountPerUt(nbEndUsersPerUt);\n    simulationHelper->SetBeams(beams);\n\n    simulationHelper->LoadScenario(\"geo-33E-lora\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddLoraCbrTraffic(\n        loraInterval,\n        packetSize,\n        Singleton<SatTopology>::Get()->GetGwUserNodes(),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength,\n        Seconds(1));\n\n    /*simulationHelper->GetTrafficHelper()->AddLoraPeriodicTraffic(loraInterval,\n                                                                 packetSize,\n                                                                 Singleton<SatTopology>::Get()->GetUtNodes(),\n                                                                 appStartTime,\n                                                                 simLength,\n                                                                 Seconds(1));*/\n\n    // Outputs\n    simulationHelper->EnableProgressLogs();\n\n    std::string outputPath = Singleton<SatEnvVariables>::Get()->LocateDirectory(\n        \"contrib/satellite/data/sims/example-lora\");\n    Config::SetDefault(\"ns3::ConfigStore::Filename\",\n                       StringValue(outputPath + \"/output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    if (displayTraces)\n    {\n        Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtFwdAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    }\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n\n} // end of `int main (int argc, char *argv[])`\n"
    },
    {
      "file_path": "examples/sat-lora-handover-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien TAURAN <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-lora-handover-example.cc\n * \\ingroup satellite\n *\n * \\brief  Test handover for both GW and UT when using regenerative LORA\n *\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-lora-handover-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    Time appStartTime = Seconds(0.001);\n    Time simLength = Seconds(100);\n\n    uint32_t packetSize = 24;\n    Time loraInterval = Seconds(10);\n    std::string interval = \"10s\";\n\n    double frameAllocatedBandwidthHz = 15000;\n    double frameCarrierAllocatedBandwidthHz = 15000;\n    double frameCarrierRollOff = 0.22;\n    double frameCarrierSpacing = 0;\n    uint32_t frameSpreadingFactor = 256;\n\n    Time firstWindowDelay = MilliSeconds(1000);\n    Time secondWindowDelay = Seconds(2);\n    Time firstWindowDuration = MilliSeconds(900);\n    Time secondWindowDuration = MilliSeconds(400);\n    Time firstWindowAnswerDelay = Seconds(1);\n    Time secondWindowAnswerDelay = Seconds(2);\n\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"example-lora-handover\");\n\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n\n    // Enable Lora\n    Config::SetDefault(\"ns3::LorawanMacEndDevice::DataRate\", UintegerValue(5));\n    Config::SetDefault(\"ns3::LorawanMacEndDevice::MType\",\n                       EnumValue(LorawanMacHeader::CONFIRMED_DATA_UP));\n\n    // Config::SetDefault (\"ns3::SatLoraConf::Standard\", EnumValue (SatLoraConf::EU863_870));\n    Config::SetDefault(\"ns3::SatLoraConf::Standard\", EnumValue(SatLoraConf::SATELLITE));\n\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::FirstWindowDelay\",\n                       TimeValue(firstWindowDelay));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::SecondWindowDelay\",\n                       TimeValue(secondWindowDelay));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::FirstWindowDuration\",\n                       TimeValue(firstWindowDuration));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::SecondWindowDuration\",\n                       TimeValue(secondWindowDuration));\n    Config::SetDefault(\"ns3::LoraNetworkScheduler::FirstWindowAnswerDelay\",\n                       TimeValue(firstWindowAnswerDelay));\n    Config::SetDefault(\"ns3::LoraNetworkScheduler::SecondWindowAnswerDelay\",\n                       TimeValue(secondWindowAnswerDelay));\n\n    // Defaults\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Superframe configuration\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\",\n                       EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::FrameConfigType\",\n                       EnumValue(SatSuperframeConf::CONFIG_TYPE_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_AllocatedBandwidthHz\",\n                       DoubleValue(frameAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierAllocatedBandwidthHz\",\n                       DoubleValue(frameCarrierAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierRollOff\",\n                       DoubleValue(frameCarrierRollOff));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierSpacing\",\n                       DoubleValue(frameCarrierSpacing));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_SpreadingFactor\",\n                       UintegerValue(frameSpreadingFactor));\n\n    // CRDSA only\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaServiceCount\", UintegerValue(4));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Configure RA\n    Config::SetDefault(\"ns3::SatOrbiterHelper::FwdLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::RtnLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue(SatEnums::RA_MODEL_ESSA));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceEliminationModel\",\n                       EnumValue(SatPhyRxCarrierConf::SIC_RESIDUAL));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n    Config::SetDefault(\"ns3::SatBeamHelper::ReturnLinkLinkResults\", EnumValue(SatEnums::LR_LORA));\n\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDuration\", StringValue(\"600ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowStep\", StringValue(\"200ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDelay\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::FirstWindow\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowSICIterations\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::SpreadingFactor\", UintegerValue(1));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::DetectionThreshold\", DoubleValue(0));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::EnableSIC\", BooleanValue(false));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(50));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.99));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_SlottedAlohaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_CrdsaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_EssaAllowed\", BooleanValue(true));\n\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n\n    Config::SetDefault(\"ns3::SatHelper::HandoversEnabled\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHandoverModule::NumberClosestSats\", UintegerValue(2));\n\n    Config::SetDefault(\"ns3::SatGwMac::DisableSchedulingIfNoDeviceConnected\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatOrbiterMac::DisableSchedulingIfNoDeviceConnected\",\n                       BooleanValue(true));\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    Ptr<SimulationHelperConf> simulationConf = CreateObject<SimulationHelperConf>();\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetGwUserCount(1);\n    simulationHelper->SetUserCountPerUt(1);\n    std::set<uint32_t> beamSetAll = {1,  2,  3,  4,  5,  6,  7,  8,  9,  10, 11, 12, 13, 14, 15,\n                                     16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,\n                                     31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45,\n                                     46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n                                     61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72};\n    simulationHelper->SetBeamSet(beamSetAll);\n    simulationHelper->SetUserCountPerMobileUt(simulationConf->m_utMobileUserCount);\n\n    simulationHelper->LoadScenario(\"constellation-leo-2-satellites-lora\");\n\n    simulationHelper->CreateSatScenario(SatHelper::NONE);\n\n    simulationHelper->GetTrafficHelper()->AddLoraCbrTraffic(\n        loraInterval,\n        packetSize,\n        Singleton<SatTopology>::Get()->GetGwUserNode(0),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength,\n        Seconds(3));\n\n    /*simulationHelper->GetTrafficHelper()->AddLoraPeriodicTraffic(\n        loraInterval,\n        packetSize,\n        Singleton<SatTopology>::Get()->GetUtNodes(),\n        appStartTime,\n        simLength,\n        Seconds(3));*/\n\n    // Outputs\n    std::string outputPath = Singleton<SatEnvVariables>::Get()->LocateDirectory(\n        \"contrib/satellite/data/sims/example-lora-handover\");\n    Config::SetDefault(\"ns3::ConfigStore::Filename\",\n                       StringValue(outputPath + \"/output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtFwdAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-lora-regenerative-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-lora-regenerative-example.cc\n * \\ingroup satellite\n *\n * \\brief This file allows to create a scenario with Lora configuration\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-lora-regenerative-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Variables\n    std::string beams = \"3 4 5 6\";\n    // std::string beams = \"8\";\n    uint32_t nbGwUser = 1;\n    uint32_t nbUtsPerBeam = 5;\n    uint32_t nbEndUsersPerUt = 1;\n\n    Time appStartTime = Seconds(0.001);\n    Time simLength = Seconds(15.0);\n\n    uint32_t packetSize = 24;\n    Time loraInterval = Seconds(10);\n    std::string interval = \"10s\";\n\n    double frameAllocatedBandwidthHz = 15000;\n    double frameCarrierAllocatedBandwidthHz = 15000;\n    double frameCarrierRollOff = 0.22;\n    double frameCarrierSpacing = 0;\n    uint32_t frameSpreadingFactor = 256;\n\n    bool interferenceModePerPacket = true;\n    bool displayTraces = true;\n\n    Time firstWindowDelay = MilliSeconds(1500);\n    Time secondWindowDelay = Seconds(2);\n    Time firstWindowDuration = MilliSeconds(400);\n    Time secondWindowDuration = MilliSeconds(500);\n    Time firstWindowAnswerDelay = Seconds(1);\n    Time secondWindowAnswerDelay = Seconds(2);\n\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"example-lora-regenerative\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"modelPP\", \"interferenceModePerPacket\", interferenceModePerPacket);\n    cmd.AddValue(\"traces\", \"displayTraces\", displayTraces);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", nbUtsPerBeam);\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"packetSize\", \"Constant packet size in bytes\", packetSize);\n    cmd.AddValue(\"loraInterval\",\n                 \"Interval between two transmissions for each UT in seconds\",\n                 loraInterval);\n    cmd.AddValue(\"frameAllocatedBandwidthHz\",\n                 \"Allocated bandwidth in Hz\",\n                 frameAllocatedBandwidthHz);\n    cmd.AddValue(\"frameCarrierAllocatedBandwidthHz\",\n                 \"Allocated carrier bandwidth in Hz\",\n                 frameCarrierAllocatedBandwidthHz);\n    cmd.AddValue(\"frameCarrierRollOff\", \"Roll-off factor\", frameCarrierRollOff);\n    cmd.AddValue(\"frameCarrierSpacing\", \"Carrier spacing factor\", frameCarrierSpacing);\n    cmd.AddValue(\"frameSpreadingFactor\", \"Carrier spreading factor\", frameSpreadingFactor);\n\n    cmd.AddValue(\"firstWindowDelay\",\n                 \"Delay between end of transmission and opening of first window on End Device\",\n                 firstWindowDelay);\n    cmd.AddValue(\"secondWindowDelay\",\n                 \"Delay between end of transmission and opening of second window on End Device\",\n                 secondWindowDelay);\n    cmd.AddValue(\"firstWindowDuration\", \"First window duration on End Device\", firstWindowDuration);\n    cmd.AddValue(\"secondWindowDuration\",\n                 \"Second window duration on End Device\",\n                 secondWindowDuration);\n    cmd.AddValue(\"firstWindowAnswerDelay\",\n                 \"Delay between end of reception and start of ack on first window on Gateway\",\n                 firstWindowAnswerDelay);\n    cmd.AddValue(\"secondWindowAnswerDelay\",\n                 \"Delay between end of reception and start of ack on second window on Gateway\",\n                 secondWindowAnswerDelay);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n\n    // Enable Lora\n    Config::SetDefault(\"ns3::LorawanMacEndDevice::DataRate\", UintegerValue(5));\n    Config::SetDefault(\"ns3::LorawanMacEndDevice::MType\",\n                       EnumValue(LorawanMacHeader::CONFIRMED_DATA_UP));\n\n    // Config::SetDefault (\"ns3::SatLoraConf::Standard\", EnumValue (SatLoraConf::EU863_870));\n    Config::SetDefault(\"ns3::SatLoraConf::Standard\", EnumValue(SatLoraConf::SATELLITE));\n\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::FirstWindowDelay\",\n                       TimeValue(firstWindowDelay));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::SecondWindowDelay\",\n                       TimeValue(secondWindowDelay));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::FirstWindowDuration\",\n                       TimeValue(firstWindowDuration));\n    Config::SetDefault(\"ns3::LorawanMacEndDeviceClassA::SecondWindowDuration\",\n                       TimeValue(secondWindowDuration));\n    Config::SetDefault(\"ns3::LoraNetworkScheduler::FirstWindowAnswerDelay\",\n                       TimeValue(firstWindowAnswerDelay));\n    Config::SetDefault(\"ns3::LoraNetworkScheduler::SecondWindowAnswerDelay\",\n                       TimeValue(secondWindowAnswerDelay));\n\n    // Defaults\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Superframe configuration\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\",\n                       EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::FrameConfigType\",\n                       EnumValue(SatSuperframeConf::CONFIG_TYPE_4));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_AllocatedBandwidthHz\",\n                       DoubleValue(frameAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierAllocatedBandwidthHz\",\n                       DoubleValue(frameCarrierAllocatedBandwidthHz));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierRollOff\",\n                       DoubleValue(frameCarrierRollOff));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierSpacing\",\n                       DoubleValue(frameCarrierSpacing));\n    Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_SpreadingFactor\",\n                       UintegerValue(frameSpreadingFactor));\n\n    // CRDSA only\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaServiceCount\", UintegerValue(4));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Configure RA\n    Config::SetDefault(\"ns3::SatOrbiterHelper::FwdLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::RtnLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue(SatEnums::RA_MODEL_ESSA));\n    if (interferenceModePerPacket)\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                           EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    }\n    else\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                           EnumValue(SatPhyRxCarrierConf::IF_PER_FRAGMENT));\n    }\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceEliminationModel\",\n                       EnumValue(SatPhyRxCarrierConf::SIC_RESIDUAL));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n    Config::SetDefault(\"ns3::SatBeamHelper::ReturnLinkLinkResults\", EnumValue(SatEnums::LR_LORA));\n\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDuration\", StringValue(\"600ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowStep\", StringValue(\"200ms\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDelay\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::FirstWindow\", StringValue(\"0s\"));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowSICIterations\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::SpreadingFactor\", UintegerValue(1));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::DetectionThreshold\", DoubleValue(0));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::EnableSIC\", BooleanValue(false));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(50));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.99));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_SlottedAlohaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_CrdsaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_EssaAllowed\", BooleanValue(true));\n\n    // Traffics\n    simulationHelper->SetSimulationTime(simLength);\n\n    simulationHelper->SetGwUserCount(nbGwUser);\n    simulationHelper->SetUtCountPerBeam(nbUtsPerBeam);\n    simulationHelper->SetUserCountPerUt(nbEndUsersPerUt);\n    simulationHelper->SetBeams(beams);\n\n    simulationHelper->LoadScenario(\"geo-33E-lora\");\n\n    simulationHelper->CreateSatScenario();\n\n    /*simulationHelper->GetTrafficHelper()->AddLoraCbrTraffic(\n        loraInterval,\n        packetSize,\n        Singleton<SatTopology>::Get()->GetGwUserNodes(),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength,\n        Seconds(1));*/\n\n    simulationHelper->GetTrafficHelper()->AddLoraPeriodicTraffic(\n        loraInterval,\n        packetSize,\n        Singleton<SatTopology>::Get()->GetUtNodes(),\n        appStartTime,\n        simLength,\n        Seconds(1));\n\n    // Outputs\n    simulationHelper->EnableProgressLogs();\n\n    std::string outputPath = Singleton<SatEnvVariables>::Get()->LocateDirectory(\n        \"contrib/satellite/data/sims/example-lora-regenerative\");\n    Config::SetDefault(\"ns3::ConfigStore::Filename\",\n                       StringValue(outputPath + \"/output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    if (displayTraces)\n    {\n        Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerBeamRtnFeederWindowLoad(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n        s->AddPerUtFwdAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerUtFwdAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n        s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    }\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n\n} // end of `int main (int argc, char *argv[])`\n"
    },
    {
      "file_path": "examples/sat-markov-fading-trace-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/core-module.h\"\n#include \"ns3/gnuplot.h\"\n#include \"ns3/satellite-module.h\"\n\n#include <fstream>\n#include <vector>\n\nNS_LOG_COMPONENT_DEFINE(\"sat-markov-trace-example\");\n\nnamespace ns3\n{\n\n/**\n * \\file sat-markov-fading-trace-example.cc\n * \\ingroup satellite\n *\n * \\brief Example for Markov fading calculations. Can be used to produce simple fading traces.\n *\n * This example can be run as it is, without any argument, i.e.:\n *\n *     ./waf --run=\"contrib/satellite/examples/markov-trace-example\"\n *\n * Gnuplot file (markov_fading_trace.plt) will be generated as output. This\n * file can be converted to a PNG file, for example by this command:\n *\n *     gnuplot markov_fading_trace.plt\n *\n * which will produce `markov_fading_trace.png` file in the same directory.\n */\n\nclass SatMarkovFadingExamplePlot : public Object\n{\n  public:\n    SatMarkovFadingExamplePlot();\n    static TypeId GetTypeId();\n    void Run();\n\n  private:\n    Gnuplot2dDataset GetGnuplotDataset(std::string title);\n    Gnuplot GetGnuplot(std::string outputName, std::string title);\n    void FadingTraceCb(std::string context,\n                       double time,\n                       SatEnums::ChannelType_t chType,\n                       double fadingValue);\n    double GetElevation();\n    double GetVelocity();\n\n    double m_elevation;\n    double m_velocity;\n    std::vector<std::pair<double, double>> m_fadingValues;\n};\n\nNS_OBJECT_ENSURE_REGISTERED(SatMarkovFadingExamplePlot);\n\nTypeId\nSatMarkovFadingExamplePlot::GetTypeId()\n{\n    static TypeId tid = TypeId(\"ns3::SatMarkovFadingExamplePlot\")\n                            .SetParent<Object>()\n                            .AddConstructor<SatMarkovFadingExamplePlot>();\n    return tid;\n}\n\nSatMarkovFadingExamplePlot::SatMarkovFadingExamplePlot()\n{\n    m_elevation = 45;\n    m_velocity = 0;\n}\n\nvoid\nSatMarkovFadingExamplePlot::FadingTraceCb(std::string context,\n                                          double time,\n                                          SatEnums::ChannelType_t chType,\n                                          double fadingValue)\n{\n    std::cout << time << \" \" << chType << \" \" << 10 * log10(fadingValue) << std::endl;\n    m_fadingValues.push_back(std::make_pair(time, 10 * log10(fadingValue)));\n}\n\ndouble\nSatMarkovFadingExamplePlot::GetElevation()\n{\n    return m_elevation;\n}\n\ndouble\nSatMarkovFadingExamplePlot::GetVelocity()\n{\n    return m_velocity;\n}\n\nGnuplot2dDataset\nSatMarkovFadingExamplePlot::GetGnuplotDataset(std::string title)\n{\n    Gnuplot2dDataset ret;\n    ret.SetTitle(title);\n    ret.SetStyle(Gnuplot2dDataset::LINES);\n\n    for (uint32_t i = 0; i < m_fadingValues.size(); i++)\n    {\n        ret.Add(m_fadingValues[i].first, m_fadingValues[i].second);\n    }\n    return ret;\n}\n\nGnuplot\nSatMarkovFadingExamplePlot::GetGnuplot(std::string outputName, std::string title)\n{\n    Gnuplot ret(outputName + \".png\");\n    ret.SetTitle(title);\n    ret.SetTerminal(\"png\");\n    ret.SetLegend(\"Time (s)\", \"Fading (dB)\");\n    ret.AppendExtra(\"set key top right\");\n    ret.AppendExtra(\"set grid xtics mxtics ytics\");\n    return ret;\n}\n\nvoid\nSatMarkovFadingExamplePlot::Run()\n{\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationCampaignName\",\n                       StringValue(\"example-markov-fading-trace\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationTag\", StringValue(\"\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Create default Markov & Loo configurations\n    Ptr<SatMarkovConf> markovConf = CreateObject<SatMarkovConf>();\n\n    SatBaseFading::ElevationCallback elevationCb =\n        MakeCallback(&SatMarkovFadingExamplePlot::GetElevation, this);\n    SatBaseFading::VelocityCallback velocityCb =\n        MakeCallback(&SatMarkovFadingExamplePlot::GetVelocity, this);\n\n    /// Create fading container based on default configuration\n    Ptr<SatMarkovContainer> markovContainer =\n        CreateObject<SatMarkovContainer>(markovConf, elevationCb, velocityCb);\n\n    markovContainer->TraceConnect(\"FadingTrace\",\n                                  \"The trace for fading values\",\n                                  MakeCallback(&SatMarkovFadingExamplePlot::FadingTraceCb, this));\n\n    Address macAddress;\n\n    /// Run simulation\n    for (uint32_t i = 0; i < 100000; i++)\n    {\n        Simulator::Schedule(MilliSeconds(1 * i),\n                            &SatMarkovContainer::DoGetFading,\n                            markovContainer,\n                            macAddress,\n                            SatEnums::FORWARD_USER_CH);\n    }\n\n    Simulator::Schedule(MilliSeconds(0),\n                        &SatMarkovContainer::LockToSetAndState,\n                        markovContainer,\n                        0,\n                        0);\n    Simulator::Schedule(MilliSeconds(20000),\n                        &SatMarkovContainer::LockToSetAndState,\n                        markovContainer,\n                        0,\n                        1);\n    Simulator::Schedule(MilliSeconds(40000),\n                        &SatMarkovContainer::LockToSetAndState,\n                        markovContainer,\n                        0,\n                        2);\n    Simulator::Schedule(MilliSeconds(60000),\n                        &SatMarkovContainer::LockToSetAndState,\n                        markovContainer,\n                        0,\n                        0);\n    Simulator::Schedule(MilliSeconds(80000),\n                        &SatMarkovContainer::LockToSetAndState,\n                        markovContainer,\n                        0,\n                        1);\n\n    Simulator::Run();\n\n    Gnuplot2dDataset dataset = GetGnuplotDataset(\"Markov Fading Trace\");\n    Gnuplot plot = GetGnuplot(\"markov_fading_trace\", \"Markov Fading Trace\");\n    plot.AddDataset(dataset);\n\n    std::string plotFileName = \"markov_fading_trace.plt\";\n    std::ofstream plotFile(plotFileName.c_str());\n    plot.GenerateOutput(plotFile);\n    plotFile.close();\n\n    std::cout << \"Output file written: \" << plotFileName << std::endl;\n\n    int result = system(\"gnuplot markov_fading_trace.plt\");\n\n    if (result < 0)\n    {\n        std::cout\n            << \"Unable to open shell process for Gnuplot file conversion, conversion not done!\"\n            << std::endl;\n    }\n    else\n    {\n        std::cout << \"Output file converted to: markov_fading_trace.png\" << std::endl;\n    }\n\n    Simulator::Destroy();\n}\n\n} // namespace ns3\n\nint\nmain(int argc, char* argv[])\n{\n    ns3::Ptr<ns3::SatMarkovFadingExamplePlot> stub;\n    stub = ns3::CreateObject<ns3::SatMarkovFadingExamplePlot>();\n    ns3::Config::RegisterRootNamespaceObject(stub);\n    stub->Run();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-markov-logic-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/core-module.h\"\n#include \"ns3/satellite-module.h\"\n\n#include <stdint.h>\n\nusing namespace ns3;\n\n/**\n * \\file sat-markov-logic-example.cc\n * \\ingroup satellite\n *\n * \\brief Example for Markov model class logic. Demonstrates the functionality\n * of Markov-fading. The example creates Markov-fading object and executes the\n * fading calculations with different elevation angles.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-markov-logic-example\");\n\nstatic double g_elevation = 45;\nstatic double g_velocity = 0;\n\nstatic double\nGetElevation()\n{\n    return g_elevation;\n}\n\nstatic void\nSetElevation(double elevation)\n{\n    g_elevation = elevation;\n}\n\nstatic double\nGetVelocity()\n{\n    return g_velocity;\n}\n\nstatic void\nSetVelocity(double velocity)\n{\n    g_velocity = velocity;\n}\n\nint\nmain(int argc, char* argv[])\n{\n    /// Enable info logs\n    LogComponentEnable(\"sat-markov-logic-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatMarkovContainer\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatMarkovModel\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatMarkovConf\", LOG_LEVEL_INFO);\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationCampaignName\",\n                       StringValue(\"example-markov-logic\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationTag\", StringValue(\"\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Create default Markov & Loo configurations\n    Ptr<SatMarkovConf> markovConf = CreateObject<SatMarkovConf>();\n\n    SatBaseFading::ElevationCallback elevationCb = MakeCallback(&GetElevation);\n    SatBaseFading::VelocityCallback velocityCb = MakeCallback(&GetVelocity);\n\n    /// Create fading container based on default configuration\n    Ptr<SatMarkovContainer> markovContainer =\n        CreateObject<SatMarkovContainer>(markovConf, elevationCb, velocityCb);\n\n    Address macAddress;\n\n    /// Run simulation\n    Simulator::Schedule(Time(\"5ms\"), &SetVelocity, 0);\n    Simulator::Schedule(Time(\"10ms\"),\n                        &SatMarkovContainer::DoGetFading,\n                        markovContainer,\n                        macAddress,\n                        SatEnums::FORWARD_USER_CH);\n    Simulator::Schedule(Time(\"30ms\"),\n                        &SatMarkovContainer::DoGetFading,\n                        markovContainer,\n                        macAddress,\n                        SatEnums::FORWARD_USER_CH);\n    Simulator::Schedule(Time(\"45ms\"), &SetElevation, 55);\n    Simulator::Schedule(Time(\"50ms\"),\n                        &SatMarkovContainer::DoGetFading,\n                        markovContainer,\n                        macAddress,\n                        SatEnums::FORWARD_USER_CH);\n    Simulator::Schedule(Time(\"60ms\"),\n                        &SatMarkovContainer::DoGetFading,\n                        markovContainer,\n                        macAddress,\n                        SatEnums::FORWARD_USER_CH);\n    Simulator::Schedule(Time(\"90ms\"),\n                        &SatMarkovContainer::DoGetFading,\n                        markovContainer,\n                        macAddress,\n                        SatEnums::FORWARD_USER_CH);\n    Simulator::Schedule(Time(\"95ms\"), &SetElevation, 75);\n    Simulator::Schedule(Time(\"100ms\"),\n                        &SatMarkovContainer::DoGetFading,\n                        markovContainer,\n                        macAddress,\n                        SatEnums::FORWARD_USER_CH);\n    Simulator::Schedule(Time(\"130ms\"),\n                        &SatMarkovContainer::DoGetFading,\n                        markovContainer,\n                        macAddress,\n                        SatEnums::FORWARD_USER_CH);\n    Simulator::Schedule(Time(\"200ms\"),\n                        &SatMarkovContainer::DoGetFading,\n                        markovContainer,\n                        macAddress,\n                        SatEnums::FORWARD_USER_CH);\n\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-mobility-beam-tracer.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2018 CNES\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Mathias Ettinger <mettinger@toulouse.viveris.fr>\n */\n\n#include <ns3/config-store-module.h>\n#include <ns3/core-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/network-module.h>\n#include <ns3/satellite-module.h>\n#include <ns3/traffic-module.h>\n\n#include <iostream>\n\nusing namespace ns3;\n\nPtr<SatMobilityModel> satMobility = nullptr;\nstd::set<std::pair<uint32_t, uint32_t>> visitedBeams;\nstd::map<uint32_t, std::vector<double>> relativeSpeeds;\n\nstatic void\nSatCourseChange(std::string context, Ptr<const SatMobilityModel> position)\n{\n    auto tracedPosition = DynamicCast<const SatTracedMobilityModel>(position);\n    NS_ASSERT_MSG(tracedPosition != nullptr, \"Course changed for a non-mobile UT\");\n\n    uint32_t sat = tracedPosition->GetSatId();\n    uint32_t beam = tracedPosition->GetBestBeamId(true);\n\n    visitedBeams.insert(std::make_pair(sat, beam));\n    relativeSpeeds[sat].push_back(tracedPosition->GetRelativeSpeed(satMobility));\n}\n\n/**\n * \\file sat-mobility-beam-tracer.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results with\n * a high degree of customization through XML file.\n *\n * execute command -> ./ns3 run \"sat-mobility-beam-tracer --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-mobility-beam-tracer\");\n\nint\nmain(int argc, char* argv[])\n{\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/generic-input-attributes.xml\";\n    std::string mobileUtTraceFile = \"\";\n    // mobileUtTraceFile = Singleton<SatEnvVariables>::Get()->LocateDataDirectory() +\n    //                     \"/additional-input/utpositions/mobiles/scenario6/trajectory\";\n\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(SatEnums::REGENERATION_NETWORK));\n\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"sat-mobility-position-generator\");\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->DisableAllCapacityAssignmentCategories();\n    simulationHelper->EnableCrdsa();\n\n    // Parse command-line and XML file\n    CommandLine cmd;\n    cmd.AddValue(\"TraceFile\", \"Path to the trace file to check beams from\", mobileUtTraceFile);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n    simulationHelper->ReadInputAttributesFromFile(inputFileNameWithPath);\n    simulationHelper->SetSimulationTime(Seconds(100));\n\n    simulationHelper->SetUserCountPerUt(1);\n\n    simulationHelper->LoadScenario(\"constellation-eutelsat-geo-2-sats-no-isls\");\n\n    if (mobileUtTraceFile != \"\")\n    {\n        Ptr<SatHelper> satHelper =\n            simulationHelper->CreateSatScenario(SatHelper::FULL, mobileUtTraceFile);\n        satMobility =\n            Singleton<SatTopology>::Get()->GetOrbiterNode(0)->GetObject<SatMobilityModel>();\n\n        uint32_t satNb = Singleton<SatTopology>::Get()->GetNOrbiterNodes();\n        for (uint32_t i = 0; i < satNb; i++)\n        {\n            Ptr<Node> node = satHelper->LoadMobileUtFromFile(mobileUtTraceFile);\n            DynamicCast<SatTracedMobilityModel>(node->GetObject<SatMobilityModel>())->SetSatId(i);\n            node->GetObject<SatMobilityModel>()->TraceConnect(\"SatCourseChange\",\n                                                              \"BeamTracer\",\n                                                              MakeCallback(SatCourseChange));\n        }\n\n        simulationHelper->RunSimulation();\n        Simulator::Destroy();\n\n        std::cout << \"Visited beams are:\";\n        for (std::pair<uint32_t, uint32_t> satAndBeam : visitedBeams)\n        {\n            std::cout << \" (\" << satAndBeam.first << \", \" << satAndBeam.second << \")\";\n        }\n        std::cout << std::endl;\n\n        for (uint32_t satId = 0; satId < satNb; satId++)\n        {\n            double minSpeed = 0.0, maxSpeed = 0.0, totalSpeed = 0.0;\n            uint32_t valuesCount = 0;\n            for (double& speed : relativeSpeeds[satId])\n            {\n                if (!minSpeed)\n                {\n                    minSpeed = speed;\n                }\n                if (speed)\n                {\n                    minSpeed = std::min(minSpeed, speed);\n                    maxSpeed = std::max(maxSpeed, speed);\n                    totalSpeed += speed;\n                    ++valuesCount;\n                }\n            }\n            std::cout << \"Speeding stats (m/s) for  satellite \" << satId << \":\\n\\tmin: \" << minSpeed\n                      << \"\\n\\tmax: \" << maxSpeed << \"\\n\\tmean: \" << totalSpeed / valuesCount\n                      << std::endl;\n        }\n    }\n}\n"
    },
    {
      "file_path": "examples/sat-mobility-example.cc",
      "code": "/* -*-  Mode: C++; c-file-style: \"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-mobility-example.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation with a moving satellite.\n *\n * execute command -> ./waf --run \"sat-mobility-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-mobility-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Enable info logs\n    LogComponentEnable(\"sat-mobility-example\", LOG_LEVEL_INFO);\n\n    // Variables\n    uint32_t beamId = 17;\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(1);\n\n    uint32_t packetSize(100);\n    Time interval(Seconds(10.0));\n\n    bool updatePositionEachRequest(false);\n    Time updatePositionPeriod(Seconds(1));\n\n    Time appStartTime = Seconds(0.1);\n    Time simLength(Seconds(7200.0));\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"sat-mobility-example\");\n\n    // Parse command-line\n    CommandLine cmd;\n    cmd.AddValue(\"PacketSize\", \"UDP packet size (in bytes)\", packetSize);\n    cmd.AddValue(\"Interval\", \"CBR interval (in seconds, or add unit)\", interval);\n    cmd.AddValue(\"SimLength\", \"Simulation length (in seconds, or add unit)\", simLength);\n    cmd.AddValue(\"UpdatePositionEachRequest\",\n                 \"Enable position computation each time a packet is sent\",\n                 updatePositionEachRequest);\n    cmd.AddValue(\"UpdatePositionPeriod\",\n                 \"Period of satellite position refresh, if not update on each request (in seconds, \"\n                 \"or add unit)\",\n                 updatePositionPeriod);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Set default values\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    Config::SetDefault(\"ns3::SatSGP4MobilityModel::UpdatePositionEachRequest\",\n                       BooleanValue(updatePositionEachRequest));\n    Config::SetDefault(\"ns3::SatSGP4MobilityModel::UpdatePositionPeriod\",\n                       TimeValue(updatePositionPeriod));\n\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n\n    // Set beam ID\n    std::stringstream beamsEnabled;\n    beamsEnabled << beamId;\n    simulationHelper->SetBeams(beamsEnabled.str());\n\n    simulationHelper->LoadScenario(\"leo-iss\");\n\n    // Create reference system\n    simulationHelper->CreateSatScenario();\n\n    // setup CBR traffic\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        interval,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength,\n        MilliSeconds(50));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        interval,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength,\n        MilliSeconds(50));\n\n    NS_LOG_INFO(\"--- sat-mobility-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    // Set statistics\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n    simulationHelper->EnableProgressLogs();\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    s->AddGlobalFwdPhyDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdPhyDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnPhyDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnPhyDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-mobility-position-generator.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2018 CNES\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Mathias Ettinger <mettinger@toulouse.viveris.fr>\n */\n\n#include <ns3/config-store-module.h>\n#include <ns3/core-module.h>\n#include <ns3/internet-module.h>\n#include <ns3/network-module.h>\n#include <ns3/satellite-module.h>\n#include <ns3/traffic-module.h>\n\n#include <iostream>\n\nusing namespace ns3;\n\n/**\n * \\file sat-mobility-position-generator.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results with\n * a high degree of customization through XML file.\n *\n * execute command -> ./waf --run \"sat-mobility-position-generator --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-mobility-position-generator\");\n\nint\nmain(int argc, char* argv[])\n{\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/generic-input-attributes.xml\";\n    uint32_t posCount = 1;\n\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"sat-mobility-position-generator\");\n    simulationHelper->DisableAllCapacityAssignmentCategories();\n    simulationHelper->EnableCrdsa();\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Parse command-line and XML file\n    CommandLine cmd;\n    cmd.AddValue(\"PosCount\", \"Amount of positions to generate per beam\", posCount);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n    simulationHelper->ConfigureAttributesFromFile(inputFileNameWithPath);\n\n    Ptr<SatHelper> satHelper = simulationHelper->GetSatelliteHelper();\n    for (uint32_t beamId : simulationHelper->GetBeamSet())\n    {\n        for (uint32_t posId = 0; posId < posCount; ++posId)\n        {\n            Ptr<SatSpotBeamPositionAllocator> positions = satHelper->GetBeamAllocator(beamId);\n            GeoCoordinate coords = positions->GetNextGeoPosition(0);\n            std::cout << \"[\" << beamId << \"] \" << coords << std::endl;\n        }\n    }\n\n    simulationHelper->SetSimulationTime(0.1);\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-multi-application-fwd-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/ipv4-l3-protocol.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-multi-application-fwd-example.cc\n * \\ingroup satellite\n *\n * \\brief  MultiApplicationFwd-example using satellite network in FWD link. The example\n *         utilizes OnOff and CBR application and presents how to sent the ToS field values\n *         for them.\n *\n *         To see help for user arguments:\n *         execute command -> ./waf --run \"sat-multi-application-fwd-example --PrintHelp\"\n *\n *         On-Off and CBR applications have been configured to send packets from users\n *         connected to GWs to users connected to UTs (FWD link). The share of end users\n *         using CBR and On-Off may be configured by command line argument.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-multi-application-fwd-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    //  LogComponentEnable (\"OnOffApplication\", LOG_LEVEL_INFO);\n    //  LogComponentEnable (\"CbrApplication\", LOG_LEVEL_ALL);\n    //  LogComponentEnable (\"PacketSink\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"sat-multi-application-fwd-example\", LOG_LEVEL_INFO);\n\n    uint32_t endUsersPerUt(3);\n    uint32_t utsPerBeam(3);\n    double cbrProbability(0.5);\n    uint32_t packetSize = 512;\n    std::string interval = \"1s\";\n    double simLength(15.0);\n\n    Time appStartTime = Seconds(0.001);\n    Time appStopTime = Seconds(10.0);\n\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-multi-application-fwd\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"cbrProbability\", \"Probability of CBR end users\", cbrProbability);\n    cmd.AddValue(\"simLength\", \"Simulation length in seconds\", simLength);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({12, 22});\n    simulationHelper->SetSimulationTime(simLength);\n\n    // No PHY errors\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_NONE);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    Ptr<SatHelper> helper = simulationHelper->CreateSatScenario();\n\n    // Get the end users so that it is possible to attach\n    // applications on them\n    NodeContainer utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes();\n    NodeContainer gwUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n\n    // Random variable for sharing the UTs to CBR and On-Off users\n    Ptr<UniformRandomVariable> rand = CreateObject<UniformRandomVariable>();\n\n    NodeContainer utCbrUsers;\n    NodeContainer utOnOffUsers;\n\n    /* DSCP values\n\n    BE:\n    DscpDefault = 0x00,\n\n    AF:\n    DSCP_CS1 = 0x20,\n    DSCP_AF11 = 0x28,\n    DSCP_AF12 = 0x30,\n    DSCP_AF13 = 0x38,\n\n    DSCP_CS2 = 0x40,\n    DSCP_AF21 = 0x48,\n    DSCP_AF22 = 0x50,\n    DSCP_AF23 = 0x58,\n\n    DSCP_CS3 = 0x60,\n    DSCP_AF31 = 0x68,\n    DSCP_AF32 = 0x70,\n    DSCP_AF33 = 0x78,\n\n    DSCP_CS4 = 0x80,\n    DSCP_AF41 = 0x88,\n    DSCP_AF42 = 0x90,\n    DSCP_AF43 = 0x98,\n\n    EF:\n    DSCP_CS5 = 0xA0,\n    DSCP_EF = 0xB8,\n\n    DSCP_CS6 = 0xC0,\n    DSCP_CS7 = 0xE0\n    */\n\n    // ToS fields of applications\n    uint8_t onOffTos(0x28);\n    uint8_t cbrTos(0xB8);\n\n    // Divide the users into CBR and On-Off users\n    for (NodeContainer::Iterator i = utUsers.Begin(); i != utUsers.End(); i++)\n    {\n        // CBR\n        if (rand->GetValue() < cbrProbability)\n        {\n            utCbrUsers.Add(*i);\n        }\n        // OnOff\n        else\n        {\n            utOnOffUsers.Add(*i);\n        }\n    }\n\n    NS_LOG_INFO(\"Number of created CBR users: \" << utCbrUsers.GetN()\n                                                << \", On-Off users: \" << utOnOffUsers.GetN());\n\n    ApplicationContainer gwCbrApps;\n    ApplicationContainer gwOnOffApps;\n    ApplicationContainer utCbrSinkApps;\n    ApplicationContainer utOnOffSinkApps;\n\n    //---- Start CBR application definitions\n\n    NS_LOG_INFO(\"Creating CBR applications and sinks\");\n\n    uint16_t port = 9;\n    Time startDelay = appStartTime;\n    uint32_t cbrGwUserId(0);\n    uint32_t onOffGwUserId(1);\n\n    if (utCbrUsers.GetN() > 0)\n    {\n        // create application on UT user\n        PacketSinkHelper cbrSinkHelper(\n            \"ns3::UdpSocketFactory\",\n            InetSocketAddress(helper->GetUserAddress(utCbrUsers.Get(0)), port));\n        CbrHelper cbrHelper(\"ns3::UdpSocketFactory\",\n                            InetSocketAddress(helper->GetUserAddress(utCbrUsers.Get(0)), port));\n        cbrHelper.SetAttribute(\"Interval\", StringValue(interval));\n        cbrHelper.SetAttribute(\"PacketSize\", UintegerValue(packetSize));\n\n        // Cbr and Sink applications creation. CBR to GW users and sinks to UT users.\n        for (uint32_t i = 0; i < utCbrUsers.GetN(); i++)\n        {\n            // Set destination addresses\n            InetSocketAddress cbrDest(helper->GetUserAddress(utCbrUsers.Get(i)), port);\n\n            cbrHelper.SetAttribute(\"Remote\", AddressValue(Address(cbrDest)));\n            cbrHelper.SetAttribute(\"Tos\", UintegerValue(cbrTos));\n            cbrSinkHelper.SetAttribute(\"Local\", AddressValue(Address(cbrDest)));\n\n            gwCbrApps.Add(cbrHelper.Install(gwUsers.Get(cbrGwUserId)));\n            utCbrSinkApps.Add(cbrSinkHelper.Install(utCbrUsers.Get(i)));\n\n            startDelay += Seconds(0.001);\n\n            // Set start and end times\n            gwCbrApps.Get(i)->SetStartTime(Seconds(0.1));\n            gwCbrApps.Get(i)->SetStopTime(appStopTime);\n            utCbrSinkApps.Get(i)->SetStartTime(startDelay);\n            utCbrSinkApps.Get(i)->SetStopTime(appStopTime);\n        }\n    }\n    //---- Stop CBR application definitions\n\n    //---- Start OnOff application definitions\n\n    if (utOnOffUsers.GetN() > 0)\n    {\n        NS_LOG_INFO(\"Creating OnOff applications and sinks\");\n\n        std::string dataRate = \"100kb/s\";\n        std::string onTime = \"2.0\";\n        std::string offTime = \"2.0\";\n\n        Config::SetDefault(\"ns3::OnOffApplication::PacketSize\", UintegerValue(packetSize));\n        Config::SetDefault(\"ns3::OnOffApplication::DataRate\", StringValue(dataRate));\n        Config::SetDefault(\"ns3::OnOffApplication::OnTime\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=\" + onTime + \"]\"));\n        Config::SetDefault(\"ns3::OnOffApplication::OffTime\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=\" + offTime + \"]\"));\n\n        // create helpers for application creation\n        // set address of the first UT connected user\n        PacketSinkHelper onOffSinkHelper(\n            \"ns3::UdpSocketFactory\",\n            InetSocketAddress(helper->GetUserAddress(utCbrUsers.Get(0)), port));\n        OnOffHelper onOffHelper(\"ns3::UdpSocketFactory\",\n                                InetSocketAddress(helper->GetUserAddress(utCbrUsers.Get(0)), port));\n\n        startDelay = appStartTime;\n\n        // Cbr and Sink applications creation\n        for (uint32_t i = 0; i < utOnOffUsers.GetN(); i++)\n        {\n            // Set destination addresses\n            InetSocketAddress onOffDest(helper->GetUserAddress(utOnOffUsers.Get(i)), port);\n\n            // On-Off sends packets to GW user no 3.\n            onOffHelper.SetAttribute(\"Remote\", AddressValue(Address(onOffDest)));\n            onOffHelper.SetAttribute(\"Tos\", UintegerValue(onOffTos));\n            onOffSinkHelper.SetAttribute(\"Local\", AddressValue(Address(onOffDest)));\n\n            gwOnOffApps.Add(onOffHelper.Install(gwUsers.Get(onOffGwUserId)));\n            utOnOffSinkApps.Add(onOffSinkHelper.Install(utOnOffUsers.Get(i)));\n\n            startDelay += Seconds(0.001);\n\n            gwOnOffApps.Get(i)->SetStartTime(Seconds(0.1));\n            gwOnOffApps.Get(i)->SetStopTime(appStopTime);\n            utOnOffSinkApps.Get(i)->SetStartTime(startDelay);\n            utOnOffSinkApps.Get(i)->SetStopTime(appStopTime);\n        }\n    }\n\n    //---- Stop OnOff application definitions\n\n    // prompt info of the used parameters\n    NS_LOG_INFO(\"--- sat-multi-application-fwd-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n} // end of `int main (int argc, char *argv[])`\n"
    },
    {
      "file_path": "examples/sat-multi-application-rtn-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/ipv4-l3-protocol.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-multi-application-rtn-example.cc\n * \\ingroup satellite\n *\n * \\brief  MultiApplicationRtn-example using satellite network in the RTN link. The\n *         example utilizes OnOff and CBR application and presents how to sent the\n *         ToS field values for them.\n *\n *         To see help for user arguments:\n *         execute command -> ./waf --run \"sat-multi-application-rtn-example --PrintHelp\"\n *\n *         On-Off and CBR applications have been configured to send packets from users\n *         connected to UTs to users connected to GWs (RTN link). The share of end users\n *         using CBR and On-Off may be configured by command line argument.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-multi-application-rtn-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    //  LogComponentEnable (\"OnOffApplication\", LOG_LEVEL_INFO);\n    //  LogComponentEnable (\"CbrApplication\", LOG_LEVEL_ALL);\n    //  LogComponentEnable (\"PacketSink\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"sat-multi-application-rtn-example\", LOG_LEVEL_INFO);\n\n    uint32_t endUsersPerUt(3);\n    uint32_t utsPerBeam(3);\n    double cbrProbability(0.5);\n    uint32_t packetSize = 512;\n    std::string interval = \"1s\";\n    double simLength(15.0);\n\n    Time appStartTime = Seconds(0.001);\n    Time appStopTime = Seconds(10.0);\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-multi-application-rtn\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"cbrProbability\", \"Probability of CBR end users\", cbrProbability);\n    cmd.AddValue(\"simLength\", \"Simulation length in seconds\", simLength);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetUtCountPerBeam(1);\n    simulationHelper->SetUserCountPerUt(1);\n    simulationHelper->SetBeamSet({12, 22});\n    simulationHelper->SetSimulationTime(simLength);\n\n    // No PHY errors\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_NONE);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    Ptr<SatHelper> helper = simulationHelper->CreateSatScenario();\n\n    // Get the end users so that it is possible to attach\n    // applications on them\n    NodeContainer utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes();\n    NodeContainer gwUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n\n    // Random variable for sharing the UTs to CBR and On-Off users\n    Ptr<UniformRandomVariable> rand = CreateObject<UniformRandomVariable>();\n\n    NodeContainer utCbrUsers;\n    NodeContainer utOnOffUsers;\n\n    /* DSCP values\n\n    BE:\n    DscpDefault = 0x00,\n\n    AF:\n    DSCP_CS1 = 0x20,\n    DSCP_AF11 = 0x28,\n    DSCP_AF12 = 0x30,\n    DSCP_AF13 = 0x38,\n\n    DSCP_CS2 = 0x40,\n    DSCP_AF21 = 0x48,\n    DSCP_AF22 = 0x50,\n    DSCP_AF23 = 0x58,\n\n    DSCP_CS3 = 0x60,\n    DSCP_AF31 = 0x68,\n    DSCP_AF32 = 0x70,\n    DSCP_AF33 = 0x78,\n\n    DSCP_CS4 = 0x80,\n    DSCP_AF41 = 0x88,\n    DSCP_AF42 = 0x90,\n    DSCP_AF43 = 0x98,\n\n    EF:\n    DSCP_CS5 = 0xA0,\n    DSCP_EF = 0xB8,\n\n    DSCP_CS6 = 0xC0,\n    DSCP_CS7 = 0xE0\n    */\n\n    // ToS fields of applications\n    uint8_t onOffTos(0x28);\n    uint8_t cbrTos(0xB8);\n\n    // Divide the users into CBR and On-Off users and set the ToS values.\n    for (NodeContainer::Iterator i = utUsers.Begin(); i != utUsers.End(); i++)\n    {\n        // CBR\n        if (rand->GetValue() < cbrProbability)\n        {\n            utCbrUsers.Add(*i);\n        }\n        // OnOff\n        else\n        {\n            utOnOffUsers.Add(*i);\n        }\n    }\n\n    NS_LOG_INFO(\"Number of created CBR users: \" << utCbrUsers.GetN()\n                                                << \", On-Off users: \" << utOnOffUsers.GetN());\n\n    ApplicationContainer gwCbrSinkApps;\n    ApplicationContainer gwOnOffSinkApps;\n    ApplicationContainer utCbrApps;\n    ApplicationContainer utOnOffApps;\n\n    //---- Start CBR application definitions\n\n    NS_LOG_INFO(\"Creating CBR applications and sinks\");\n\n    uint16_t port = 9;\n    Time startDelay = appStartTime;\n\n    uint32_t cbrGwUserId(0);\n    uint32_t onOffGwUserId(1);\n\n    if (utCbrUsers.GetN() > 0)\n    {\n        // create application on UT user\n        PacketSinkHelper cbrSinkHelper(\n            \"ns3::UdpSocketFactory\",\n            InetSocketAddress(helper->GetUserAddress(gwUsers.Get(cbrGwUserId)), port));\n        CbrHelper cbrHelper(\n            \"ns3::UdpSocketFactory\",\n            InetSocketAddress(helper->GetUserAddress(gwUsers.Get(cbrGwUserId)), port));\n        cbrHelper.SetAttribute(\"Interval\", StringValue(interval));\n        cbrHelper.SetAttribute(\"PacketSize\", UintegerValue(packetSize));\n        cbrHelper.SetAttribute(\"Tos\", UintegerValue(cbrTos));\n\n        // Set destination addresses\n        InetSocketAddress cbrDest(helper->GetUserAddress(gwUsers.Get(cbrGwUserId)), port);\n\n        // Cbr and Sink applications creation. CBR to UT users and sinks to GW users.\n        gwCbrSinkApps.Add(cbrSinkHelper.Install(gwUsers.Get(cbrGwUserId)));\n        gwCbrSinkApps.Get(0)->SetStartTime(Seconds(0.1));\n        gwCbrSinkApps.Get(0)->SetStopTime(appStopTime);\n\n        for (uint32_t i = 0; i < utCbrUsers.GetN(); i++)\n        {\n            cbrHelper.SetAttribute(\"Remote\", AddressValue(Address(cbrDest)));\n            cbrSinkHelper.SetAttribute(\"Local\", AddressValue(Address(cbrDest)));\n\n            utCbrApps.Add(cbrHelper.Install(utCbrUsers.Get(i)));\n\n            startDelay += Seconds(0.001);\n\n            // Set start and end times\n            utCbrApps.Get(i)->SetStartTime(startDelay);\n            utCbrApps.Get(i)->SetStopTime(appStopTime);\n        }\n    }\n    //---- Stop CBR application definitions\n\n    //---- Start OnOff application definitions\n\n    if (utOnOffUsers.GetN() > 0)\n    {\n        NS_LOG_INFO(\"Creating OnOff applications and sinks\");\n\n        std::string dataRate = \"100kb/s\";\n        std::string onTime = \"2.0\";\n        std::string offTime = \"2.0\";\n\n        Config::SetDefault(\"ns3::OnOffApplication::PacketSize\", UintegerValue(packetSize));\n        Config::SetDefault(\"ns3::OnOffApplication::DataRate\", StringValue(dataRate));\n        Config::SetDefault(\"ns3::OnOffApplication::OnTime\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=\" + onTime + \"]\"));\n        Config::SetDefault(\"ns3::OnOffApplication::OffTime\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=\" + offTime + \"]\"));\n\n        // create helpers for application creation\n        // set address of the first UT connected user\n        PacketSinkHelper onOffSinkHelper(\n            \"ns3::UdpSocketFactory\",\n            InetSocketAddress(helper->GetUserAddress(gwUsers.Get(0)), port));\n        OnOffHelper onOffHelper(\"ns3::UdpSocketFactory\",\n                                InetSocketAddress(helper->GetUserAddress(gwUsers.Get(0)), port));\n\n        startDelay = appStartTime;\n\n        // Set destination addresses\n        InetSocketAddress onOffDest(helper->GetUserAddress(gwUsers.Get(onOffGwUserId)), port);\n\n        // Cbr and Sink applications creation\n        gwOnOffSinkApps.Add(onOffSinkHelper.Install(gwUsers.Get(onOffGwUserId)));\n        gwOnOffSinkApps.Get(0)->SetStartTime(Seconds(0.1));\n        gwOnOffSinkApps.Get(0)->SetStopTime(appStopTime);\n\n        for (uint32_t i = 0; i < utOnOffUsers.GetN(); i++)\n        {\n            onOffHelper.SetAttribute(\"Remote\", AddressValue(Address(onOffDest)));\n            onOffHelper.SetAttribute(\"Tos\", UintegerValue(onOffTos));\n            onOffSinkHelper.SetAttribute(\"Local\", AddressValue(Address(onOffDest)));\n\n            utOnOffApps.Add(onOffHelper.Install(utOnOffUsers.Get(i)));\n\n            startDelay += Seconds(0.001);\n\n            utOnOffApps.Get(i)->SetStartTime(startDelay);\n            utOnOffApps.Get(i)->SetStopTime(appStopTime);\n        }\n    }\n\n    //---- Stop OnOff application definitions\n\n    // prompt info of the used parameters\n    NS_LOG_INFO(\"--- sat-multi-application-rtn-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-multicast-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-multicast-example.cc\n * \\ingroup satellite\n *\n * \\brief  Multicast example application to test multicasting in satellite network.\n *         Test scenario (larger of full), pre-defined multicast for larger scenario\n *         can be given in command line as user argument.\n *\n *         To see help and more info for user arguments:\n *         execute command -> ./waf --run \"sat-multicast-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-multicast-example\");\n\n/**\n * Receive RX traces from packet sinks\n *\n * \\param context Context of the receive (multicast group and UT/GW user info)\n */\nstatic void\nSinkReceive(std::string context, Ptr<const Packet>, const Address&)\n{\n    NS_LOG_INFO(\" Packet received from/by: \" << context);\n}\n\n/**\n * Construct information of the given user node.\n *\n * \\param helper Pointer to satellite helper\n * \\param node Pointer to user node connected to UT or GW\n * \\return Information of the user (UT or GW node connected user with user index in the node)\n */\nstatic std::string\nGetUserInfo(Ptr<SatHelper> helper, Ptr<Node> node)\n{\n    std::stringstream ss; // create a string stream\n    Ptr<Node> utNode = Singleton<SatTopology>::Get()->GetUtNode(node);\n    NodeContainer nodeUsers;\n\n    if (utNode)\n    {\n        nodeUsers = Singleton<SatTopology>::Get()->GetUtUserNodes(utNode);\n        ss << \"UT\"\n           << Singleton<SatIdMapper>::Get()->GetUtIdWithMac(\n                  Singleton<SatIdMapper>::Get()->GetUtMacWithNode(utNode))\n           << \"-user-\";\n    }\n    else\n    {\n        nodeUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n        ss << \"GW-user-\";\n    }\n\n    uint32_t userIndex = 0;\n\n    for (uint32_t j = 0; ((j < nodeUsers.GetN()) && (userIndex == 0)); j++)\n    {\n        if (nodeUsers.Get(j) == node)\n        {\n            userIndex = j + 1;\n        }\n    }\n\n    ss << userIndex;\n\n    return ss.str();\n}\n\n/**\n * Log empty line. Used to trim log outputs between multicast groups.\n */\nstatic void\nLogEmptyLine()\n{\n    NS_LOG_INFO(\"\");\n}\n\n/**\n * Establish multicast group and generate traffic in that group.\n *\n * \\param helper Pointer to satellite helper\n * \\param source Pointer to source node of the multicast group\n * \\param groupReceivers Container of the receiver node pointers of the multicast group\n * \\param groupAddress Address of the multicast group\n * \\param port Port of the multicast group\n * \\param startTime Time to start group traffic (sending start with some delay).\n * \\param sinkToAll Add packet sink to all users for multicast group.\n * \\return Time when all group packets should have been received by group receivers.\n */\nstatic Time\nEstablishMulticastGroup(Ptr<SatHelper> helper,\n                        Ptr<Node> source,\n                        NodeContainer groupReceivers,\n                        Ipv4Address groupAddress,\n                        uint16_t port,\n                        Time startTime,\n                        bool sinkToAll)\n{\n    Time time = startTime;\n\n    NS_LOG_INFO(\"--- Create multicast group \" << groupAddress << \" ---\");\n\n    helper->SetMulticastGroupRoutes(source,\n                                    groupReceivers,\n                                    helper->GetUserAddress(source),\n                                    groupAddress);\n\n    NS_LOG_INFO(\"--- Creating traffic generator for \" << groupAddress << \" ---\");\n\n    // CBR traffic generator for multicast group with interval 0.4s and packet size 512 bytes\n    CbrHelper cbrHelper(\"ns3::UdpSocketFactory\", InetSocketAddress(groupAddress, port));\n    cbrHelper.SetAttribute(\"Interval\", StringValue(\"0.4s\"));\n    cbrHelper.SetAttribute(\"PacketSize\", UintegerValue(512));\n\n    ApplicationContainer cbr = cbrHelper.Install(source);\n    cbr.Start(startTime + Seconds(0.4));\n    cbr.Stop(startTime + Seconds(1.0));\n\n    NS_LOG_INFO(\"--- Group \" << groupAddress << \" source: \" << GetUserInfo(helper, source)\n                             << \" ---\");\n\n    ApplicationContainer sink;\n\n    std::stringstream receiverInfo;\n    receiverInfo << \"--- Group \" << groupAddress << \" receivers: \";\n\n    if (sinkToAll)\n    {\n        NodeContainer users = NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNodes(),\n                                            Singleton<SatTopology>::Get()->GetUtUserNodes());\n\n        PacketSinkHelper sinkHelperGroup(\"ns3::UdpSocketFactory\",\n                                         InetSocketAddress(groupAddress, port));\n\n        // Sinks for group receivers\n        for (uint32_t i = 0; i < users.GetN(); i++)\n        {\n            sink.Add(sinkHelperGroup.Install(users.Get(i)));\n\n            std::string nodeName = GetUserInfo(helper, users.Get(i));\n            std::stringstream context;\n            context << groupAddress << \"/\" << nodeName;\n\n            DynamicCast<PacketSink>(sink.Get(i))\n                ->TraceConnect(\"Rx\", context.str(), MakeCallback(&SinkReceive));\n        }\n\n        // output real group receivers\n        for (uint32_t i = 0; i < groupReceivers.GetN(); i++)\n        {\n            std::string nodeName = GetUserInfo(helper, groupReceivers.Get(i));\n            receiverInfo << nodeName << \" \";\n        }\n    }\n    else\n    {\n        PacketSinkHelper sinkHelperGroup(\"ns3::UdpSocketFactory\",\n                                         InetSocketAddress(groupAddress, port));\n\n        // Sinks for group receivers\n        for (uint32_t i = 0; i < groupReceivers.GetN(); i++)\n        {\n            sink.Add(sinkHelperGroup.Install(groupReceivers.Get(i)));\n\n            std::string nodeName = GetUserInfo(helper, groupReceivers.Get(i));\n            receiverInfo << nodeName << \" \";\n\n            std::stringstream context;\n            context << groupAddress << \"/\" << nodeName;\n\n            DynamicCast<PacketSink>(sink.Get(i))\n                ->TraceConnect(\"Rx\", context.str(), MakeCallback(&SinkReceive));\n        }\n    }\n\n    receiverInfo << \"---\";\n    NS_LOG_INFO(receiverInfo.str());\n\n    sink.Start(startTime);\n    sink.Stop(startTime + Seconds(2));\n\n    Simulator::Schedule(startTime + Seconds(1.41), &LogEmptyLine);\n\n    return startTime + Seconds(1);\n}\n\nint\nmain(int argc, char* argv[])\n{\n    /// Enable info logs\n    LogComponentEnable(\"CbrApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"sat-multicast-example\", LOG_LEVEL_INFO);\n\n    NS_LOG_INFO(\"--- Starting sat-multicast-example ---\");\n\n    enum PreDefinedGroup\n    {\n        ALL_GROUPS,\n        GROUP_1,\n        GROUP_2,\n        GROUP_3,\n        GROUP_4,\n        GROUP_5,\n        GROUP_6,\n        GROUP_7,\n        GROUP_8,\n        GROUP_9,\n        GROUP_10,\n        GROUP_11,\n        GROUP_12,\n        END_OF_GROUP\n    };\n\n    uint32_t preDefinedGroup = (uint32_t)GROUP_1;\n    uint32_t fullScenarioReceivers = 10;\n    std::string scenario = \"larger\";\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::LARGER;\n    bool sinkToAll = false; // when set sink(s) are added to all user nodes in order to test that\n                            // unnecessary routes are not added\n\n    Ptr<Node> groupSource;\n    NodeContainer groupReceivers;\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-multicast\");\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    /// Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (larger or full\", scenario);\n    cmd.AddValue(\"preDefinedGroup\",\n                 \"Pre-defined multicast group for larger scenario. (0 = all)\",\n                 preDefinedGroup);\n    cmd.AddValue(\"fullScenarioReceivers\",\n                 \"Number of the receivers in full scenario\",\n                 fullScenarioReceivers);\n    cmd.AddValue(\"sinkToAll\", \"Add multicast sink to all users.\", sinkToAll);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Set network types which support multicast\n    Config::SetDefault(\"ns3::SatUserHelper::BackboneNetworkType\",\n                       EnumValue(SatUserHelper::NETWORK_TYPE_CSMA));\n    Config::SetDefault(\"ns3::SatUserHelper::SubscriberNetworkType\",\n                       EnumValue(SatUserHelper::NETWORK_TYPE_CSMA));\n\n    Time startTime = Seconds(1.2);\n    simulationHelper->SetOutputTag(scenario);\n    simulationHelper->SetSimulationTime(startTime + Seconds(3.0));\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n    else\n    {\n        NS_FATAL_ERROR(satScenario << \" not supported!!!\");\n    }\n\n    /// Remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    /// Create satellite helper with given scenario default=larger\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    Ptr<SatHelper> helper = simulationHelper->CreateSatScenario(satScenario);\n\n    NS_LOG_INFO(\"--- Creating scenario: \" << scenario << \" ---\");\n\n    if (sinkToAll)\n    {\n        NS_LOG_INFO(\"--- Add sink to each users ---\");\n    }\n\n    uint16_t multicastPort = 9; // Discard port (RFC 863)\n\n    /// Get users\n    NodeContainer utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes();\n    NodeContainer gwUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n\n    if (scenario == \"larger\")\n    {\n        uint32_t currentGroup = preDefinedGroup;\n\n        if (preDefinedGroup == ALL_GROUPS)\n        {\n            currentGroup = 1;\n        }\n\n        for (uint32_t i = currentGroup; i < END_OF_GROUP; i++)\n        {\n            groupReceivers = NodeContainer();\n\n            switch (i)\n            {\n            // Pre-defined group 1, Source= GW-user-1, Receivers= UT1-user-1, UT1-user-2,\n            // UT2-user-1, UT3-user-1, UT4-user-1\n            case GROUP_1:\n                groupSource = gwUsers.Get(0);\n                groupReceivers.Add(utUsers.Get(0));\n                groupReceivers.Add(utUsers.Get(1));\n                groupReceivers.Add(utUsers.Get(2));\n                groupReceivers.Add(utUsers.Get(3));\n                groupReceivers.Add(utUsers.Get(4));\n                break;\n\n            case GROUP_2:\n                // Pre-defined group 2, Source= GW-user-1, Receivers= UT1-user-2, UT2-user-1,\n                // UT4-user-1\n                groupSource = gwUsers.Get(0);\n                groupReceivers.Add(utUsers.Get(1));\n                groupReceivers.Add(utUsers.Get(2));\n                groupReceivers.Add(utUsers.Get(4));\n                break;\n\n            case GROUP_3:\n                // Pre-defined group 3, Source= UT1-user-1, Receivers= UT1-user-2, UT2-user-1,\n                // UT4-user-1\n                groupSource = utUsers.Get(0);\n                groupReceivers.Add(utUsers.Get(1));\n                groupReceivers.Add(utUsers.Get(2));\n                groupReceivers.Add(utUsers.Get(4));\n                break;\n\n            case GROUP_4:\n                // Pre-defined group 4, Source= UT1-user-2, Receivers= UT2-user-1, UT4-user-1\n                groupSource = utUsers.Get(1);\n                groupReceivers.Add(utUsers.Get(2));\n                groupReceivers.Add(utUsers.Get(4));\n                break;\n\n            case GROUP_5:\n                // Pre-defined group 5, Source= UT1-user-1, Receivers= UT3-user-1, UT4-user-1\n                groupSource = utUsers.Get(0);\n                groupReceivers.Add(utUsers.Get(3));\n                groupReceivers.Add(utUsers.Get(4));\n                break;\n\n            case GROUP_6:\n                // Pre-defined group 6, Source= UT1-user-2, Receivers= UT2-user-1, GW-user-1\n                groupSource = utUsers.Get(1);\n                groupReceivers.Add(utUsers.Get(2));\n                groupReceivers.Add(gwUsers.Get(0));\n                break;\n\n            case GROUP_7:\n                // Pre-defined group 7, Source= UT1-user-1, Receivers= GW-user-1\n                groupSource = utUsers.Get(0);\n                groupReceivers.Add(gwUsers.Get(0));\n                break;\n\n            case GROUP_8:\n                // Pre-defined group 8, Source= UT1-user-2, Receivers= UT2-user-1\n                groupSource = utUsers.Get(1);\n                groupReceivers.Add(utUsers.Get(2));\n                break;\n\n            case GROUP_9:\n                // Pre-defined group 9, Source= UT1-user-1, Receivers= GW-user-1, UT4-user-1\n                groupSource = utUsers.Get(0);\n                groupReceivers.Add(gwUsers.Get(0));\n                groupReceivers.Add(utUsers.Get(4));\n                break;\n\n            case GROUP_10:\n                // Pre-defined group 10, Source= UT1-user-1, UT3-user-1\n                groupSource = utUsers.Get(0);\n                groupReceivers.Add(utUsers.Get(3));\n                break;\n\n            case GROUP_11:\n                // Pre-defined group 10, Source= UT1-user-1, UT4-user-1\n                groupSource = utUsers.Get(0);\n                groupReceivers.Add(utUsers.Get(4));\n                break;\n\n            case GROUP_12:\n                // Pre-defined group 10, Source= UT1-user-1, UT2-user-1\n                groupSource = utUsers.Get(0);\n                groupReceivers.Add(utUsers.Get(2));\n                break;\n\n            default:\n                NS_FATAL_ERROR(\"Not supported pre-defined group!!!\");\n                break;\n            }\n\n            NS_LOG_INFO(\"--- Creating multicast pre-defined group \" << preDefinedGroup << \" ---\");\n\n            /// Create multicast groups 255.1.x.1, x predefined group number\n\n            std::stringstream groupAddress;\n            groupAddress << \"225.1.\" << i << \".1\";\n            Ipv4Address multicastGroup(groupAddress.str().c_str());\n\n            startTime = EstablishMulticastGroup(helper,\n                                                groupSource,\n                                                groupReceivers,\n                                                multicastGroup,\n                                                multicastPort,\n                                                startTime,\n                                                sinkToAll);\n        }\n    }\n    else\n    {\n        NS_LOG_INFO(\"--- Creating multicast group in full scenario ---\");\n\n        // get all users\n        NodeContainer users = NodeContainer(gwUsers, utUsers);\n\n        // add two sources from GW users and UT users randomly\n        std::vector<uint32_t> sources;\n        sources.push_back(std::rand() % gwUsers.GetN());\n        sources.push_back((std::rand() % utUsers.GetN()) + gwUsers.GetN());\n\n        // create two multicast groups with UT and GW sources\n        for (uint32_t i = 0; i < sources.size(); i++)\n        {\n            std::vector<uint32_t> ids;\n\n            for (uint32_t j = 0; j < users.GetN(); j++)\n            {\n                // add user only to possible receivers only if not source\n                if (j != sources[i])\n                {\n                    ids.push_back(j);\n                }\n            }\n\n            // randomize users\n            std::random_shuffle(ids.begin(), ids.end());\n\n            // set source GW or UT users\n            groupSource = users.Get(sources[i]);\n\n            // select reeivers\n            groupReceivers = NodeContainer();\n\n            for (uint32_t j = 0; ((j < fullScenarioReceivers) && (j < ids.size())); j++)\n            {\n                groupReceivers.Add(users.Get(ids.at(j)));\n            }\n\n            std::stringstream groupAddress;\n            groupAddress << \"225.1.\" << i << \".1\";\n            Ipv4Address multicastGroup(groupAddress.str().c_str());\n\n            startTime = EstablishMulticastGroup(helper,\n                                                groupSource,\n                                                groupReceivers,\n                                                multicastGroup,\n                                                multicastPort,\n                                                startTime,\n                                                sinkToAll);\n        }\n    }\n\n    NS_LOG_INFO(\"--- Running simulation ---\");\n\n    simulationHelper->RunSimulation();\n\n    NS_LOG_INFO(\"--- Finished ---\");\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-ncr-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-ncr-example.cc\n * \\ingroup satellite *\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-ncr-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId = 1;\n    uint32_t endUsersPerUt = 1;\n    uint32_t utsPerBeam = 10;\n\n    uint32_t packetSize = 512;\n    std::string interval = \"100ms\";\n\n    double simLength = 60.0;\n\n    uint32_t guardTime = 4;\n    int32_t clockDrift = 50;\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-ncr\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"beamId\", \"ID of beam used\", beamId);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"endUsersPerUt\", \"Number end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"packetSize\", \"Constant packet size in bytes\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval between two UDP packets per UT\", interval);\n    cmd.AddValue(\"guardTime\", \"Guard time in time slots in symbols\", guardTime);\n    cmd.AddValue(\"clockDrift\", \"Drift value of UT clocks in ticks per second\", clockDrift);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // Set beam ID\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n    simulationHelper->SetSimulationTime(Seconds(simLength));\n    simulationHelper->EnableProgressLogs();\n\n    // Set 2 RA frames including one for logon\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\",\n                       EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_0));\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_SLOTTED_ALOHA));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_RandomAccessFrame\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame1_RandomAccessFrame\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame1_LogonFrame\", BooleanValue(true));\n\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame1_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame2_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame3_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame4_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame5_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame6_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame7_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame8_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame9_GuardTimeSymbols\",\n                       UintegerValue(guardTime));\n\n    Config::SetDefault(\"ns3::SatUtMac::WindowInitLogon\", TimeValue(Seconds(20)));\n    Config::SetDefault(\"ns3::SatUtMac::MaxWaitingTimeLogonResponse\", TimeValue(Seconds(1)));\n\n    Config::SetDefault(\"ns3::SatMac::NcrVersion2\", BooleanValue(false));\n    Config::SetDefault(\"ns3::SatGwMac::NcrBroadcastPeriod\", TimeValue(MilliSeconds(100)));\n    Config::SetDefault(\"ns3::SatGwMac::UseCmt\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatUtMacState::NcrSyncTimeout\", TimeValue(Seconds(1)));\n    Config::SetDefault(\"ns3::SatUtMacState::NcrRecoveryTimeout\", TimeValue(Seconds(10)));\n    Config::SetDefault(\"ns3::SatNcc::UtTimeout\", TimeValue(Seconds(10)));\n\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotInterval\", TimeValue(MilliSeconds(500)));\n\n    Config::SetDefault(\"ns3::SatUtMac::ClockDrift\", IntegerValue(clockDrift));\n    Config::SetDefault(\"ns3::SatGwMac::CmtPeriodMin\", TimeValue(MilliSeconds(550)));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(0.1),\n        Seconds(simLength),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(0.1),\n        Seconds(simLength),\n        Seconds(0));\n\n    // To store attributes to file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n    simulationHelper->StoreAttributesToFile(\"output-attributes.xml\");\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnAppDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-nrtv-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Budiarto Herman <budiarto.herman@magister.fi>\n *\n */\n\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-nrtv-example.cc\n * \\ingroup satellite\n * \\brief Example of using NRTV traffic model in a satellite network.\n *\n * One NRTV server application is installed in the first GW user. Then one NRTV\n * client application is installed in each UT user, configured to point to the\n * server. TCP protocol is used between the applications.\n *\n * By default, the SIMPLE test scenario is used. Another test scenario can be\n * given from command line as user argument, e.g.:\n *\n *     $ ./waf --run=\"sat-nrtv-example --scenario=larger\"\n *     $ ./waf --run=\"sat-nrtv-example --scenario=full\"\n *\n * Simulation runs for 100 seconds by default. This can be changed from the\n * command line argument as well, e.g.:\n *\n *     $ ./waf --run=\"sat-nrtv-example --duration=500\"\n *\n * To see help for user arguments:\n *\n *     $ ./waf --run \"sat-nrtv-example --PrintHelp\"\n *\n */\nNS_LOG_COMPONENT_DEFINE(\"sat-nrtv-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    // a workaround to partially resolve weird splitting in lower layer\n    // Config::SetDefault (\"ns3::TcpL4Protocol::SocketType\",\n    //                     StringValue (\"ns3::TcpRfc793\"));\n\n    std::string scenario = \"simple\";\n    double duration = 100;\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-nrtv\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full)\", scenario);\n    cmd.AddValue(\"duration\", \"Simulation duration (in seconds)\", duration);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    /// Set simulation output details\n    simulationHelper->SetOutputTag(scenario);\n    simulationHelper->SetSimulationTime(duration);\n\n    // LogComponentEnableAll (LOG_PREFIX_ALL);\n    // LogComponentEnable (\"NrtvClient\", LOG_LEVEL_ALL);\n    // LogComponentEnable (\"NrtvServer\", LOG_LEVEL_ALL);\n    LogComponentEnable(\"sat-nrtv-example\", LOG_LEVEL_INFO);\n\n    // remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario(satScenario);\n\n    // get users\n    NodeContainer utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes();\n    NodeContainer gwUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n\n    NrtvHelper nrtvHelper(TypeId::LookupByName(\"ns3::TcpSocketFactory\"));\n    nrtvHelper.InstallUsingIpv4(gwUsers.Get(0), utUsers);\n    nrtvHelper.GetServer().Start(Seconds(1.0));\n\n    auto apps = nrtvHelper.GetClients();\n    apps.Start(Seconds(3.0));\n    uint32_t i = 0;\n    std::vector<Ptr<ClientRxTracePlot>> plots;\n    for (auto app = apps.Begin(); app != apps.End(); app++, i++)\n    {\n        std::stringstream plotName;\n        plotName << \"NRTV-TCP-client-\" << i << \"-trace\";\n        plots.push_back(CreateObject<ClientRxTracePlot>(*app, plotName.str()));\n    }\n\n    NS_LOG_INFO(\"--- sat-nrtv-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n    plots.clear();\n\n    return 0;\n\n} // end of `int main (int argc, char *argv[])`\n"
    },
    {
      "file_path": "examples/sat-onoff-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Sami Rantanen <sami.rantanen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-onoff-example.cc\n * \\ingroup satellite\n *\n * \\brief  OnOff example application to use satellite network.\n *         Data rate, packet size, sender(s), on/off times, test scenario and\n *         creation log file name can be given in command line as user argument.\n *         To see help for user arguments:\n *         execute command -> ./waf --run \"on-off-example --PrintHelp\"\n *\n *         On-Off application send packets from GW connected user\n *         to UT connected user and after that from UT connected user to GW connected\n *         user according to given parameters.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"OnOff-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t packetSize = 512;\n    std::string dataRate = \"500kb/s\";\n    std::string onTime = \"1.0\";\n    std::string offTime = \"0.5\";\n    std::string scenario = \"simple\";\n    std::string sender = \"both\";\n    std::string simDuration = \"11s\";\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-onoff\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n\n    // enable packet traces on satellite modules\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes e.g 512)\", packetSize);\n    cmd.AddValue(\"dataRate\", \"Data rate (e.g. 500kb/s)\", dataRate);\n    cmd.AddValue(\"onTime\", \"Time for packet sending is on in seconds, (e.g. (1.0)\", onTime);\n    cmd.AddValue(\"offTime\", \"Time for packet sending is off in seconds, (e.g. (0.5)\", offTime);\n    cmd.AddValue(\"sender\", \"Packet sender (ut, gw, or both).\", sender);\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full\", scenario);\n    cmd.AddValue(\"simDuration\", \"Duration of the simulation (Time)\", simDuration);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetSimulationTime(Time(simDuration));\n    simulationHelper->SetOutputTag(scenario);\n\n    // select scenario, if correct one given, by default simple scenarion is used.\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    // enable info logs\n    LogComponentEnable(\"OnOffApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"OnOff-example\", LOG_LEVEL_INFO);\n\n    // remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario(satScenario);\n\n    // --- Create applications according to given user parameters\n\n    // assert if sender is not valid\n    NS_ASSERT_MSG(((sender == \"gw\") || (sender == \"ut\") || (sender == \"both\")),\n                  \"Sender argument invalid.\");\n\n    // in case of sender is GW or Both, create OnOff application to GW connected user\n    // and Sink application to UT connected user\n    if ((sender == \"gw\") || (sender == \"both\"))\n    {\n        simulationHelper->GetTrafficHelper()->AddOnOffTraffic(\n            SatTrafficHelper::FWD_LINK,\n            SatTrafficHelper::UDP,\n            DataRate(dataRate),\n            packetSize,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            \"ns3::ConstantRandomVariable[Constant=\" + onTime + \"]\",\n            \"ns3::ConstantRandomVariable[Constant=\" + offTime + \"]\",\n            Seconds(1.0),\n            Time(simDuration),\n            Seconds(0));\n    }\n\n    // in case of sender is UT or Both, create OnOff application to UT connected user\n    // and Sink application to GW connected user\n    if (sender == \"ut\" || sender == \"both\")\n    {\n        simulationHelper->GetTrafficHelper()->AddOnOffTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            DataRate(dataRate),\n            packetSize,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            \"ns3::ConstantRandomVariable[Constant=\" + onTime + \"]\",\n            \"ns3::ConstantRandomVariable[Constant=\" + offTime + \"]\",\n            Seconds(2.0),\n            Time(simDuration),\n            Seconds(0));\n    }\n\n    // prompt info of the used parameters\n    NS_LOG_INFO(\"--- sat-onoff-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  Sender: \" << sender);\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  DataRate: \" << dataRate);\n    NS_LOG_INFO(\"  OnTime: \" << onTime);\n    NS_LOG_INFO(\"  OffTime: \" << offTime);\n    NS_LOG_INFO(\"  Duration: \" << simDuration);\n    NS_LOG_INFO(\"  \");\n\n    // run simulation and finally destroy it\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-per-packet-if-sim-tn9.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Budiarto Herman <budiarto.herman@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n\n#include <sys/stat.h>\n#include <unistd.h>\n\nusing namespace ns3;\n\n/**\n * \\file sat-per-packet-if-sim-tn9.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results related to per-packet\n * interference performance.\n *\n * execute command -> ./waf --run \"sat-per-packet-if-sim-tn9 --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-per-packet-if-sim-tn9\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(220); // expected to be equivalent with 70% system load\n    DataRate dataRate(32000); // in bps\n    uint32_t beamConf(0);\n    uint32_t fadingConf(0);\n\n    uint32_t packetSize(1280); // in bytes\n    double simLength(50.0);    // in seconds\n    Time appStartTime = Seconds(0.1);\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-per-packet-if-sim-tn9\");\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    // To read attributes from file\n    std::string pathToFile = Singleton<SatEnvVariables>::Get()->LocateFile(\n        \"contrib/satellite/examples/tn9-dama-input-attributes.xml\");\n\n    /**\n     * Attributes:\n     * -----------\n     *\n     * Scenario (selected from command line argument):\n     *   - 1 beam (beam id = 18)\n     *   - 18 co-channel beams (user link frequency ID = 1)\n     *\n     * Frame configuration (configured in tn9-dama-input-attributes.xml):\n     *   - 4 frames (13.75 MHz user bandwidth)\n     *     - 8 x 0.3125 MHz -> 2.5 MHz\n     *     - 8 x 0.625 MHz  -> 5 MHz\n     *     - 4 x 1.25 MHz   -> 5 MHz\n     *     - 1 x 1.25 MHz   -> 1.25 MHz\n     *\n     * NCC configuration modes\n     *   - Conf-2 scheduling mode (dynamic time slots)\n     *   - FCA disabled\n     *\n     * Fading configuration (selected from command line argument):\n     *   - Markov\n     *   - Rain\n     *\n     * RTN link\n     *   - Per-packet interference\n     *   - AVI error model\n     *   - ARQ disabled\n     * FWD link\n     *   - ACM disabled\n     *   - Per-packet interference\n     *   - No error model\n     *   - ARQ disabled\n     *\n     */\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"beamConf\", \"Beam configuration\", beamConf);\n    cmd.AddValue(\"fadingConf\", \"Fading configuration (0: Markov, 1: Rain)\", fadingConf);\n    simulationHelper->AddDefaultUiArguments(cmd, pathToFile);\n    cmd.Parse(argc, argv);\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(pathToFile));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n\n    ConfigStore inputConfig;\n    inputConfig.ConfigureDefaults();\n\n    // NCC configuration\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\", StringValue(\"ConfigType_2\"));\n    Config::SetDefault(\"ns3::SatWaveformConf::AcmEnabled\", BooleanValue(true));\n\n    // RBDC\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_MinimumServiceRate\",\n                       UintegerValue(16));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue(SatEnums::RA_MODEL_OFF));\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(true));\n\n    // Per-packet interference\n    Config::SetDefault(\"ns3::SatUtHelper::DaFwdLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::DaFwdLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::DaRtnLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatGwHelper::DaRtnLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    switch (fadingConf)\n    {\n    case 0: {\n        // Markov fading\n        Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_MARKOV));\n        break;\n    }\n    case 1: {\n        Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_OFF));\n\n        // Rain fading\n        // Note, that the positions of the fading files do not necessarily match with the\n        // beam location, since this example is not using list position allocator!\n        Config::SetDefault(\"ns3::SatChannel::EnableExternalFadingInputTrace\", BooleanValue(true));\n        Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtFwdDownIndexFileName\",\n                           StringValue(\"BeamId-1_256_UT_fading_fwddwn_trace_index.txt\"));\n        Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtRtnUpIndexFileName\",\n                           StringValue(\"BeamId-1_256_UT_fading_rtnup_trace_index.txt\"));\n\n        break;\n    }\n    default: {\n        NS_FATAL_ERROR(\"Unsupported fadingConf: \" << fadingConf);\n        break;\n    }\n    }\n\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    switch (beamConf)\n    {\n    // Single beam\n    case 0: {\n        // Spot-beam over Finland\n        simulationHelper->SetBeamSet({18});\n        break;\n    }\n    // All co-channel beams (e.g., color 1 with 72/4 = 18 beams)\n    case 1: {\n        // choose beams from user link frequency ID = 1 (TN3 appendix A)\n        simulationHelper->SetBeamSet(\n            {1, 3, 5, 7, 9, 22, 24, 26, 28, 30, 44, 46, 48, 50, 59, 61, 70, 72});\n        break;\n    }\n    default: {\n        NS_FATAL_ERROR(\"Unsupported beam configuration: \" << beamConf);\n    }\n    }\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddOnOffTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        dataRate,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        \"ns3::ConstantRandomVariable[Constant=1000]\",\n        \"ns3::ConstantRandomVariable[Constant=0]\",\n        appStartTime,\n        Seconds(simLength + 1),\n        MilliSeconds(50));\n\n    /**\n     * Set-up statistics\n     */\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddGlobalFwdCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n\n    s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n\n    s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_CDF_FILE);\n\n    NS_LOG_INFO(\"--- sat-per-packet-if-sim-tn9 ---\");\n    NS_LOG_INFO(\"  Packet size: \" << packetSize);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n    // std::stringstream filename;\n    // filename << \"tn9-per-packet-if-output-attributes-ut\" << utsPerBeam\n    //          << \"-conf\" << beamConf << \".xml\";\n    //\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (filename.str ()));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-profiling-sim-tn8.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-profiling-sim-tn8.cc\n * \\ingroup satellite\n *\n *\\brief An example used for running the performance profiling simulations\n * presented in TN8. The example supports a selection between a single beam\n * simulation and a full scenario. Additionally, it is possible to select\n * the number of UTs per beam.\n *\n * execute command -> ./waf --run \"sat-profiling-sim-tn8 --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-profiling-sim-tn8\");\n\nvoid\nTimeTickerCallback()\n{\n    std::cout << \"Time: \" << Simulator::Now().GetSeconds() << \"s\" << std::endl;\n}\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(1);\n    uint32_t profilingConf(0);\n\n    // 256 kbps per end user\n    uint32_t packetSize(1280); // in bytes\n    double intervalSeconds = 0.04;\n\n    double simLength; // defined later in scenario creation\n    Time appStartTime = Seconds(0.1);\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-profiling-sim-tn8\");\n\n    // To read attributes from file\n    //  std::string inputFileNameWithPath = Singleton<SatEnvVariables>::Get ()->LocateDirectory\n    //  (\"contrib/satellite/examples\") + \"/tn8-profiling-input-attributes.xml\"; Config::SetDefault\n    //  (\"ns3::ConfigStore::Filename\", StringValue (inputFileNameWithPath)); Config::SetDefault\n    //  (\"ns3::ConfigStore::Mode\", StringValue (\"Load\")); Config::SetDefault\n    //  (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\")); ConfigStore inputConfig;\n    //  inputConfig.ConfigureDefaults ();\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"profilingConf\", \"Profiling configuration\", profilingConf);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\", StringValue(\"ConfigType_2\"));\n    Config::SetDefault(\"ns3::SatWaveformConf::AcmEnabled\", BooleanValue(true));\n\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_MinimumServiceRate\",\n                       UintegerValue(64));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    switch (profilingConf)\n    {\n    // Single beam\n    case 0: {\n        // Spot-beam over Finland\n        uint32_t beamId = 18;\n        simLength = 60.0; // in seconds\n\n        // create user defined scenario\n        simulationHelper->SetUtCountPerBeam(utsPerBeam);\n        simulationHelper->SetUserCountPerUt(endUsersPerUt);\n        simulationHelper->SetBeamSet({beamId});\n        simulationHelper->SetSimulationTime(simLength);\n        simulationHelper->CreateSatScenario();\n        break;\n    }\n    // Full\n    case 1: {\n        simLength = 30.0; // in seconds\n\n        simulationHelper->SetSimulationTime(simLength);\n        simulationHelper->CreateSatScenario(SatHelper::FULL);\n        break;\n    }\n    default: {\n        NS_FATAL_ERROR(\"Invalid profiling configuration\");\n    }\n    }\n\n    /**\n     * Set-up CBR traffic\n     */\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Seconds(intervalSeconds),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        Seconds(simLength + 1),\n        MilliSeconds(10));\n\n    /**\n     * Set-up statistics\n     */\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFrameSymbolLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    NS_LOG_INFO(\"--- sat-profiling-sim-tn8 ---\");\n    NS_LOG_INFO(\"  Packet size: \" << packetSize);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n    std::stringstream filename;\n    filename << \"tn8-profiling-output-attributes-conf-\" << profilingConf << \"-uts-\" << utsPerBeam\n             << \".xml\";\n\n    //  Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (filename.str ()));\n    //  Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    //  Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    //  ConfigStore outputConfig;\n    //  outputConfig.ConfigureDefaults ();\n\n    /**\n     * Install simple stdout time ticker\n     */\n\n    double t = 0.0;\n    while (t <= simLength)\n    {\n        Simulator::Schedule(Seconds(t), &TimeTickerCallback);\n        t = t + 1.0;\n    }\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-profiling-sim.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2016 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-profiling-sim.cc\n * \\ingroup satellite\n *\n * \\brief\n *         To see help for user arguments:\n *         execute command -> ./waf --run \"sat-profiling-sim --PrintHelp\"\n *\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-profiling-sim\");\n\nint\nmain(int argc, char* argv[])\n{\n    LogComponentEnable(\"CbrApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n\n    uint32_t utsPerBeam(1);\n    uint32_t endUsersPerUt(1);\n    double simulationTime(10.0);\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"sat-profiling-sim\");\n\n    simulationHelper->SetDefaultValues();\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetSimulationTime(simulationTime);\n\n    simulationHelper->SetBeams(\"48\");\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    // ----------------------------------\n    // ----- CREATE CBR APPLICATION -----\n    // ----------------------------------\n    NodeContainer utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes();\n\n    NS_ASSERT(utUsers.GetN() == 1);\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Seconds(2),\n        64,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1),\n        Seconds(simulationTime),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Seconds(2),\n        64,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1),\n        Seconds(simulationTime),\n        Seconds(0));\n    // ----------------------------------\n    // ----- CREATE CBR APPLICATION -----\n    // ----------------------------------\n\n    simulationHelper->CreateDefaultRtnLinkStats();\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-ra-sim-tn9-comparison.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-ra-sim-tn9-comparison.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results related to satellite RTN\n * link performance. Currently only one beam is simulated with variable amount of users\n * and RA-DAMA configuration. This example is a CRDSA decoder test for providing comparison\n * results with the following parameters:\n * - 1 unique payload per frame per UT\n * - 1 beam simulated (Beam ID 18)\n * - 0% backoff probability\n * - DAMA and CRA disabled\n * - Fading disabled\n * - CBR with 1 burst per frame\n * - 30, 60, 90, 120, 150, 180, 210, 240 UTs\n * - 2 and 3 replicas\n * - infinite max num of consecutive blocks accessed\n * - dynamic load control off\n *\n * As output, the example provides statistics about RA collision and error rate,\n * throughput, packet delay, SINR, resources granted, frame load and waveform usage.\n * The random access CRDSA decoder comparison results for TN9 were obtained by using this script.\n *\n * execute command -> ./waf --run \"sat-ra-sim-tn9-comparison --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-ra-sim-tn9-comparison\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId(18);\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(1);\n    uint32_t packetSize(1);\n    uint32_t numOfInstances(3);\n    double intervalInSeconds(0.1);\n    bool isNoisy(false);\n\n    double simLength(60.0); // in seconds\n    Time appStartTime = Seconds(0.1);\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-ra-sim-tn9-comparison\");\n    // To read attributes from file\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/tn9-ra-input-attributes.xml\";\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"numOfInstances\", \"Number of CRDSA packet instances\", numOfInstances);\n    cmd.AddValue(\"isNoisy\", \"If true, may print some logging messages\", isNoisy);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n\n    if (isNoisy)\n    {\n        LogComponentEnable(\"sat-ra-sim-tn9\", LOG_INFO);\n    }\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(inputFileNameWithPath));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    ConfigStore inputConfig;\n    inputConfig.ConfigureDefaults();\n\n    // Enable Random Access with all available modules\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_RCS2_SPECIFICATION));\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Disable fading\n    Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_OFF));\n\n    // Disable C/NO reporting\n    Config::SetDefault(\"ns3::SatRequestManager::CnoReportInterval\", TimeValue(Seconds(60.0)));\n\n    // Disable periodic control slots\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(false));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(0));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(50));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.99));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(numOfInstances));\n\n    // Disable CRA and DAMA\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Creating the reference system.\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    /**\n     * Set-up CBR traffic\n     */\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Seconds(intervalInSeconds),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        Seconds(simLength + 1),\n        Seconds(0.01));\n\n    if (isNoisy)\n    {\n        const double kbps = packetSize / intervalInSeconds / 125.0;\n        std::cout << \"Each of \" << utsPerBeam * endUsersPerUt << \" UT Users\"\n                  << \" offer bandwidth of \" << kbps << \" kbps\" << std::endl;\n    }\n\n    /**\n     * Set-up statistics\n     */\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnDevDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnPhyDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnDevDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnPhyDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnMacDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n\n    // s->AddPerUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    // s->AddPerUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    // s->AddPerUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    // s->AddPerUtUserRtnDevThroughput (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    // s->AddPerUtUserRtnDevThroughput (SatStatsHelper::OUTPUT_SCATTER_PLOT);\n\n    // s->AddPerUtUserRtnAppDelay (SatStatsHelper::OUTPUT_CDF_FILE);\n    // s->AddPerUtUserRtnAppDelay (SatStatsHelper::OUTPUT_CDF_PLOT);\n    // s->AddPerUtRtnDevDelay (SatStatsHelper::OUTPUT_CDF_FILE);\n    // s->AddPerUtRtnDevDelay (SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamFrameSymbolLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamWaveformUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerBeamRtnFeederDaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerBeamFeederCrdsaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederCrdsaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederSlottedAlohaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederSlottedAlohaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    // s->AddPerUtFeederCrdsaPacketCollision (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    // s->AddPerUtFeederCrdsaPacketError (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    // s->AddPerUtFeederSlottedAlohaPacketCollision (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    // s->AddPerUtFeederSlottedAlohaPacketError (SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    NS_LOG_INFO(\"--- sat-ra-sim-tn9-comparison ---\");\n    NS_LOG_INFO(\"  Packet size: \" << packetSize);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n    // std::stringstream filename;\n    // filename << \"tn9-ra-comparison-output-attributes-uts-\" << utsPerBeam << \"-instances-\" <<\n    // numOfInstances << \".xml\";\n    //\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (filename.str ()));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-ra-sim-tn9.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2013 Magister Solutions Ltd\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-ra-sim-tn9.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results related to satellite RTN\n * link performance. Currently only one beam is simulated with variable amount of users\n * and RA-DAMA configuration. The script supports three different setups: SA + VBDC,\n * CRDSA + VBDC and CRDSA only. As output, the example provides statistics about RA\n * collision and error rate, throughput, packet delay, SINR, resources granted, frame\n * load and waveform usage. The random access results for TN9 were obtained by using\n * this script.\n *\n * execute command -> ./waf --run \"sat-ra-sim-tn9 --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-ra-sim-tn9\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId = 1;\n    uint32_t endUsersPerUt(1);\n    uint32_t raMode(3);\n    uint32_t utsPerBeam(1);\n    uint32_t packetSize(64);\n    std::string dataRate = \"5kb/s\";\n    std::string onTime = \"0.2\";\n    std::string offTime = \"0.8\";\n\n    double simLength(300.0); // in seconds\n\n    /// Set simulation output details\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-ra-sim-tn9\");\n\n    // To read attributes from file\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/tn9-ra-input-attributes.xml\";\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"raMode\", \"RA mode\", raMode);\n    cmd.AddValue(\"simLength\", \"Simulation duration in seconds\", simLength);\n    cmd.AddValue(\"packetSize\", \"Constant packet size in bytes\", packetSize);\n    cmd.AddValue(\"dataRate\", \"Data rate (e.g. 500kb/s)\", dataRate);\n    cmd.AddValue(\"onTime\", \"Time for packet sending is on in seconds\", onTime);\n    cmd.AddValue(\"offTime\", \"Time for packet sending is off in seconds\", offTime);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(inputFileNameWithPath));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    ConfigStore inputConfig;\n    inputConfig.ConfigureDefaults();\n\n    // Enable Random Access with all available modules\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_RCS2_SPECIFICATION));\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(false));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(50));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.99));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n\n    switch (raMode)\n    {\n    // CRDSA + VBDC\n    case 0: {\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(true));\n\n        // Disable periodic control slots\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n        break;\n    }\n    // SA + VBDC\n    case 1: {\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(true));\n\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                           UintegerValue(1));\n\n        // Disable periodic control slots\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n        break;\n    }\n    // Periodic control slots + VBDC\n    case 2: {\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(true));\n\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_OFF));\n\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(true));\n        break;\n    }\n    // CRDSA only\n    case 3: {\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(false));\n\n        // Disable periodic control slots\n        Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n        break;\n    }\n    default: {\n        NS_FATAL_ERROR(\"Unsupported raMode: \" << raMode);\n        break;\n    }\n    }\n\n    // Creating the reference system.\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    /**\n     * Set-up On-Off traffic\n     */\n    simulationHelper->GetTrafficHelper()->AddOnOffTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        dataRate,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        \"ns3::ConstantRandomVariable[Constant=\" + onTime + \"]\",\n        \"ns3::ConstantRandomVariable[Constant=\" + offTime + \"]\",\n        Seconds(0),\n        Seconds(simLength - 2.0),\n        Seconds(0));\n\n    /**\n     * Set-up statistics\n     */\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnDevDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnPhyDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnMacDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnDevDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnPhyDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnMacDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n\n    // s->AddPerUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    // s->AddPerUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    // s->AddPerUtUserRtnAppThroughput (SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    // s->AddPerUtUserRtnDevThroughput (SatStatsHelper::OUTPUT_SCATTER_FILE);\n    // s->AddPerUtUserRtnDevThroughput (SatStatsHelper::OUTPUT_SCATTER_PLOT);\n\n    // s->AddPerUtUserRtnAppDelay (SatStatsHelper::OUTPUT_CDF_FILE);\n    // s->AddPerUtUserRtnAppDelay (SatStatsHelper::OUTPUT_CDF_PLOT);\n    // s->AddPerUtRtnDevDelay (SatStatsHelper::OUTPUT_CDF_FILE);\n    // s->AddPerUtRtnDevDelay (SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamFrameSymbolLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamWaveformUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerBeamRtnFeederDaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddPerBeamFeederCrdsaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederCrdsaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederSlottedAlohaPacketCollision(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFeederSlottedAlohaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    // s->AddPerUtFeederCrdsaPacketCollision (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    // s->AddPerUtFeederCrdsaPacketError (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    // s->AddPerUtFeederSlottedAlohaPacketCollision (SatStatsHelper::OUTPUT_SCALAR_FILE);\n    // s->AddPerUtFeederSlottedAlohaPacketError (SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    NS_LOG_INFO(\"--- sat-ra-sim-tn9 ---\");\n    NS_LOG_INFO(\"  Packet size: \" << packetSize);\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n    // std::stringstream filename;\n    // filename << \"tn9-ra-output-attributes-ut\" << utsPerBeam\n    //          << \"-mode\" << raMode << \".xml\";\n    //\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (filename.str ()));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-random-access-crdsa-collision-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-random-access-crdsa-collision-example.cc\n * \\ingroup satellite\n *\n * \\brief  This is an example of Random Access usage in satellite network. This\n *         example uses only the CRDSA model regardless of the number of instances\n *         parameter. CRA is disabled in this example. The example allows to\n *         set various RA parameters such as the maximum rate limitation related\n *         parameters, back off and load control related parameters.\n *\n *         By default, the RA dynamic load control is disabled in this\n *         example and only CRDSA is used. This example is aimed for CRDSA\n *         collision debugging and modified to produce Rx side only CRDSA log output\n *         with larger amount of UTs.\n *\n *         The script is using CBR application in user defined scenario,\n *         which means that user can change the scenario size quite to be\n *         whatever between 1 and full scenario (72 beams). Currently it\n *         is configured to using only one beam. CBR application is sending\n *         packets in RTN link, i.e. from UT side to GW side. Packet trace\n *         is enabled by default. End user may change the number of UTs and\n *         end users from the command line.\n *\n *         execute command -> ./waf --run \"sat-random-access-crdsa-collision-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-random-access-crdsa-collision-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId(1);\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(30);\n    uint32_t packetSize(20);\n    Time interval(Seconds(0.01));\n    Time simLength(Seconds(3.00));\n    Time appStartTime = Seconds(0.01);\n\n    // Enable info logs\n    LogComponentEnable(\"sat-random-access-crdsa-collision-example\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatRandomAccess\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatUtMac\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatPhyRxCarrier\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatInterference\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatBeamScheduler\", LOG_LEVEL_INFO);\n\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-random-access-crdsa-collision\");\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // Configure error model\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_AVI);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n    // Config::SetDefault (\"ns3::SatUtMac::CrUpdatePeriod\", TimeValue(Seconds(10.0)));\n\n    // Enable Random Access with CRDSA\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_CRDSA));\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Disable periodic control slots\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(false));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(250));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(10000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(30000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.5));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DefaultControlRandomizationInterval\",\n                       TimeValue(MilliSeconds(100)));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::CrdsaSignalingOverheadInBytes\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::SlottedAlohaSignalingOverheadInBytes\",\n                       UintegerValue(3));\n\n    // Disable CRA and DA\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Creating the reference system.\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        interval,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength + Seconds(1),\n        Seconds(0.05));\n\n    NS_LOG_INFO(\"--- Cbr-user-defined-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-random-access-crdsa-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-random-access-crdsa-example.cc\n * \\ingroup satellite\n *\n * \\brief  This is an example of Random Access usage in satellite network. This\n *         example uses only the CRDSA model regardless of the number of instances\n *         parameter. CRA is disabled in this example. The example allows to\n *         set various RA parameters such as the maximum rate limitation related\n *         parameters, back off and load control related parameters.\n *\n *         By default, the RA dynamic load control is disabled in this\n *         example and only CRDSA is used. This example is aimed for CRDSA\n *         debugging and modified to produce full CRDSA log output with only one UT.\n *\n *         The script is using CBR application in user defined scenario,\n *         which means that user can change the scenario size quite to be\n *         whatever between 1 and full scenario (72 beams). Currently it\n *         is configured to using only one beam. CBR application is sending\n *         packets in RTN link, i.e. from UT side to GW side. Packet trace\n *         is enabled by default. End user may change the number of UTs and\n *         end users from the command line.\n *\n *         execute command -> ./waf --run \"sat-random-access-crdsa-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-random-access-crdsa-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId(1);\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(1);\n    uint32_t packetSize(20);\n    Time interval(Seconds(0.01));\n    Time simLength(Seconds(1.00));\n    Time appStartTime = Seconds(0.01);\n\n    // Enable info logs\n    LogComponentEnable(\"sat-random-access-crdsa-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatRandomAccess\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatUtMac\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatPhyRxCarrier\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatInterference\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatBeamScheduler\", LOG_LEVEL_INFO);\n\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-random-access-crdsa\");\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // Configure error model\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_AVI);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n    // Config::SetDefault (\"ns3::SatUtMac::CrUpdatePeriod\", TimeValue(Seconds(10.0)));\n\n    // Enable Random Access with CRDSA\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_CRDSA));\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Disable periodic control slots\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(false));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(250));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(10000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(30000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.5));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DefaultControlRandomizationInterval\",\n                       TimeValue(MilliSeconds(100)));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::CrdsaSignalingOverheadInBytes\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::SlottedAlohaSignalingOverheadInBytes\",\n                       UintegerValue(3));\n\n    // Disable CRA and DA\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Creating the reference system.\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        interval,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength + Seconds(1),\n        Seconds(0.05));\n\n    NS_LOG_INFO(\"--- Cbr-user-defined-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-random-access-dynamic-load-control-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-random-access-dynamic-load-control-example.cc\n * \\ingroup satellite\n *\n * \\brief  This is an example of Random Access usage in satellite network. This\n *         example uses RA models based on DVB-RCS2 specification. CRA\n *         is disabled in this example. The example allows to set various\n *         RA parameters such as the maximum rate limitation related\n *         parameters, back off and load control related parameters.\n *\n *         By default, the RA dynamic load control is enabled in this\n *         example and the example is modified to produce higher load compared\n *         to the basic random access example. As defined in specification,\n *         the operation mode between Slotted ALOHA and CRDSA is determined\n *         by the number of instances parameter.\n *\n *         The script is using CBR application in user defined scenario,\n *         which means that user can change the scenario size quite to be\n *         whatever between 1 and full scenario (72 beams). Currently it\n *         is configured to using only one beam. CBR application is sending\n *         packets in RTN link, i.e. from UT side to GW side. Packet trace\n *         is enabled by default. End user may change the number of UTs and\n *         end users from the command line.\n *\n *         execute command -> ./waf --run \"sat-random-access-dynamic-load-control-example\n * --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-random-access-dynamic-load-control-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId(1);\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(30);\n    uint32_t packetSize(20);\n    Time interval(Seconds(0.01));\n    Time simLength(Seconds(5.00));\n    Time appStartTime = Seconds(0.01);\n\n    // Enable info logs\n    LogComponentEnable(\"sat-random-access-dynamic-load-control-example\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatRandomAccess\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatUtMac\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatPhyRxCarrier\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatInterference\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatNcc\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatBeamScheduler\", LOG_LEVEL_INFO);\n\n    auto simulationHelper =\n        CreateObject<SimulationHelper>(\"example-random-access-dynamic-load-control\");\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // Configure error model\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_AVI);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n    // Config::SetDefault (\"ns3::SatUtMac::CrUpdatePeriod\", TimeValue(Seconds(10.0)));\n\n    // Disable CRA and DA\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Enable Random Access with CRDSA\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_RCS2_SPECIFICATION));\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Disable periodic control slots\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(true));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(250));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.5));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DefaultControlRandomizationInterval\",\n                       TimeValue(MilliSeconds(100)));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::CrdsaSignalingOverheadInBytes\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::SlottedAlohaSignalingOverheadInBytes\",\n                       UintegerValue(3));\n\n    // Creating the reference system.\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        interval,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength + Seconds(1),\n        Seconds(0.05));\n\n    NS_LOG_INFO(\"--- Cbr-user-defined-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-random-access-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-random-access-example.cc\n * \\ingroup satellite\n *\n * \\brief  This is an example of Random Access usage in satellite network. This\n *         example uses RA models based on DVB-RCS2 specification. CRA\n *         is disabled in this example. The example allows to set various\n *         RA parameters such as the maximum rate limitation related\n *         parameters, back off and load control related parameters.\n *\n *         By default, the RA dynamic load control is disabled in this\n *         example. As defined in specification, the operation mode between\n *         Slotted ALOHA and CRDSA is determined by the number of instances\n *         parameter.\n *\n *         The script is using CBR application in user defined scenario,\n *         which means that user can change the scenario size quite to be\n *         whatever between 1 and full scenario (72 beams). Currently it\n *         is configured to using only one beam. CBR application is sending\n *         packets in RTN link, i.e. from UT side to GW side. Packet trace\n *         is enabled by default. End user may change the number of UTs and\n *         end users from the command line.\n *\n *         execute command -> ./waf --run \"sat-random-access-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-random-access-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId(1);\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(1);\n    uint32_t packetSize(20);\n    Time interval(Seconds(0.01));\n    Time simLength(Seconds(3.00));\n    Time appStartTime = Seconds(0.01);\n\n    // Enable info logs\n    LogComponentEnable(\"sat-random-access-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatRandomAccess\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatUtMac\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatPhyRxCarrier\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatInterference\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatBeamScheduler\", LOG_LEVEL_INFO);\n\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-random-access\");\n\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // Configure error model\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_AVI);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n    // Config::SetDefault (\"ns3::SatUtMac::CrUpdatePeriod\", TimeValue(Seconds(10.0)));\n\n    // Enable Random Access with all available modules\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_RCS2_SPECIFICATION));\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Disable periodic control slots\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(false));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(250));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(10000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(30000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.5));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DefaultControlRandomizationInterval\",\n                       TimeValue(MilliSeconds(100)));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::CrdsaSignalingOverheadInBytes\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::SlottedAlohaSignalingOverheadInBytes\",\n                       UintegerValue(3));\n\n    // Disable CRA and DA\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Creating the reference system.\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        interval,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength + Seconds(1),\n        Seconds(0.05));\n\n    NS_LOG_INFO(\"--- Cbr-user-defined-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-random-access-slotted-aloha-collision-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-random-access-slotted-aloha-collision-example.cc\n * \\ingroup satellite\n *\n * \\brief  This is an example of Random Access usage in satellite network. This\n *         example uses only the Slotted ALOHA model regardless of the number of instances\n *         parameter. CRA is disabled in this example. The example allows to\n *         set various RA parameters such as the maximum rate limitation related\n *         parameters, back off and load control related parameters.\n *\n *         By default, the RA dynamic load control is disabled in this\n *         example and only Slotted ALOHA is used. This example is aimed for Slotted ALOHA\n *         collision debugging and modified to produce Rx side only Slotted ALOHA log output\n *         with larger amount of UTs.\n *\n *         The script is using CBR application in user defined scenario,\n *         which means that user can change the scenario size quite to be\n *         whatever between 1 and full scenario (72 beams). Currently it\n *         is configured to using only one beam. CBR application is sending\n *         packets in RTN link, i.e. from UT side to GW side. Packet trace\n *         is enabled by default. End user may change the number of UTs and\n *         end users from the command line.\n *\n *         execute command -> ./waf --run \"sat-random-access-slotted-aloha-collision-example\n * --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-random-access-slotted-aloha-collision-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId(1);\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(30);\n    uint32_t packetSize(20);\n    Time interval(Seconds(0.01));\n    Time simLength(Seconds(3.00));\n    Time appStartTime = Seconds(0.01);\n\n    // Enable info logs\n    LogComponentEnable(\"sat-random-access-slotted-aloha-collision-example\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatRandomAccess\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatUtMac\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatPhyRxCarrier\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatInterference\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatBeamScheduler\", LOG_LEVEL_INFO);\n\n    auto simulationHelper =\n        CreateObject<SimulationHelper>(\"example-random-access-slotted-aloha-collision\");\n\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // Configure error model\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_AVI);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n    // Config::SetDefault (\"ns3::SatUtMac::CrUpdatePeriod\", TimeValue(Seconds(10.0)));\n\n    // Enable Random Access with CRDSA\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_SLOTTED_ALOHA));\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Disable periodic control slots\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(false));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(250));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(10000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(30000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.5));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DefaultControlRandomizationInterval\",\n                       TimeValue(MilliSeconds(100)));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::CrdsaSignalingOverheadInBytes\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::SlottedAlohaSignalingOverheadInBytes\",\n                       UintegerValue(3));\n\n    // Disable CRA and DA\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Creating the reference system.\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        interval,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength + Seconds(1),\n        Seconds(0.05));\n\n    NS_LOG_INFO(\"--- Cbr-user-defined-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-random-access-slotted-aloha-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-random-access-slotted-aloha-example.cc\n * \\ingroup satellite\n *\n * \\brief  This is an example of Random Access usage in satellite network. This\n *         example uses only the Slotted ALOHA model regardless of the number of instances\n *         parameter. CRA is disabled in this example. The example allows to\n *         set various RA parameters such as the maximum rate limitation related\n *         parameters, back off and load control related parameters.\n *\n *         By default, the RA dynamic load control is disabled in this\n *         example and only Slotted ALOHA is used. This example is aimed for Slotted ALOHA\n *         debugging and modified to produce full Slotted ALOHA log output with only one UT.\n *\n *         The script is using CBR application in user defined scenario,\n *         which means that user can change the scenario size quite to be\n *         whatever between 1 and full scenario (72 beams). Currently it\n *         is configured to using only one beam. CBR application is sending\n *         packets in RTN link, i.e. from UT side to GW side. Packet trace\n *         is enabled by default. End user may change the number of UTs and\n *         end users from the command line.\n *\n *         execute command -> ./waf --run \"sat-random-access-slotted-aloha-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-random-access-slotted-aloha-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId(1);\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(1);\n    uint32_t packetSize(20);\n    Time interval(Seconds(0.01));\n    Time simLength(Seconds(3.00));\n    Time appStartTime = Seconds(0.01);\n\n    // Enable info logs\n    LogComponentEnable(\"sat-random-access-slotted-aloha-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatRandomAccess\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatUtMac\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatPhyRxCarrier\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatInterference\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"SatBeamScheduler\", LOG_LEVEL_INFO);\n\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-random-access-slotted-aloha\");\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    // Configure error model\n    SatPhyRxCarrierConf::ErrorModel em(SatPhyRxCarrierConf::EM_AVI);\n    Config::SetDefault(\"ns3::SatUtHelper::FwdLinkErrorModel\", EnumValue(em));\n    Config::SetDefault(\"ns3::SatGwHelper::RtnLinkErrorModel\", EnumValue(em));\n    // Config::SetDefault (\"ns3::SatUtMac::CrUpdatePeriod\", TimeValue(Seconds(10.0)));\n\n    // Enable Random Access with Slotted ALOHA\n    Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                       EnumValue(SatEnums::RA_MODEL_SLOTTED_ALOHA));\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Disable periodic control slots\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(false));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(250));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(10000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(30000));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(1));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.5));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DefaultControlRandomizationInterval\",\n                       TimeValue(MilliSeconds(100)));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::CrdsaSignalingOverheadInBytes\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::SlottedAlohaSignalingOverheadInBytes\",\n                       UintegerValue(3));\n\n    // Disable CRA and DA\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n\n    // Creating the reference system.\n    simulationHelper->SetSimulationTime(simLength);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet({beamId});\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        interval,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        appStartTime,\n        simLength + Seconds(1),\n        Seconds(0.05));\n\n    NS_LOG_INFO(\"--- Cbr-user-defined-example ---\");\n    NS_LOG_INFO(\"  Packet size in bytes: \" << packetSize);\n    NS_LOG_INFO(\"  Packet sending interval: \" << interval.GetSeconds());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength.GetSeconds());\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-rayleigh-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/core-module.h\"\n#include \"ns3/satellite-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-rayleigh-example.cc\n * \\ingroup satellite\n *\n * \\brief Example for Rayleigh fader class. Demonstrates the functionality\n * of the Rayleigh fader used by the Markov-fading. The example creates\n * a single Rayleigh fader and outputs the fading values in time.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-rayleigh-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    /// Enable info logs\n    LogComponentEnable(\"sat-rayleigh-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatRayleighModel\", LOG_LEVEL_INFO);\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationCampaignName\",\n                       StringValue(\"example-rayleigh\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationTag\", StringValue(\"\"));\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Create fader\n    Ptr<SatRayleighConf> rayleighConf = CreateObject<SatRayleighConf>();\n    Ptr<SatRayleighModel> rayleighFader = CreateObject<SatRayleighModel>(rayleighConf, 0, 0);\n\n    /// Run simulation\n    for (uint32_t i = 0; i < 1000; i++)\n    {\n        Simulator::Schedule(Time(500000 + i * 500000),\n                            &SatRayleighModel::GetChannelGainDb,\n                            rayleighFader);\n    }\n\n    Simulator::Run();\n    Simulator::Destroy();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-regeneration-collisions-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-regeneration-collisions-example.cc\n * \\ingroup satellite\n *\n * \\brief This file gives an example of satellite regeneration with collisions.\n *        User can specify regeneration level on FWD and RTN link, and Random Access algorithm.\n *        It generates several statistics to check collisions and errors where there are supposed to\n * occur.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-regeneration-collisions-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t packetSize = 512;\n    std::string interval = \"1ms\";\n    std::string randomAccess = \"SlottedAloha\";\n    std::string forwardRegeneration = \"regeneration_phy\";\n    std::string returnRegeneration = \"regeneration_phy\";\n\n    std::map<std::string, SatEnums::RegenerationMode_t> mapForwardRegeneration{\n        {\"transparent\", SatEnums::TRANSPARENT},\n        {\"regeneration_phy\", SatEnums::REGENERATION_PHY},\n        {\"regeneration_network\", SatEnums::REGENERATION_NETWORK}};\n    std::map<std::string, SatEnums::RegenerationMode_t> mapReturnRegeneration{\n        {\"transparent\", SatEnums::TRANSPARENT},\n        {\"regeneration_phy\", SatEnums::REGENERATION_PHY},\n        {\"regeneration_link\", SatEnums::REGENERATION_LINK},\n        {\"regeneration_network\", SatEnums::REGENERATION_NETWORK}};\n\n    Ptr<SimulationHelper> simulationHelper =\n        CreateObject<SimulationHelper>(\"example-regeneration-collisions\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s))\", interval);\n    cmd.AddValue(\"randomAccess\",\n                 \"Choose RA (SlottedAloha, Marsala, Crdsa, Essa) or DA.\",\n                 randomAccess);\n    cmd.AddValue(\n        \"forwardRegeneration\",\n        \"Regeneration mode on forward link (transparent, regeneration_phy or regeneration_network)\",\n        forwardRegeneration);\n    cmd.AddValue(\"returnRegeneration\",\n                 \"Regeneration mode on forward link (transparent, regeneration_phy, \"\n                 \"regeneration_link or regeneration_network)\",\n                 returnRegeneration);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    SatEnums::RegenerationMode_t forwardLinkRegenerationMode =\n        mapForwardRegeneration[forwardRegeneration];\n    SatEnums::RegenerationMode_t returnLinkRegenerationMode =\n        mapReturnRegeneration[returnRegeneration];\n\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(forwardLinkRegenerationMode));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(returnLinkRegenerationMode));\n\n    Config::SetDefault(\"ns3::SatOrbiterFeederPhy::QueueSize\", UintegerValue(100000));\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_SlottedAlohaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_CrdsaAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_EssaAllowed\",\n                       BooleanValue(false));\n\n    // Enable Random Access\n    if (randomAccess == \"SlottedAloha\")\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_SLOTTED_ALOHA));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_SlottedAlohaAllowed\",\n                           BooleanValue(true));\n    }\n    else if (randomAccess == \"Crdsa\")\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_CRDSA));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_CrdsaAllowed\",\n                           BooleanValue(true));\n    }\n    else if (randomAccess == \"Marsala\")\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_MARSALA));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_CrdsaAllowed\",\n                           BooleanValue(true));\n    }\n    else if (randomAccess == \"Essa\")\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_ESSA));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_EssaAllowed\",\n                           BooleanValue(true));\n    }\n    else if (randomAccess == \"DA\")\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_OFF));\n    }\n    else\n    {\n        NS_FATAL_ERROR(\"Unknown random access: \" << randomAccess);\n    }\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Disable periodic control slots\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(false));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(false));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n\n    // Set random access parameters\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumUniquePayloadPerBlock\",\n                       UintegerValue(3));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MaximumConsecutiveBlockAccessed\",\n                       UintegerValue(6));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_MinimumIdleBlock\",\n                       UintegerValue(2));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffTimeInMilliSeconds\",\n                       UintegerValue(250));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_BackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_HighLoadBackOffProbability\",\n                       UintegerValue(1));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::RaService0_NumberOfInstances\",\n                       UintegerValue(3));\n    Config::SetDefault(\n        \"ns3::SatLowerLayerServiceConf::RaService0_AverageNormalizedOfferedLoadThreshold\",\n        DoubleValue(0.5));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DefaultControlRandomizationInterval\",\n                       TimeValue(MilliSeconds(100)));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::CrdsaSignalingOverheadInBytes\", UintegerValue(5));\n    Config::SetDefault(\"ns3::SatRandomAccessConf::SlottedAlohaSignalingOverheadInBytes\",\n                       UintegerValue(3));\n\n    Config::SetDefault(\"ns3::SatOrbiterHelper::FwdLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::RtnLinkErrorModel\",\n                       EnumValue(SatPhyRxCarrierConf::EM_AVI));\n\n    if (randomAccess == \"Essa\")\n    {\n        // Superframe configuration\n        Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\",\n                           EnumValue(SatSuperframeConf::SUPER_FRAME_CONFIG_4));\n        Config::SetDefault(\"ns3::SatSuperframeConf4::FrameConfigType\",\n                           EnumValue(SatSuperframeConf::CONFIG_TYPE_4));\n        Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_AllocatedBandwidthHz\",\n                           DoubleValue(15000));\n        Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierAllocatedBandwidthHz\",\n                           DoubleValue(15000));\n        Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierRollOff\", DoubleValue(0.22));\n        Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_CarrierSpacing\", DoubleValue(0));\n        Config::SetDefault(\"ns3::SatSuperframeConf4::Frame0_SpreadingFactor\", UintegerValue(256));\n\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                           EnumValue(SatPhyRxCarrierConf::IF_PER_FRAGMENT));\n        Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceEliminationModel\",\n                           EnumValue(SatPhyRxCarrierConf::SIC_RESIDUAL));\n        Config::SetDefault(\"ns3::SatBeamHelper::ReturnLinkLinkResults\",\n                           EnumValue(SatEnums::LR_FSIM));\n        Config::SetDefault(\"ns3::SatOrbiterHelper::RtnLinkErrorModel\",\n                           EnumValue(SatPhyRxCarrierConf::EM_AVI));\n\n        Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDuration\", StringValue(\"600ms\"));\n        Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowStep\", StringValue(\"200ms\"));\n        Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowDelay\", StringValue(\"0s\"));\n        Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::FirstWindow\", StringValue(\"0s\"));\n        Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::WindowSICIterations\", UintegerValue(5));\n        Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::SpreadingFactor\", UintegerValue(1));\n        Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::DetectionThreshold\", DoubleValue(0));\n        Config::SetDefault(\"ns3::SatPhyRxCarrierPerWindow::EnableSIC\", BooleanValue(false));\n\n        simulationHelper->LoadScenario(\"geo-33E-fsim\");\n    }\n\n    // Disable CRA and DA if RA\n    if (randomAccess != \"DA\")\n    {\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaServiceCount\", UintegerValue(4));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(false));\n\n        simulationHelper->LoadScenario(\"geo-33E\");\n    }\n\n    simulationHelper->SetSimulationTime(Seconds(11));\n\n    LogComponentEnable(\"sat-regeneration-collisions-example\", LOG_LEVEL_INFO);\n\n    simulationHelper->SetUserCountPerUt(1);\n    simulationHelper->SetUtCountPerBeam(50);\n    simulationHelper->SetBeamSet({1});\n\n    simulationHelper->CreateSatScenario();\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1.0),\n        Seconds(10.0),\n        Seconds(0));\n\n    NS_LOG_INFO(\"--- sat-regeneration-collisions-example ---\");\n    NS_LOG_INFO(\"  Random Access (or DA): \" << randomAccess);\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    // To store attributes to file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddGlobalFwdUserPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerSatFeederSlottedAlohaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatUserSlottedAlohaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFeederCrdsaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatUserCrdsaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFeederEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatUserEssaPacketCollision(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Error stats if no regeneration or DA regeneration\n    s->AddPerSatFeederSlottedAlohaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFeederCrdsaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFeederEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFwdUserDaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatRtnFeederDaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Error stats if RA regeneration\n    s->AddPerSatUserSlottedAlohaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatUserCrdsaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatUserEssaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFwdFeederDaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatRtnUserDaPacketError(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-regeneration-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-regeneration-example.cc\n * \\ingroup satellite\n *\n * \\brief This file gives an example of satellite regeneration.\n *        It allows to launch a simulation with FWD and RTN CBR traffics,\n *        and different levels of regeneration.\n *         - On FWD link: transparent, physical and network\n *         - On RTN link: transparent, physical, link and network\n *        Several statistics are generated.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-regeneration-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamIdInFullScenario = 10;\n    uint32_t packetSize = 512;\n    std::string interval = \"10ms\";\n    std::string scenario = \"simple\";\n    std::string forwardRegeneration = \"regeneration_network\";\n    std::string returnRegeneration = \"regeneration_network\";\n\n    std::map<std::string, SatHelper::PreDefinedScenario_t> mapScenario{\n        {\"simple\", SatHelper::SIMPLE},\n        {\"larger\", SatHelper::LARGER},\n        {\"full\", SatHelper::FULL}};\n    std::map<std::string, SatEnums::RegenerationMode_t> mapForwardRegeneration{\n        {\"transparent\", SatEnums::TRANSPARENT},\n        {\"regeneration_phy\", SatEnums::REGENERATION_PHY},\n        {\"regeneration_network\", SatEnums::REGENERATION_NETWORK}};\n    std::map<std::string, SatEnums::RegenerationMode_t> mapReturnRegeneration{\n        {\"transparent\", SatEnums::TRANSPARENT},\n        {\"regeneration_phy\", SatEnums::REGENERATION_PHY},\n        {\"regeneration_link\", SatEnums::REGENERATION_LINK},\n        {\"regeneration_network\", SatEnums::REGENERATION_NETWORK}};\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"example-regeneration\");\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"beamIdInFullScenario\",\n                 \"Id where Sending/Receiving UT is selected in FULL scenario. (used only when \"\n                 \"scenario is full) \",\n                 beamIdInFullScenario);\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s))\", interval);\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full)\", scenario);\n    cmd.AddValue(\n        \"forwardRegeneration\",\n        \"Regeneration mode on forward link (transparent, regeneration_phy or regeneration_network)\",\n        forwardRegeneration);\n    cmd.AddValue(\"returnRegeneration\",\n                 \"Regeneration mode on forward link (transparent, regeneration_phy, \"\n                 \"regeneration_link or regeneration_network)\",\n                 returnRegeneration);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    SatHelper::PreDefinedScenario_t satScenario = mapScenario[scenario];\n    SatEnums::RegenerationMode_t forwardLinkRegenerationMode =\n        mapForwardRegeneration[forwardRegeneration];\n    SatEnums::RegenerationMode_t returnLinkRegenerationMode =\n        mapReturnRegeneration[returnRegeneration];\n\n    /// Set regeneration mode\n    Config::SetDefault(\"ns3::SatConf::ForwardLinkRegenerationMode\",\n                       EnumValue(forwardLinkRegenerationMode));\n    Config::SetDefault(\"ns3::SatConf::ReturnLinkRegenerationMode\",\n                       EnumValue(returnLinkRegenerationMode));\n    Config::SetDefault(\"ns3::SatOrbiterFeederPhy::QueueSize\", UintegerValue(100000));\n    Config::SetDefault(\"ns3::SatOrbiterUserPhy::QueueSize\", UintegerValue(100000));\n\n    /// Enable ACM\n    Config::SetDefault(\"ns3::SatBbFrameConf::AcmEnabled\", BooleanValue(true));\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    /// Enable packet trace\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    // Set tag, if output path is not explicitly defined\n    simulationHelper->SetOutputTag(scenario);\n\n    simulationHelper->SetSimulationTime(Seconds(30));\n\n    // Set beam ID\n    std::stringstream beamsEnabled;\n    beamsEnabled << beamIdInFullScenario;\n    simulationHelper->SetBeams(beamsEnabled.str());\n\n    LogComponentEnable(\"sat-regeneration-example\", LOG_LEVEL_INFO);\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario(satScenario);\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1.0),\n        Seconds(29.0),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1.0),\n        Seconds(29.0),\n        Seconds(0));\n\n    NS_LOG_INFO(\"--- sat-regeneration-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    if (scenario == \"full\")\n    {\n        NS_LOG_INFO(\"  UT used in full scenario from beam: \" << beamIdInFullScenario);\n    }\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    // To store attributes to file\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    // Throughput statistics\n    s->AddPerUtFwdFeederPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserPhyThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserMacThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserDevThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Delay statistics\n    s->AddPerUtFwdPhyDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdDevDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnPhyDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnMacDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnDevDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // link delay statistics\n    s->AddPerUtFwdFeederPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserPhyLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserMacLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserDevLinkDelay(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Jitter statistics\n    s->AddPerUtFwdPhyJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdMacJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdDevJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnPhyJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnMacJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnDevJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Link jitter statistics\n    s->AddPerUtFwdFeederPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserPhyLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserMacLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserDevLinkJitter(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Phy RX statistics\n    s->AddPerUtFwdFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerUtFwdFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Other statistics\n    s->AddPerUtFwdFeederLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdUserLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnFeederLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnUserLinkModcod(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerGwRtnFeederQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatRtnFeederQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatRtnFeederQueuePackets(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddPerGwFwdUserQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFwdUserQueueBytes(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerSatFwdUserQueuePackets(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    simulationHelper->EnableProgressLogs();\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-rtn-link-da-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-rtn-link-da-example.cc\n * \\ingroup satellite\n *\n *         execute command -> ./waf --run \"sat-rtn-link-da-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-rtn-link-da-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t endUsersPerUt(3);\n    uint32_t utsPerBeam(3);\n    Time simLength(Seconds(50.0));\n\n    std::string simulationName = \"sat-rtn-link-da-example\";\n    auto simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetDefaultValues();\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetSimulationTime(simLength.GetSeconds());\n    simulationHelper->EnableOnlyRbdc(3);\n\n    simulationHelper->SetBeams(\"1 3 5 7 9 22 24 26 28 30 44 46 48 50 59 61 70 72\");\n\n    /* Simulation tags *****************************************************************/\n\n    std::stringstream sstag;\n    sstag << simulationName << \"UTs=\" << utsPerBeam;\n    simulationHelper->SetOutputTag(sstag.str());\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Create satellite scenario\n    simulationHelper->CreateSatScenario();\n\n    // >>> Start of actual test using Full scenario >>>\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(5),\n        128,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1),\n        simLength,\n        Seconds(0.05));\n\n    // Create RTN link statistics\n    simulationHelper->CreateDefaultRtnLinkStats();\n\n    // Enable logs\n    simulationHelper->EnableProgressLogs();\n\n    // Run\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-rtn-link-ra-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-rtn-link-ra-example.cc\n * \\ingroup satellite\n *\n *         execute command -> ./waf --run \"sat-rtn-link-ra-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-rtn-link-ra-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t endUsersPerUt(3);\n    uint32_t utsPerBeam(3);\n    Time simLength(Seconds(50.0));\n\n    std::string simulationName(\"sat-rtn-link-ra-example\");\n    auto simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"endUsersPerUt\", \"Number of end users per UT\", endUsersPerUt);\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    simulationHelper->SetDefaultValues();\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetSimulationTime(simLength.GetSeconds());\n    simulationHelper->DisableAllCapacityAssignmentCategories();\n    simulationHelper->EnableCrdsa();\n\n    simulationHelper->SetBeams(\"1 3 5 7 9 22 24 26 28 30 44 46 48 50 59 61 70 72\");\n\n    /* Simulation tags *****************************************************************/\n\n    std::stringstream sstag;\n    sstag << simulationName << \"UTs=\" << utsPerBeam;\n    simulationHelper->SetOutputTag(sstag.str());\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Create satellite scenario\n    simulationHelper->CreateSatScenario();\n\n    // >>> Start of actual test using Full scenario >>>\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        MilliSeconds(33),\n        20,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(1),\n        simLength,\n        Seconds(0.05));\n\n    // Create RTN link statistics\n    simulationHelper->CreateDefaultRtnLinkStats();\n\n    // Enable logs\n    simulationHelper->EnableProgressLogs();\n\n    // Run\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-rtn-system-test-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Sami Rantanen <sami.rantanen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-rtn-system-test-example.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to run example simulation results related to\n * satellite system tests.\n *\n * To get help of the command line arguments for the example,\n * execute command -> ./waf --run \"sat-rtn-system-test-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-rtn-system-test-example\");\n\n// Callback called when RBDC CR has been sent by request manager\nstatic void\nRbcdRcvdCb(uint32_t value)\n{\n    NS_LOG_INFO(\"RBDC request generated with \" << value << \" kbps\");\n}\n\n// Callback called when AVBDC CR has been sent by request manager\nstatic void\nAvbcdRcvdCb(uint32_t value)\n{\n    NS_LOG_INFO(\"AVBDC request generated with \" << value << \" Bytes\");\n}\n\n// Callback called when VBDC CR has been sent by request manager\nstatic void\nVbcdRcvdCb(uint32_t value)\n{\n    NS_LOG_INFO(\"VBDC request generated with \" << value << \" Bytes\");\n}\n\n// Callback called when VBDC CR has been sent by request manager\nstatic void\nTbtpResources(uint32_t value)\n{\n    if (value > 0)\n    {\n        NS_LOG_INFO(\"\" << value << \" Bytes allocated within TBTP\");\n    }\n}\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t beamId = 26;\n    uint32_t endUsersPerUt = 10;\n    uint32_t utsPerBeam = 10;\n    Time utAppStartTime = Seconds(0.1);\n\n    // UintegerValue packetSize (1280); // in bytes\n    // TimeValue interval (MilliSeconds (500));\n    // DataRateValue dataRate (16000);\n\n    double simLength(30.0); // in seconds\n    std::string preDefinedFrameConfig = \"Configuration_0\";\n    uint32_t testCase = 0;\n    uint32_t trafficModel = 0;\n\n    LogComponentEnable(\"sat-rtn-system-test-example\", LOG_LEVEL_INFO);\n\n    /// Set simulation output details\n    std::string simulationName = \"example-rtn-system-test\";\n    auto simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    // set default values for traffic model apps here\n    // attributes can be overridden by command line arguments or input xml when needed\n\n    std::string onPattern = \"ns3::ExponentialRandomVariable[Mean=1.0|Bound=0.0]\";\n    std::string offPattern = \"ns3::ExponentialRandomVariable[Mean=1.0|Bound=0.0]\";\n\n    // To read input attributes from input xml-file\n    std::string inputFileNameWithPath =\n        Singleton<SatEnvVariables>::Get()->LocateDirectory(\"contrib/satellite/examples\") +\n        \"/sys-rtn-test.xml\";\n\n    // read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"testCase\", \"Test case to execute\", testCase);\n    cmd.AddValue(\"frameConf\", \"Pre-defined super frame configuration\", preDefinedFrameConfig);\n    cmd.AddValue(\"trafficModel\", \"Traffic model to use (0 = CBR, 1 = OnOff)\", trafficModel);\n    cmd.AddValue(\"simLength\", \"Simulation length\", simLength);\n    cmd.AddValue(\"beamId\", \"Beam Id\", beamId);\n    cmd.AddValue(\"utAppStartTime\", \"Application (first) start time.\", utAppStartTime);\n    simulationHelper->AddDefaultUiArguments(cmd, inputFileNameWithPath);\n    cmd.Parse(argc, argv);\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(inputFileNameWithPath));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    ConfigStore inputFrameConfig;\n    inputFrameConfig.ConfigureDefaults();\n\n    // select pre-defined super frame configuration wanted to use.\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\", StringValue(preDefinedFrameConfig));\n\n    // use the default SuperframeAllocator\n    Config::SetDefault(\"ns3::SatBeamScheduler::SuperFrameAllocatorType\", StringValue(\"Default\"));\n\n    switch (testCase)\n    {\n    case 0: // scheduler, CRA, ACM is selected by command line arguments (\n            // --\"ns3::SatWaveformConf::AcmEnabled=true\" or\n            // --\"ns3::SatWaveformConf::AcmEnabled=false\" )\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(true));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantServiceRate\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=2]\"));\n        Config::SetDefault(\"ns3::SatDefaultSuperframeAllocator::FcaEnabled\", BooleanValue(false));\n        break;\n\n    case 1: // scheduler, FCA (CRA + VBDC), ACM is selected by command line arguments (\n            // --\"ns3::SatWaveformConf::AcmEnabled=true\" or\n            // --\"ns3::SatWaveformConf::AcmEnabled=false\" )\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(true));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantServiceRate\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=2]\"));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(true));\n        Config::SetDefault(\"ns3::SatDefaultSuperframeAllocator::FcaEnabled\", BooleanValue(true));\n        break;\n\n    case 2: // ACM, one UT with one user, MARKOV fading on, external fading on\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(true));\n        Config::SetDefault(\"ns3::SatWaveformConf::AcmEnabled\", BooleanValue(true));\n        Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", StringValue(\"FadingMarkov\"));\n\n        // Note, that the positions of the fading files do not necessarily match with the\n        // beam location, since this example is not using list position allocator!\n        Config::SetDefault(\"ns3::SatChannel::EnableExternalFadingInputTrace\", BooleanValue(true));\n        Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtFwdDownIndexFileName\",\n                           StringValue(\"BeamId-1_256_UT_fading_fwddwn_trace_index.txt\"));\n        Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtRtnUpIndexFileName\",\n                           StringValue(\"BeamId-1_256_UT_fading_rtnup_trace_index.txt\"));\n        endUsersPerUt = 1;\n        utsPerBeam = 1;\n        break;\n\n    case 3: // RM, one UT with one user, CRA only\n\n        /**\n         * DAMA is disabled entirely, so there should not be any generated capacity requests\n         * which ever traffic model is utilized. CRA is configured with 100 kbps, thus it is\n         * the maximum throughput the scheduler can give to the UT.\n         */\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(true));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantServiceRate\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=100]\"));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(false));\n\n        endUsersPerUt = 1;\n        utsPerBeam = 1;\n\n        break;\n\n    case 4: // RM, one UT with one user, RBDC only\n\n        /**\n         * RBDC is allowed for BE traffic queue.\n         */\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantServiceRate\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=1]\"));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(true));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(false));\n\n        // Change ways of sending the capacity requests!\n\n        // CRA\n        // Config::SetDefault\n        // (\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\", BooleanValue\n        // (true)); Config::SetDefault (\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue\n        // (SatEnums::RA_MODEL_OFF));\n\n        // Slotted Aloha\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_SLOTTED_ALOHA));\n        // Config::SetDefault (\"ns3::SatBeamHelper::RaCollisionModel\", StringValue\n        // (\"RaCollisionConstantErrorProbability\")); Config::SetDefault\n        // (\"ns3::SatBeamHelper::RaConstantErrorRate\", DoubleValue (0.3));\n\n        // CRDSA\n        // Config::SetDefault (\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue\n        // (SatEnums::RA_MODEL_CRDSA)); Config::SetDefault\n        // (\"ns3::SatUtHelper::UseCrdsaOnlyForControlPackets\", BooleanValue (true));\n\n        // Periodical control slots\n        // Config::SetDefault (\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue (true));\n\n        offPattern = \"ns3::ExponentialRandomVariable[Mean=1.0|Bound=0.0]\";\n\n        endUsersPerUt = 1;\n        utsPerBeam = 1;\n\n        break;\n\n    case 5: // RM, one UT with one user, VBDC only\n\n        /**\n         * VBDC is allowed for BE traffic queue.\n         */\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_ConstantServiceRate\",\n                           StringValue(\"ns3::ConstantRandomVariable[Constant=1]\"));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService0_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService1_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService2_VolumeAllowed\",\n                           BooleanValue(false));\n        Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                           BooleanValue(true));\n\n        // Change ways of sending the capacity requests!\n\n        // CRA\n        // Config::SetDefault\n        // (\"ns3::SatLowerLayerServiceConf::DaService0_ConstantAssignmentProvided\", BooleanValue\n        // (true)); Config::SetDefault (\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue\n        // (SatEnums::RA_MODEL_OFF));\n\n        // Slotted Aloha\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_SLOTTED_ALOHA));\n        // Config::SetDefault (\"ns3::SatBeamHelper::RaCollisionModel\", StringValue\n        // (\"RaCollisionConstantErrorProbability\")); Config::SetDefault\n        // (\"ns3::SatBeamHelper::RaConstantErrorRate\", DoubleValue (0.3));\n\n        // CRDSA\n        // Config::SetDefault (\"ns3::SatBeamHelper::RandomAccessModel\", EnumValue\n        // (SatEnums::RA_MODEL_CRDSA)); Config::SetDefault\n        // (\"ns3::SatUtHelper::UseCrdsaOnlyForControlPackets\", BooleanValue (true));\n\n        // Periodical control slots\n        // Config::SetDefault (\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue (true));\n\n        offPattern = \"ns3::ExponentialRandomVariable[Mean=10.0|Bound=0.0]\";\n\n        endUsersPerUt = 1;\n        utsPerBeam = 1;\n        break;\n\n    default:\n        break;\n    }\n\n    // Creating the reference system. Note, currently the satellite module supports\n    // only one reference system, which is named as \"Scenario72\". The string is utilized\n    // in mapping the scenario to the needed reference system configuration files. Arbitrary\n    // scenario name results in fatal error.\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetBeamSet({beamId});\n    simulationHelper->SetSimulationTime(simLength);\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Create satellite scenario\n    simulationHelper->CreateSatScenario();\n\n    Config::ConnectWithoutContext(\"/NodeList/*/DeviceList/*/SatLlc/SatRequestManager/RbdcTrace\",\n                                  MakeCallback(&RbcdRcvdCb));\n\n    Config::ConnectWithoutContext(\"/NodeList/*/DeviceList/*/SatLlc/SatRequestManager/VbdcTrace\",\n                                  MakeCallback(&VbcdRcvdCb));\n\n    Config::ConnectWithoutContext(\"/NodeList/*/DeviceList/*/SatLlc/SatRequestManager/AvbdcTrace\",\n                                  MakeCallback(&AvbcdRcvdCb));\n\n    Config::ConnectWithoutContext(\"/NodeList/*/DeviceList/*/SatMac/DaResourcesTrace\",\n                                  MakeCallback(&TbtpResources));\n\n    // Config::ConnectWithoutContext\n    // (\"/NodeList/*/DeviceList/*/SatLlc/SatEncapsulator/SatQueue/Enqueue\",\n    //                                MakeCallback (&PacketEnqueu));\n\n    /**\n     * Set-up CBR or OnOff traffic\n     */\n    switch (trafficModel)\n    {\n    case 0: // CBR\n    {\n        simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            Seconds(1),\n            512,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            utAppStartTime,\n            Seconds(simLength + 1),\n            Seconds(0.1));\n    }\n    break;\n    case 1: // On-Off\n    {\n        simulationHelper->GetTrafficHelper()->AddOnOffTraffic(\n            SatTrafficHelper::RTN_LINK,\n            SatTrafficHelper::UDP,\n            DataRate(\"500kb/s\"),\n            512,\n            NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n            Singleton<SatTopology>::Get()->GetUtUserNodes(),\n            onPattern,\n            offPattern,\n            utAppStartTime,\n            Seconds(simLength + 1),\n            Seconds(0.1));\n    }\n    break;\n    default:\n        NS_FATAL_ERROR(\"Not Supported Traffic Model!\");\n        break;\n    }\n\n    /**\n     * Set-up statistics\n     */\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCATTER_PLOT);\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederDevThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederMacThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnFeederPhyThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddAverageUtUserRtnAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddAverageUtUserRtnAppDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnAppDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    s->AddPerBeamRtnFeederDaPacketError(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamFrameSymbolLoad(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamWaveformUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    // enable application info logs\n    // LogComponentEnable (\"CbrApplication\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"OnOffApplication\", LOG_LEVEL_INFO);\n    // LogComponentEnable (\"PacketSink\", LOG_LEVEL_INFO);\n\n    NS_LOG_INFO(\"--- sat-rtn-sys-test ---\");\n    NS_LOG_INFO(\"  Test case: \" << testCase);\n    NS_LOG_INFO(\"  Traffic model: \" << trafficModel);\n    // NS_LOG_INFO(\"  Packet size: \" << packetSize.Get ());\n    // NS_LOG_INFO(\"  Data rate (on-off): \" << dataRate.Get ());\n    // NS_LOG_INFO(\"  Interval (CBR): \" << interval.Get ().GetSeconds ());\n    NS_LOG_INFO(\"  Simulation length: \" << simLength);\n    NS_LOG_INFO(\"  Number of UTs: \" << utsPerBeam);\n    NS_LOG_INFO(\"  Number of end users per UT: \" << endUsersPerUt);\n    NS_LOG_INFO(\"  \");\n\n    /**\n     * Store attributes into XML output\n     */\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (\"sat-rtn-sys-test.xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * Run simulation\n     */\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-trace-input-external-fading-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-trace-input-external-fading-example.cc\n * \\ingroup satellite\n *\n * \\brief  External input fading example application based on CBR example for satellite network.\n *         Interval, packet size and test scenario can be given in command line as user argument.\n *         To see help for user arguments, execute the command\n *\n *         ./waf --run \"trace-input-external-fading-example --PrintHelp\"\n *\n *         This example application sends first packets from GW connected user\n *         to UT connected users and after that from UT connected user to GW connected\n *         user.\n *\n *         This example uses additional fading input with normal fading calculations. The results\n *         can be directly compared with the output from \"trace-output-example\" to see the effects\n *         of additional fading.\n *\n *         This example uses the following trace for input:\n *         - external fading trace\n *\n *         The input folder is:\n *         {NS-3-root-folder}/contrib/satellite/data/additional-data/fadingtraces\n *\n *         The input data files must be available in the folder stated above for the example\n *         program to read, otherwise the program will fail.\n *\n *         This example produces the following traces:\n *         - interference density trace\n *         - rx power density trace\n *         - fading trace\n *         - composite SINR\n *\n *         The output folders are:\n *         {NS-3-root-folder}/contrib/satellite/data/interferencetraces/output\n *         {NS-3-root-folder}/contrib/satellite/data/rxpowertraces/output\n *         {NS-3-root-folder}/contrib/satellite/data/fadingtraces/output\n *         {NS-3-root-folder}/contrib/satellite/data/compositesinrtraces/output\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-trace-input-external-fading-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t packetSize = 512;\n    std::string interval = \"1s\";\n    std::string scenario = \"simple\";\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n    std::string simulationName = \"example-trace-input-external-fading\";\n    auto simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    /// Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s)\", interval);\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full\", scenario);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Enable external fading trace input\n    Config::SetDefault(\"ns3::SatChannel::EnableExternalFadingInputTrace\", BooleanValue(true));\n\n    /// Enable Rx power calculation & Rx power density output trace\n    Config::SetDefault(\"ns3::SatChannel::RxPowerCalculationMode\",\n                       EnumValue(SatEnums::RX_PWR_CALCULATION));\n    Config::SetDefault(\"ns3::SatChannel::EnableRxPowerOutputTrace\", BooleanValue(true));\n\n    /// Enable Markov fading calculation & fading output trace\n    Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_MARKOV));\n    Config::SetDefault(\"ns3::SatChannel::EnableFadingOutputTrace\", BooleanValue(true));\n\n    // Rain fading\n    // Note, that the positions of the fading files do not necessarily match with the\n    // beam location, since this example is not using list position allocator!\n    Config::SetDefault(\"ns3::SatChannel::EnableExternalFadingInputTrace\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtFwdDownIndexFileName\",\n                       StringValue(\"BeamId-1_256_UT_fading_fwddwn_trace_index.txt\"));\n    Config::SetDefault(\"ns3::SatFadingExternalInputTraceContainer::UtRtnUpIndexFileName\",\n                       StringValue(\"BeamId-1_256_UT_fading_rtnup_trace_index.txt\"));\n\n    /// Enable per packet interference & interference density output trace\n    Config::SetDefault(\"ns3::SatGwHelper::DaRtnLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::DaRtnLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::DaFwdLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatUtHelper::DaFwdLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableIntfOutputTrace\", BooleanValue(true));\n\n    /// Enable composite SINR output trace\n    Config::SetDefault(\"ns3::SatPhyRxCarrier::EnableCompositeSinrOutputTrace\", BooleanValue(true));\n\n    /// Set simulation output details\n    simulationHelper->SetOutputTag(scenario);\n\n    /// Disable figure output\n    // Singleton<SatFadingOutputTraceContainer>::Get ()->EnableFigureOutput (false);\n    // Singleton<SatInterferenceOutputTraceContainer>::Get ()->EnableFigureOutput (false);\n    // Singleton<SatRxPowerOutputTraceContainer>::Get ()->EnableFigureOutput (false);\n    // Singleton<SatCompositeSinrOutputTraceContainer>::Get ()->EnableFigureOutput (false);\n\n    /// Add tag to file name (useful when running multiple consecutive simulations)\n    // Singleton<SatFadingOutputTraceContainer>::Get ()->InsertTag (\"fadingExampleTag_\");\n    // Singleton<SatInterferenceOutputTraceContainer>::Get ()->InsertTag\n    // (\"interferenceExampleTag_\"); Singleton<SatRxPowerOutputTraceContainer>::Get ()->InsertTag\n    // (\"rxPowerExampleTag_\"); Singleton<SatCompositeSinrOutputTraceContainer>::Get ()->InsertTag\n    // (\"compositeSinrExampleTag_\");\n\n    /// Enable the printing of ID mapper trace IDs\n    Singleton<SatIdMapper>::Get()->EnableMapPrint(true);\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    /// Enable info logs\n    LogComponentEnable(\"CbrApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"sat-trace-input-external-fading-example\", LOG_LEVEL_INFO);\n\n    // Set simulation time\n    simulationHelper->SetSimulationTime(Seconds(11));\n\n    /// Remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario(satScenario);\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(3.0),\n        Seconds(5.1),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(7.0),\n        Seconds(9.1),\n        Seconds(0));\n\n    NS_LOG_INFO(\"--- input-external-fading-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-trace-input-fading-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2013 Magister Solutions Ltd\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-trace-input-fading-example.cc\n * \\ingroup satellite\n *\n * \\brief  Trace input fading example application based on CBR example for satellite network.\n *         Interval, packet size and test scenario can be given in command line as user argument.\n *         To see help for user arguments, execute the command\n *\n *         ./waf --run \"trace-input-fading-example --PrintHelp\"\n *\n *         This example application sends first packets from GW connected user\n *         to UT connected users and after that from UT connected user to GW connected\n *         user.\n *\n *         This example uses the following trace for input:\n *         - fading trace\n *\n *         The input folder is:\n *         {NS-3-root-folder}/contrib/satellite/data/additional-data/fadingtraces/input\n *\n *         The input data files must be available in the folder stated above for the example\n *         program to read, otherwise the program will fail. Trace output example can be\n *         used to produce the required trace files if these are missing.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-trace-input-fading-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t packetSize = 512;\n    std::string interval = \"1s\";\n    std::string scenario = \"simple\";\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n    std::string simulationName = \"example-trace-input-fading\";\n    auto simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    /// Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s)\", interval);\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full\", scenario);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Enable fading input trace\n    Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_TRACE));\n\n    /// Set simulation output details\n    simulationHelper->SetOutputTag(scenario);\n\n    Singleton<SatIdMapper>::Get()->EnableMapPrint(true);\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    /// Enable info logs\n    LogComponentEnable(\"CbrApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"sat-trace-input-fading-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatInputFileStreamTimeDoubleContainer\", LOG_LEVEL_INFO);\n\n    // Set simulation time\n    simulationHelper->SetSimulationTime(Seconds(11));\n\n    /// Remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    /// Create satellite helper with given scenario default=simple\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario(satScenario);\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(3.0),\n        Seconds(5.1),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(7.0),\n        Seconds(9.1),\n        Seconds(0));\n\n    NS_LOG_INFO(\"--- Trace-input-fading-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-trace-input-interference-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-trace-input-interference-example.cc\n * \\ingroup satellite\n *\n * \\brief  Trace input interference example application based on CBR example for satellite network.\n *         Interval, packet size and test scenario can be given in command line as user argument.\n *         To see help for user arguments, execute the command\n *\n *         ./waf --run \"trace-input-interference-example --PrintHelp\"\n *\n *         This example application sends first packets from GW connected user\n *         to UT connected users and after that from UT connected user to GW connected\n *         user.\n *\n *         This example uses the following trace for input:\n *         - interference density trace\n *\n *         The input folder is:\n *         {NS-3-root-folder}/contrib/satellite/data/additional-data/interferencetraces/input\n\n *         The input data files must be available in the folder stated above for the example\n *         program to read, otherwise the program will fail. Trace output example can be\n *         used to produce the required trace files if these are missing.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-trace-input-interference-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t packetSize = 512;\n    std::string interval = \"1s\";\n    std::string scenario = \"simple\";\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n    std::string simulationName = \"example-trace-input-interference\";\n    auto simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    /// Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s)\", interval);\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full\", scenario);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Enable interference density input trace\n    Config::SetDefault(\"ns3::SatGwHelper::DaRtnLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_TRACE));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::DaRtnLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_TRACE));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::DaFwdLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_TRACE));\n    Config::SetDefault(\"ns3::SatUtHelper::DaFwdLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_TRACE));\n\n    /// Set simulation output details\n    simulationHelper->SetOutputTag(scenario);\n\n    Singleton<SatIdMapper>::Get()->EnableMapPrint(true);\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    /// Enable info logs\n    LogComponentEnable(\"CbrApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"sat-trace-input-interference-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatInputFileStreamTimeDoubleContainer\", LOG_LEVEL_INFO);\n\n    // Set simulation time\n    simulationHelper->SetSimulationTime(Seconds(11));\n\n    /// Remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    /// Create satellite helper with given scenario default=simple\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario(satScenario);\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(3.0),\n        Seconds(5.1),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(7.0),\n        Seconds(9.1),\n        Seconds(0));\n\n    NS_LOG_INFO(\"--- Trace-input-interference-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-trace-input-rx-power-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-trace-input-rx-power-example.cc\n * \\ingroup satellite\n *\n * \\brief  Trace input Rx power example application based on CBR example for satellite network.\n *         Interval, packet size and test scenario can be given in command line as user argument.\n *         To see help for user arguments, execute the command\n *\n *         ./waf --run \"trace-input-rx-power-example --PrintHelp\"\n *\n *         This example application sends first packets from GW connected user\n *         to UT connected users and after that from UT connected user to GW connected\n *         user.\n *\n *         This example uses the following trace for input:\n *         - rx power density trace\n *\n *         The input folder is:\n *         {NS-3-root-folder}/contrib/satellite/data/rxpowertraces/input\n *\n *         The input data files must be available in the folder stated above for the example\n *         program to read, otherwise the program will fail. Trace output example can be\n *         used to produce the required trace files if these are missing.\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-trace-input-rx-power-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t packetSize = 512;\n    std::string interval = \"1s\";\n    std::string scenario = \"simple\";\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n    std::string simulationName = \"example-trace-input-rx-power\";\n    auto simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    /// Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s)\", interval);\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full\", scenario);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Enable Rx power density input trace\n    Config::SetDefault(\"ns3::SatChannel::RxPowerCalculationMode\",\n                       EnumValue(SatEnums::RX_PWR_INPUT_TRACE));\n\n    /// Set simulation output details\n    simulationHelper->SetOutputTag(scenario);\n\n    Singleton<SatIdMapper>::Get()->EnableMapPrint(true);\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    /// Enable info logs\n    LogComponentEnable(\"CbrApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"sat-trace-input-rx-power-example\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"SatInputFileStreamTimeDoubleContainer\", LOG_LEVEL_INFO);\n\n    // Set simulation time\n    simulationHelper->SetSimulationTime(Seconds(11));\n\n    /// Remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario(satScenario);\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(3.0),\n        Seconds(5.1),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(7.0),\n        Seconds(9.1),\n        Seconds(0));\n\n    NS_LOG_INFO(\"--- Trace-input-rx-power-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-trace-output-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Frans Laakso <frans.laakso@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-trace-output-example.cc\n * \\ingroup satellite\n *\n * \\brief  Trace output example application based on CBR example for satellite network.\n *         Interval, packet size and test scenario can be given in command line as user argument.\n *         To see help for user arguments, execute the command\n *\n *         ./waf --run \"trace-output-example --PrintHelp\"\n *\n *         This example application sends first packets from GW connected user\n *         to UT connected users and after that from UT connected user to GW connected\n *         user.\n *\n *         This example produces the following traces:\n *         - interference density trace\n *         - rx power density trace\n *         - fading trace\n *         - composite SINR\n *\n *         The output folder is:\n *         {NS-3-root-folder}/contrib/satellite/data/sims/example-trace-output/{scenario}\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-trace-output-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    uint32_t packetSize = 512;\n    std::string interval = \"1s\";\n    std::string scenario = \"simple\";\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n    std::string simulationName = \"example-trace-output\";\n    auto simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    /// Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"packetSize\", \"Size of constant packet (bytes)\", packetSize);\n    cmd.AddValue(\"interval\", \"Interval to sent packets in seconds, (e.g. (1s)\", interval);\n    cmd.AddValue(\"scenario\", \"Test scenario to use. (simple, larger or full\", scenario);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    /// Enable Rx power calculation & Rx power density output trace\n    Config::SetDefault(\"ns3::SatChannel::RxPowerCalculationMode\",\n                       EnumValue(SatEnums::RX_PWR_CALCULATION));\n    Config::SetDefault(\"ns3::SatChannel::EnableRxPowerOutputTrace\", BooleanValue(true));\n\n    /// Enable Markov fading calculation & fading output trace\n    Config::SetDefault(\"ns3::SatBeamHelper::FadingModel\", EnumValue(SatEnums::FADING_MARKOV));\n    Config::SetDefault(\"ns3::SatChannel::EnableFadingOutputTrace\", BooleanValue(true));\n\n    /// Enable per packet interference & interference density output trace\n    Config::SetDefault(\"ns3::SatGwHelper::DaRtnLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::DaRtnLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatOrbiterHelper::DaFwdLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatUtHelper::DaFwdLinkInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableIntfOutputTrace\", BooleanValue(true));\n\n    /// Enable composite SINR output trace\n    Config::SetDefault(\"ns3::SatPhyRxCarrier::EnableCompositeSinrOutputTrace\", BooleanValue(true));\n\n    /// Set simulation output details\n    simulationHelper->SetOutputTag(scenario);\n\n    /// Disable figure output\n    // Singleton<SatFadingOutputTraceContainer>::Get ()->EnableFigureOutput (false);\n    // Singleton<SatInterferenceOutputTraceContainer>::Get ()->EnableFigureOutput (false);\n    // Singleton<SatRxPowerOutputTraceContainer>::Get ()->EnableFigureOutput (false);\n    // Singleton<SatCompositeSinrOutputTraceContainer>::Get ()->EnableFigureOutput (false);\n\n    /// Enable the printing of ID mapper trace IDs\n    Singleton<SatIdMapper>::Get()->EnableMapPrint(true);\n\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    /// Enable info logs\n    LogComponentEnable(\"CbrApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"sat-trace-output-example\", LOG_LEVEL_INFO);\n\n    // Set simulation time\n    simulationHelper->SetSimulationTime(Seconds(11));\n\n    /// Remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    // Creating the reference system.\n    simulationHelper->CreateSatScenario(satScenario);\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::FWD_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(3.0),\n        Seconds(5.1),\n        Seconds(0));\n\n    simulationHelper->GetTrafficHelper()->AddCbrTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        Time(interval),\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        Seconds(7.0),\n        Seconds(9.1),\n        Seconds(0));\n\n    NS_LOG_INFO(\"--- Trace-output-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  PacketSize: \" << packetSize);\n    NS_LOG_INFO(\"  Interval: \" << interval);\n    NS_LOG_INFO(\"  \");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-training-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Sami Rantanen <sami.rantanen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-training-example.cc\n * \\ingroup satellite\n *\n * \\brief Simulation script to be utilized in SNS3 training. The script illustrates\n * the simulation script process starting from command line arguments to running the\n * actual simulation.\n *\n * int main (int argc, char *argv[])\n * {\n *   // Set default attribute values\n *   // Parse command-line arguments\n *   // Configure the topology; nodes, channels, devices, mobility\n *   // Add (Internet) stack to nodes\n *   // Configure IP addressing and routing\n *   // Add and configure applications\n *   // Configure tracing\n *   // Run simulation\n * }\n *\n * execute command -> ./waf --run \"sat-training-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-training-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    // Enabling logging in this program\n    LogComponentEnable(\"sat-training-example\", LOG_LEVEL_INFO);\n\n    NS_LOG_INFO(\"--- sat-training-example ---\");\n\n    /**\n     * --------------------------------------\n     * Initialize simulation script variables\n     * --------------------------------------\n     */\n    uint32_t endUsersPerUt(1);\n    uint32_t utsPerBeam(1);\n    double simDuration(10.0); // in seconds\n\n    // All the co-channel beams enabled for user link\n    // frequency color 1\n    std::set<uint32_t> coChannelBeams = {1, 3, 5, 7, 9, 22, 24, 26, 28, 30, 44, 46, 48, 50, 59, 61};\n\n    /**\n     * Create simulation helper\n     */\n    std::string simulationName = \"example-training\";\n    auto simulationHelper = CreateObject<SimulationHelper>(simulationName);\n\n    // Find the input xml file in case example is run from other than ns-3 root directory\n    std::string pathToFile = Singleton<SatEnvVariables>::Get()->LocateFile(\n        \"contrib/satellite/examples/training-input-attributes.xml\");\n\n    /**\n     * ----------------------------------------------------------------\n     * Read the command line arguments. Note, that this allows the user\n     * to change also the ns3 attributes from command line.\n     * ----------------------------------------------------------------\n     */\n    CommandLine cmd;\n    cmd.AddValue(\"utsPerBeam\", \"Number of UTs per spot-beam\", utsPerBeam);\n    cmd.AddValue(\"simDurationInSeconds\", \"Simulation duration in seconds\", simDuration);\n    simulationHelper->AddDefaultUiArguments(cmd, pathToFile);\n    cmd.Parse(argc, argv);\n\n    /**\n     * ---------------------------------------------------\n     * Read the default attributes from XML attribute file\n     * ---------------------------------------------------\n     */\n    NS_LOG_INFO(\"Reading the XML input: training-input-attributes.xml\");\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(pathToFile));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Load\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    ConfigStore inputConfig;\n    inputConfig.ConfigureDefaults();\n\n    /**\n     * -----------------------------------------------\n     * Overwrite some attribute values for this script\n     * -----------------------------------------------\n     */\n\n    // Enable RBDC for BE\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_ConstantAssignmentProvided\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_RbdcAllowed\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_MinimumServiceRate\",\n                       UintegerValue(40));\n    Config::SetDefault(\"ns3::SatLowerLayerServiceConf::DaService3_VolumeAllowed\",\n                       BooleanValue(false));\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotsEnabled\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatBeamScheduler::ControlSlotInterval\", TimeValue(Seconds(1)));\n\n    // Tune the superframe configuration\n    Config::SetDefault(\"ns3::SatSuperframeConf0::FrameCount\", UintegerValue(3));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame0_AllocatedBandwidthHz\", DoubleValue(5e+06));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame1_AllocatedBandwidthHz\", DoubleValue(10e+06));\n    Config::SetDefault(\"ns3::SatSuperframeConf0::Frame2_AllocatedBandwidthHz\", DoubleValue(10e+06));\n\n    // Enable traces\n    Config::SetDefault(\"ns3::SatChannel::EnableRxPowerOutputTrace\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatChannel::EnableFadingOutputTrace\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatPhyRxCarrier::EnableCompositeSinrOutputTrace\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableIntfOutputTrace\", BooleanValue(true));\n\n    Singleton<SatFadingOutputTraceContainer>::Get()->EnableFigureOutput(false);\n    Singleton<SatInterferenceOutputTraceContainer>::Get()->EnableFigureOutput(false);\n    Singleton<SatRxPowerOutputTraceContainer>::Get()->EnableFigureOutput(false);\n    Singleton<SatCompositeSinrOutputTraceContainer>::Get()->EnableFigureOutput(false);\n\n    // Enable creation traces\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n\n    // Enable packet traces\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    /**\n     * --------------------------------------------------------------------\n     * Create satellite system by the usage of satellite helper structures:\n     * - simulationHelper->CreateSatScenario (SatHelper::SIMPLE)\n     * --------------------------------------------------------------------\n     */\n    NS_LOG_INFO(\"Creating the satellite scenario\");\n    // Each beam will have 'utsPerBeam' user terminals and 'endUsersPerUt'\n    // end users per UT. Note, that this allows also different configurations\n    // per spot-beam.\n    simulationHelper->SetUserCountPerUt(endUsersPerUt);\n    simulationHelper->SetUtCountPerBeam(utsPerBeam);\n    simulationHelper->SetBeamSet(coChannelBeams);\n    simulationHelper->SetSimulationTime(simDuration);\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    /**\n     * --------------------------------------------------------\n     * Configure end user applications.\n     * In the training example, the users are configured on-off\n     * application in return link. In addition, e.g. HTTP, NRTV\n     * and CBR traffic models are supported.\n     */\n\n    NS_LOG_INFO(\"Configuring the on-off application!\");\n\n    uint32_t packetSize(1280); // in bytes\n    DataRate dataRate(128000); // in bps\n\n    // The application start time is varied to avoid the situation\n    // in the beginning that all applications start at the same time.\n    Time appStartTime(MilliSeconds(100));\n\n    simulationHelper->GetTrafficHelper()->AddOnOffTraffic(\n        SatTrafficHelper::RTN_LINK,\n        SatTrafficHelper::UDP,\n        dataRate,\n        packetSize,\n        NodeContainer(Singleton<SatTopology>::Get()->GetGwUserNode(0)),\n        Singleton<SatTopology>::Get()->GetUtUserNodes(),\n        \"ns3::ExponentialRandomVariable[Mean=1.0|Bound=0.0]\",\n        \"ns3::ExponentialRandomVariable[Mean=1.0|Bound=0.0]\",\n        appStartTime,\n        Seconds(simDuration + 1),\n        MilliSeconds(25));\n\n    /**\n     * -----------------\n     * Set-up statistics\n     * -----------------\n     */\n    NS_LOG_INFO(\"Setting up statistics\");\n\n    // SatStatsHelperContainer is the interface for satellite related\n    // statistics configuration.\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    // Delay\n    s->AddGlobalRtnAppDelay(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalRtnAppDelay(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddAverageUtUserRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddAverageBeamRtnAppDelay(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    // Composite SINR\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    // Throughput\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddAverageUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerUtUserRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerBeamRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddPerGwRtnAppThroughput(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    /**\n     * --------------------------------\n     * Store attributes into XML output\n     * --------------------------------\n     */\n\n    NS_LOG_INFO(\"Storing the used attributes to XML file: training-output-attributes-ut-\"\n                << utsPerBeam << \".xml\");\n\n    // std::stringstream filename;\n    // filename << \"training-output-attributes-ut\" << utsPerBeam << \".xml\";\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (filename.str ()));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n     * --------------\n     * Run simulation\n     * --------------\n     */\n    NS_LOG_INFO(\"Running network simulator 3\");\n\n    simulationHelper->RunSimulation();\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-tutorial-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Jani Puttonen <jani.puttonen@magister.fi>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-tutorial-example.cc\n * \\ingroup satellite\n *\n * \\brief  Tutorial example application guides how to build up different scenarios of satellite\n * network. It also guides how to configure the satellite network e.g. modifying attributes.\n *         Interval, packet size and test scenario can be given\n *         in command line as user argument.\n *         To see help for user arguments:\n *         execute command -> ./waf --run \"sat-tutorial-example --PrintHelp\"\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-tutorial-example\");\n\nint\nmain(int argc, char* argv[])\n{\n    SatHelper::PreDefinedScenario_t satScenario = SatHelper::SIMPLE;\n    std::string scenario = \"Simple\";\n\n    // Create simulation helper\n    auto simulationHelper = CreateObject<SimulationHelper>(\"example-tutorial\");\n\n    // Enable creation traces\n    Config::SetDefault(\"ns3::SatHelper::ScenarioCreationTraceEnabled\", BooleanValue(true));\n\n    // Enable packet traces (to file PacketTrace.log).\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    /*****************************************************************************\n     'To Select super frame configuration, Option 2'\n     -- Start --                                                                */\n\n    /// Set simulation output details\n    Config::SetDefault(\"ns3::SatEnvVariables::SimulationTag\", StringValue(scenario));\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n\n    //  std::string inputFileNameWithPath = Singleton<SatEnvVariables>::Get ()->LocateDirectory\n    //  (\"contrib/satellite/examples\") + \"/sat-tutorial-input.xml\";\n    //\n    //  Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (inputFileNameWithPath));\n    //  Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Load\"));\n    //  Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    //  ConfigStore inputConfig;\n    //  inputConfig.ConfigureDefaults ();\n    /**\n    -- End --\n    'To Select super frame configuration, Option 2'\n    ******************************************************************************/\n\n    /******************************************************************************\n      Read command line arguments\n      -- Start --                                                                */\n\n    CommandLine cmd;\n    cmd.AddValue(\"scenario\", \"Scenario to be created\", scenario);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n    /**\n  -- End --\n  Read command line arguments\n  ******************************************************************************/\n\n    /*****************************************************************************\n      Create helper and simulation scenario\n      -- Start --                                                                */\n\n    // select simulation scenario to use\n    if (scenario == \"larger\")\n    {\n        satScenario = SatHelper::LARGER;\n    }\n    else if (scenario == \"full\")\n    {\n        satScenario = SatHelper::FULL;\n    }\n\n    simulationHelper->SetOutputTag(scenario);\n    simulationHelper->SetSimulationTime(Seconds(11));\n\n    // enable info logs\n    LogComponentEnable(\"CbrApplication\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"PacketSink\", LOG_LEVEL_INFO);\n    LogComponentEnable(\"sat-tutorial-example\", LOG_LEVEL_INFO);\n\n    // remove next line from comments to run real time simulation\n    // GlobalValue::Bind (\"SimulatorImplementationType\", StringValue\n    // (\"ns3::RealtimeSimulatorImpl\"));\n\n    /*****************************************************************************\n       'To Select super frame configuration, Option 1'\n       -- Start --                                                                */\n\n    //    Config::SetDefault (\"ns3::SatConf::SuperFrameConfForSeq0\", EnumValue\n    //    (SatSuperframeConf::CONFIG_TYPE_2)); Config::SetDefault\n    //    (\"ns3::SatConf::SuperFrameConfForSeq0\", StringValue (\"Configuration_2\"));\n\n    /**\n  -- End --\n  'To Select super frame configuration, Option 1'\n  ******************************************************************************/\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    Ptr<SatHelper> helper = simulationHelper->CreateSatScenario(satScenario);\n    /**\n  -- End --\n  Create helper and simulation scenario\n  ******************************************************************************/\n\n    /*****************************************************************************\n      Manually creating an installing application (users) to satellite network.\n      Note that you may simply call SimulationHelper::Install TrafficModel when\n      using all nodes.\n      -- Start --\n                                                                      */\n    // for getting UT users\n    NodeContainer utUsers;\n\n    // in full scenario get given beam UTs and use first UT's users\n    // other scenarios get all UT users.\n    if (scenario == \"full\")\n    {\n        NodeContainer uts = helper->GetBeamHelper()->GetUtNodes(0, 1);\n        utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes(uts.Get(0));\n    }\n    else\n    {\n        utUsers = Singleton<SatTopology>::Get()->GetUtUserNodes();\n    }\n\n    // get GW users\n    NodeContainer gwUsers = Singleton<SatTopology>::Get()->GetGwUserNodes();\n\n    uint16_t port = 9;\n\n    // create and install applications on GW user\n    PacketSinkHelper sinkHelper(\"ns3::UdpSocketFactory\",\n                                InetSocketAddress(helper->GetUserAddress(gwUsers.Get(0)), port));\n    CbrHelper cbrHelper(\"ns3::UdpSocketFactory\",\n                        InetSocketAddress(helper->GetUserAddress(utUsers.Get(0)), port));\n\n    // install sink to receive packets from UT\n    ApplicationContainer gwSink = sinkHelper.Install(gwUsers.Get(0));\n    gwSink.Start(Seconds(1.0));\n    gwSink.Stop(Seconds(10.0));\n\n    // install CBR to send packets to UT\n    ApplicationContainer gwCbr = cbrHelper.Install(gwUsers.Get(0));\n    gwCbr.Start(Seconds(1.0));\n    gwCbr.Stop(Seconds(2.1));\n\n    // create applications on UT user\n    sinkHelper.SetAttribute(\n        \"Local\",\n        AddressValue(Address(InetSocketAddress(helper->GetUserAddress(utUsers.Get(0)), port))));\n    cbrHelper.SetAttribute(\n        \"Remote\",\n        AddressValue(Address(InetSocketAddress(helper->GetUserAddress(gwUsers.Get(0)), port))));\n\n    // install sink to receive packets from GW\n    ApplicationContainer utSink = sinkHelper.Install(utUsers.Get(0));\n    utSink.Start(Seconds(1.0));\n    utSink.Stop(Seconds(10.0));\n\n    // install CBR to send packets to GW\n    ApplicationContainer utCbr = cbrHelper.Install(utUsers.Get(0));\n    utCbr.Start(Seconds(7.0));\n    utCbr.Stop(Seconds(9.1));\n    /**\n  -- End --\n  Creating and installing application (users) to satellite network\n  ******************************************************************************/\n\n    NS_LOG_INFO(\"--- Tutorial-example ---\");\n    NS_LOG_INFO(\"  Scenario used: \" << scenario);\n    NS_LOG_INFO(\"  \");\n\n    /*****************************************************************************\n     Store set attribute values to XML output file\n     -- Start --                                                                */\n\n    // Config::SetDefault (\"ns3::ConfigStore::Filename\", StringValue (\"sat-tutorial-output.xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::FileFormat\", StringValue (\"Xml\"));\n    // Config::SetDefault (\"ns3::ConfigStore::Mode\", StringValue (\"Save\"));\n    // ConfigStore outputConfig;\n    // outputConfig.ConfigureDefaults ();\n\n    /**\n    -- End --\n    Store set attribute values to XML output file\n    *****************************************************************************/\n\n    /*****************************************************************************\n     Run, stop and destroy simulation\n     -- Start --                                                                */\n\n    simulationHelper->RunSimulation();\n    /**\n  -- End --\n  Run, stop and destroy simulation\n  ******************************************************************************/\n\n    return 0;\n}\n"
    },
    {
      "file_path": "examples/sat-vhts-example.cc",
      "code": "/* -*- Mode:C++; c-file-style:\"gnu\"; indent-tabs-mode:nil; -*- */\n/*\n * Copyright (c) 2014 Magister Solutions\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License version 2 as\n * published by the Free Software Foundation;\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n *\n * Author: Bastien Tauran <bastien.tauran@viveris.fr>\n *\n */\n\n#include \"ns3/applications-module.h\"\n#include \"ns3/config-store-module.h\"\n#include \"ns3/core-module.h\"\n#include \"ns3/internet-module.h\"\n#include \"ns3/network-module.h\"\n#include \"ns3/satellite-module.h\"\n#include \"ns3/traffic-module.h\"\n\nusing namespace ns3;\n\n/**\n * \\file sat-vhts-example.cc\n * \\ingroup satellite\n *\n * \\brief This file allows to create a VHTS scenario\n */\n\nNS_LOG_COMPONENT_DEFINE(\"sat-vhts-example\");\n\n// TODO confirm that\nvoid\nEnableRA(std::string raModel, bool dynamicLoadControl)\n{\n    // Enable Random Access with CRDSA or MARSALA\n    if (raModel == \"CRDSA\")\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_CRDSA));\n    }\n    else if (raModel == \"MARSALA\")\n    {\n        Config::SetDefault(\"ns3::SatBeamHelper::RandomAccessModel\",\n                           EnumValue(SatEnums::RA_MODEL_MARSALA));\n    }\n    else\n    {\n        NS_FATAL_ERROR(\"Incorrect RA model\");\n    }\n\n    // Set Random Access interference model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaInterferenceModel\",\n                       EnumValue(SatPhyRxCarrierConf::IF_PER_PACKET));\n\n    // Set Random Access collision model\n    Config::SetDefault(\"ns3::SatBeamHelper::RaCollisionModel\",\n                       EnumValue(SatPhyRxCarrierConf::RA_COLLISION_CHECK_AGAINST_SINR));\n\n    // Set dynamic load control parameters\n    Config::SetDefault(\"ns3::SatPhyRxCarrierConf::EnableRandomAccessDynamicLoadControl\",\n                       BooleanValue(dynamicLoadControl));\n    Config::SetDefault(\n        \"ns3::SatPhyRxCarrierConf::RandomAccessAverageNormalizedOfferedLoadMeasurementWindowSize\",\n        UintegerValue(10));\n}\n\nstatic void\nSatCourseChange(std::string context, Ptr<const SatMobilityModel> position)\n{\n    auto tracedPosition = DynamicCast<const SatTracedMobilityModel>(position);\n    NS_ASSERT_MSG(tracedPosition != nullptr, \"Course changed for a non-mobile UT\");\n}\n\nint\nmain(int argc, char* argv[])\n{\n    // Variables\n    std::string beams = \"8\";\n    uint32_t nbGw = 1;\n    uint32_t nbUtsPerBeam = 10;\n    uint32_t nbEndUsersPerUt = 1;\n\n    Time appStartTime = Seconds(0.001);\n    Time simLength = Seconds(60.0);\n\n    std::string raModel = \"CRDSA\";\n    bool dynamicLoadControl = true;\n    bool utMobility = false;\n    std::string mobilityPath = \"contrib/satellite/data/utpositions/mobiles/scenario0/trajectory\";\n    std::string burstLengthStr = \"ShortBurst\";\n    SatEnums::SatWaveFormBurstLength_t burstLength = SatEnums::SHORT_BURST;\n\n    uint32_t superFrameConfForSeq0Int = 0;\n    SatSuperframeConf::SuperFrameConfiguration_t superFrameConfForSeq0 =\n        SatSuperframeConf::SUPER_FRAME_CONFIG_0;\n    uint32_t frameConfigTypeInt = 0;\n    SatSuperframeConf::ConfigType_t frameConfigType = SatSuperframeConf::CONFIG_TYPE_0;\n\n    std::string modcodsUsed =\n        \"QPSK_1_TO_2 QPSK_3_TO_5 QPSK_2_TO_3 QPSK_3_TO_4 QPSK_4_TO_5 QPSK_5_TO_6 QPSK_8_TO_9 \"\n        \"QPSK_9_TO_10 \"\n        \"8PSK_3_TO_5 8PSK_2_TO_3 8PSK_3_TO_4 8PSK_5_TO_6 8PSK_8_TO_9 8PSK_9_TO_10 \"\n        \"16APSK_2_TO_3 16APSK_3_TO_4 16APSK_4_TO_5 16APSK_5_TO_6 16APSK_8_TO_9 16APSK_9_TO_10 \"\n        \"32APSK_3_TO_4 32APSK_4_TO_5 32APSK_5_TO_6 32APSK_8_TO_9\";\n\n    Ptr<SimulationHelper> simulationHelper = CreateObject<SimulationHelper>(\"sat-vhts-example\");\n\n    // Read command line parameters given by user\n    CommandLine cmd;\n    cmd.AddValue(\"Beams\", \"Ids of beams used (each separated by _)\", beams);\n    cmd.AddValue(\"NbGw\", \"Number of GWs\", nbGw);\n    cmd.AddValue(\"NbUtsPerBeam\", \"Number of UTs per spot-beam\", nbUtsPerBeam);\n    cmd.AddValue(\"NbEndUsersPerUt\", \"Number of end users per UT\", nbEndUsersPerUt);\n    cmd.AddValue(\"AppStartTime\", \"Applications start time (in seconds, or add unit)\", appStartTime);\n    cmd.AddValue(\"SimLength\", \"Simulation length (in seconds, or add unit)\", simLength);\n    cmd.AddValue(\"RaModel\", \"Random Access model chosen (CRDSA or MARSALA)\", raModel);\n    cmd.AddValue(\"DynamicLoadControl\", \"Set true to use dynamic load control\", dynamicLoadControl);\n    cmd.AddValue(\"UtMobility\", \"Set true to use UT mobility\", utMobility);\n    cmd.AddValue(\"mobilityPath\",\n                 \"Path to the mobility file\",\n                 mobilityPath); // TODO works if only one UT ?\n    cmd.AddValue(\"BurstLength\",\n                 \"Burst length (can be ShortBurst, LongBurst or ShortAndLongBurst)\",\n                 burstLengthStr);\n    cmd.AddValue(\"SuperFrameConfForSeq0\",\n                 \"Super frame configuration used for super frame sequence 0\",\n                 superFrameConfForSeq0Int);\n    cmd.AddValue(\"FrameConfigType\",\n                 \"The frame configuration type used for super frame\",\n                 frameConfigTypeInt);\n    simulationHelper->AddDefaultUiArguments(cmd);\n    cmd.Parse(argc, argv);\n\n    std::replace(beams.begin(), beams.end(), '_', ' ');\n\n    // Initialize enum values\n    if (burstLengthStr == \"ShortBurst\")\n    {\n        burstLength = SatEnums::SHORT_BURST;\n    }\n    else if (burstLengthStr == \"LongBurst\")\n    {\n        burstLength = SatEnums::LONG_BURST;\n    }\n    else if (burstLengthStr == \"ShortAndLongBurst\")\n    {\n        burstLength = SatEnums::SHORT_AND_LONG_BURST;\n    }\n    else\n    {\n        NS_FATAL_ERROR(\"Incorrect burst size\");\n    }\n\n    switch (superFrameConfForSeq0Int)\n    {\n    case 0:\n        superFrameConfForSeq0 = SatSuperframeConf::SUPER_FRAME_CONFIG_0;\n        break;\n    case 1:\n        superFrameConfForSeq0 = SatSuperframeConf::SUPER_FRAME_CONFIG_1;\n        break;\n    case 2:\n        superFrameConfForSeq0 = SatSuperframeConf::SUPER_FRAME_CONFIG_2;\n        break;\n    case 3:\n        superFrameConfForSeq0 = SatSuperframeConf::SUPER_FRAME_CONFIG_3;\n        break;\n    default:\n        NS_FATAL_ERROR(\"Incorrect super frame conf\");\n    }\n\n    switch (frameConfigTypeInt)\n    {\n    case 0:\n        frameConfigType = SatSuperframeConf::CONFIG_TYPE_0;\n        break;\n    case 1:\n        frameConfigType = SatSuperframeConf::CONFIG_TYPE_1;\n        break;\n    case 2:\n        frameConfigType = SatSuperframeConf::CONFIG_TYPE_2;\n        break;\n    case 3:\n        frameConfigType = SatSuperframeConf::CONFIG_TYPE_3;\n        break;\n    default:\n        NS_FATAL_ERROR(\"Incorrect frame type\");\n    }\n\n    Config::SetDefault(\"ns3::SatEnvVariables::EnableSimulationOutputOverwrite\", BooleanValue(true));\n    Config::SetDefault(\"ns3::SatHelper::PacketTraceEnabled\", BooleanValue(true));\n\n    /*\n     * FWD link\n     */\n    // Set defaults\n    Config::SetDefault(\"ns3::SatConf::FwdUserLinkBandwidth\", DoubleValue(2e+09));\n    Config::SetDefault(\"ns3::SatConf::FwdFeederLinkBandwidth\", DoubleValue(8e+09));\n    Config::SetDefault(\"ns3::SatConf::FwdCarrierAllocatedBandwidth\", DoubleValue(500e+06));\n    Config::SetDefault(\"ns3::SatConf::FwdCarrierRollOff\", DoubleValue(0.05));\n\n    // ModCods selection\n    Config::SetDefault(\"ns3::SatBeamHelper::DvbVersion\", StringValue(\"DVB_S2\"));\n    Config::SetDefault(\"ns3::SatBbFrameConf::ModCodsUsed\", StringValue(modcodsUsed));\n    Config::SetDefault(\"ns3::SatBbFrameConf::DefaultModCod\", StringValue(\"QPSK_1_TO_2\"));\n\n    /*\n     * RTN link\n     */\n    // Set defaults\n    Config::SetDefault(\"ns3::SatConf::RtnUserLinkBandwidth\", DoubleValue(500e+06));\n    Config::SetDefault(\"ns3::SatConf::RtnFeederLinkBandwidth\", DoubleValue(2e+09));\n    Config::SetDefault(\"ns3::SatWaveformConf::BurstLength\", EnumValue(burstLength));\n\n    EnableRA(raModel, dynamicLoadControl);\n\n    Config::SetDefault(\"ns3::SatConf::SuperFrameConfForSeq0\", EnumValue(superFrameConfForSeq0));\n    switch (superFrameConfForSeq0)\n    {\n    case SatSuperframeConf::SUPER_FRAME_CONFIG_0:\n        Config::SetDefault(\"ns3::SatSuperframeConf0::FrameConfigType\", EnumValue(frameConfigType));\n        break;\n    case SatSuperframeConf::SUPER_FRAME_CONFIG_1:\n        Config::SetDefault(\"ns3::SatSuperframeConf1::FrameConfigType\", EnumValue(frameConfigType));\n        break;\n    case SatSuperframeConf::SUPER_FRAME_CONFIG_2:\n        Config::SetDefault(\"ns3::SatSuperframeConf2::FrameConfigType\", EnumValue(frameConfigType));\n        break;\n    case SatSuperframeConf::SUPER_FRAME_CONFIG_3:\n        Config::SetDefault(\"ns3::SatSuperframeConf3::FrameConfigType\", EnumValue(frameConfigType));\n        break;\n    default:\n        NS_FATAL_ERROR(\"Impossible to reach here\");\n    }\n\n    /*\n     * Traffics\n     */\n    simulationHelper->SetSimulationTime(simLength);\n\n    simulationHelper->SetGwUserCount(nbGw);\n    simulationHelper->SetUtCountPerBeam(nbUtsPerBeam);\n    simulationHelper->SetUserCountPerUt(nbEndUsersPerUt);\n    simulationHelper->SetBeams(beams);\n\n    simulationHelper->LoadScenario(\"geo-33E\");\n\n    simulationHelper->CreateSatScenario();\n\n    Ptr<SatHelper> satHelper = simulationHelper->GetSatelliteHelper();\n    Ptr<SatTrafficHelper> trafficHelper = simulationHelper->GetTrafficHelper();\n    trafficHelper->AddVoipTraffic(SatTrafficHelper::FWD_LINK,\n                                  SatTrafficHelper::G_711_1,\n                                  Singleton<SatTopology>::Get()->GetGwUserNodes(),\n                                  Singleton<SatTopology>::Get()->GetUtUserNodes(),\n                                  appStartTime,\n                                  simLength,\n                                  Seconds(0.001));\n    trafficHelper->AddHttpTraffic(SatTrafficHelper::FWD_LINK,\n                                  Singleton<SatTopology>::Get()->GetGwUserNodes(),\n                                  Singleton<SatTopology>::Get()->GetUtUserNodes(),\n                                  appStartTime,\n                                  simLength,\n                                  Seconds(0.001));\n\n    // Link results\n    // Uncomment to use custom C/N0 traces or constants for some links\n    /*\n    Ptr<SatCnoHelper> satCnoHelper = simulationHelper->GetCnoHelper ();\n    satCnoHelper->UseTracesForDefault (false);\n    for (uint32_t i = 0; i < Singleton<SatTopology>::Get()->GetNUtNodes(); i++)\n      {\n        satCnoHelper->SetUtNodeCnoFile (Singleton<SatTopology>::Get()->GetUtNode(i),\n    SatEnums::FORWARD_USER_CH, \"path_to_cno_file\"); // For input trace file\n        // or\n        satCnoHelper->SetGwNodeCno (Singleton<SatTopology>::Get()->GetUtNode(i),\n    SatEnums::FORWARD_USER_CH, 1e10); // For constant value\n      }\n    */\n\n    // Mobility\n    if (utMobility)\n    {\n        Ptr<SatMobilityModel> satMobility =\n            Singleton<SatTopology>::Get()->GetOrbiterNode(0)->GetObject<SatMobilityModel>();\n        Ptr<Node> node = satHelper->LoadMobileUtFromFile(0, mobilityPath);\n        node->GetObject<SatMobilityModel>()->TraceConnect(\"SatCourseChange\",\n                                                          \"BeamTracer\",\n                                                          MakeCallback(SatCourseChange));\n    }\n\n    /*\n     * Outputs\n     * Note: some outputs are automatically generated by traffic helper\n     */\n    simulationHelper->EnableProgressLogs();\n\n    Config::SetDefault(\"ns3::ConfigStore::Filename\", StringValue(\"output-attributes.xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::FileFormat\", StringValue(\"Xml\"));\n    Config::SetDefault(\"ns3::ConfigStore::Mode\", StringValue(\"Save\"));\n    ConfigStore outputConfig;\n    outputConfig.ConfigureDefaults();\n\n    Ptr<SatStatsHelperContainer> s = simulationHelper->GetStatisticsContainer();\n\n    // Capacity request\n    s->AddGlobalCapacityRequest(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerGwCapacityRequest(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamCapacityRequest(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtCapacityRequest(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Granted resources\n    s->AddGlobalResourcesGranted(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalResourcesGranted(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalResourcesGranted(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamResourcesGranted(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerUtResourcesGranted(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    // Link SINR\n    s->AddGlobalFwdFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalFwdUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnUserLinkSinr(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    // SINR\n    s->AddGlobalFwdCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalFwdCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerUtFwdCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtFwdCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddGlobalRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerBeamRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n    s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_FILE);\n    s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddPerUtRtnCompositeSinr(SatStatsHelper::OUTPUT_CDF_PLOT);\n\n    // Link RX Power\n    s->AddGlobalFwdFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalFwdUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCATTER_FILE);\n\n    s->AddGlobalFwdFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalFwdUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnFeederLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n    s->AddGlobalRtnUserLinkRxPower(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    // Frame type usage\n    s->AddGlobalFrameTypeUsage(SatStatsHelper::OUTPUT_SCALAR_FILE);\n\n    if (raModel == \"MARSALA\")\n    {\n        s->AddPerBeamMarsalaCorrelation(SatStatsHelper::OUTPUT_SCALAR_FILE);\n        s->AddPerBeamMarsalaCorrelation(SatStatsHelper::OUTPUT_SCATTER_FILE);\n    }\n\n    simulationHelper->RunSimulation();\n    return 0;\n\n} // end of `int main (int argc, char *argv[])`\n"
    }
  ]
}