{
  "repo_name": "tkn-tub/ns3-gym",
  "github_url": "https://github.com/tkn-tub/ns3-gym",
  "readme": "ns3-gym\n============\n\n[OpenAI Gym](https://gym.openai.com/) is a toolkit for reinforcement learning (RL) widely used in research. The network simulator [ns-3](https://www.nsnam.org/) is the de-facto standard for academic and industry studies in the areas of networking protocols and communication technologies. ns3-gym is a framework that integrates both OpenAI Gym and ns-3 in order to encourage usage of RL in networking research.\n\nInstallation\n============\n\nWe recommend using Linux (e.g. Ubuntu 22 or higher).\n\n1. Install all dependencies required by ns-3.\n```\n# minimal requirements for C++:\napt-get install gcc g++ python3 python3-pip cmake\n```\nCheck [ns-3 requirements](https://www.nsnam.org/docs/tutorial/html/getting-started.html#prerequisites/)\n\n2. Install ZMQ, Protocol Buffers and pkg-config libs:\n```\nsudo apt-get update\napt-get install libzmq5 libzmq3-dev\napt-get install libprotobuf-dev\napt-get install protobuf-compiler\napt-get install pkg-config\n```\n\n3. Download and install ns3\n\n```\nwget https://www.nsnam.org/releases/ns-allinone-3.40.tar.bz2\ntar xf ns-allinone-3.40.tar.bz2\ncd ns-allinone-3.40\n```\n\n4. Clone ns3-gym repository into `contrib` directory and change the branch:\n```\ncd ./ns-3.40/contrib\ngit clone https://github.com/tkn-tub/ns3-gym.git ./opengym\ncd opengym/\ngit checkout app-ns-3.36+\n```\nCheck [working with cmake](https://www.nsnam.org/docs/manual/html/working-with-cmake.html)\n\nIt is important to use the `opengym` as the name of the ns3-gym app directory. \n\n5. Configure and build ns-3 project:\n```\ncd ../../\n./ns3 configure --enable-examples\n./ns3 build\n```\nNote: Opengym Protocol Buffer messages (C++ and Python) are build during configure.\n\n6. Install ns3gym located in model/ns3gym (Python3 required)\n```\ncd ./contrib/opengym/\n```\n```\npip3 install --user ./model/ns3gym\n```\nor\n```\npython3 -m venv ns3gym-venv\nsource ./ns3gym-venv/bin/activate\npip3 install ./model/ns3gym\n```\n\n7. (Optional) Install all libraries required by your agent (like tensorflow, keras, etc.).\n\n8. Run example:\n```\ncd ./contrib/opengym/examples/opengym/ \n./simple_test.py\n```\n\n9. (Optional) Start ns-3 simulation script and Gym agent separately in two terminals (useful for debugging):\n```\n# Terminal 1\n./ns3 run \"opengym\"\n\n# Terminal 2\ncd ./contrib/opengym/examples/opengym/ \n./test.py --start=0\n```\n\n\nExamples\n========\n\nAll examples can be found [here](./examples/).\n\n## Basic Interface\n\n1. Example Python script. Note, that `gym.make('ns3-v0')` starts ns-3 simulation script located in current working directory.\n```\nimport gym\nimport ns3gym\nimport MyAgent\nfrom ns3gym import ns3env\n\n#env = gym.make('ns3-v0')  <--- causes some errors with the new OpenAI Gym framework, please use ns3env.Ns3Env()\nenv = ns3env.Ns3Env()\nobs = env.reset()\nagent = MyAgent.Agent()\n\nwhile True:\n  action = agent.get_action(obs)\n  obs, reward, done, info = env.step(action)\n\n  if done:\n    break\nenv.close()\n```\n2. Any ns-3 simulation script can be used as a Gym environment. This requires only to instantiate OpenGymInterface and implement the ns3-gym C++ interface consisting of the following functions:\n```\nPtr<OpenGymSpace> GetObservationSpace();\nPtr<OpenGymSpace> GetActionSpace();\nPtr<OpenGymDataContainer> GetObservation();\nfloat GetReward();\nbool GetGameOver();\nstd::string GetExtraInfo();\nbool ExecuteActions(Ptr<OpenGymDataContainer> action);\n```\nNote, that the generic ns3-gym interface allows to observe any variable or parameter in a simulation.\n\nA more detailed description can be found in our [Paper](http://www.tkn.tu-berlin.de/fileadmin/fg112/Papers/2019/gawlowicz19_mswim.pdf).\n\n## Cognitive Radio\nWe consider the problem of radio channel selection in a wireless multi-channel environment, e.g. 802.11 networks with external interference. The objective of the agent is to select for the next time slot a channel free of interference. We consider a simple illustrative example where the external interference follows a periodic pattern, i.e. sweeping over all channels one to four in the same order as shown in the table.\n\n<p align=\"center\">\n<img src=\"doc/figures/interferer-pattern.png\" alt=\"drawing\" width=\"500\"/>\n</p>\n\nWe created such a scenario in ns-3 using existing functionality from ns-3, i.e. interference created using `WaveformGenerator` class and sensing performed using `SpectrumAnalyzer` class.\n\nSuch a periodic interferer can be easily learned by an RL-agent so that based on the current observation of the occupation on each channel in a given time slot the correct channel can be determined for the next time slot avoiding any collision with the interferer.\n\nOur proposed RL mapping is:\n- observation - occupation on each channel in the current time slot, i.e. wideband-sensing,\n- actions - set the channel to be used for the next time slot,\n- reward - +1 in case of no collision with interferer; otherwise -1,\n- gameover - if more than three collisions happened during the last ten time-slots\n\nThe figure below shows the learning performance when using a simple neural network with fully connected input and an output layer.\nWe see that after around 80 episodes the agent is able to perfectly predict the next channel state from the current observation hence avoiding any collision with the interference.\n\nThe full source code of the example can be found [here](./examples/interference-pattern/).\n\n<p align=\"center\">\n<img src=\"doc/figures/cognitive-radio-learning.png\" alt=\"drawing\" width=\"600\"/>\n</p>\n\nNote, that in a more realistic scenario the simple waveform generator in this example can be replaced by a real wireless technology like LTE unlicensed (LTE-U).\n\n\n## RL-TCP\nThe proper RL-TCP agent example is still under development. However, we have already implemented and released two versions (i.e. time and event-based) of an interface allowing to monitor parameters of a TCP instance and control its `Congestion Window` and `Slow Start Threshold` -- see details [here](./examples/rl-tcp/tcp_base.py). Note, that both versions inherits from `TcpCongestionOps` and hence can be used as an argument for `ns3::TcpL4Protocol::SocketType`.\n\nMoreover, using the event-based interface, we already have an example Python Gym agent that implements TCP NewReno and communicates with the ns-3 simulation process using ns3gym -- see [here](./examples/rl-tcp/tcp_newreno.py). The example can be used as a starting point to implement an RL-based TCP congestion control algorithms.\n\nIn order to run it, please execute:\n```\ncd ./contrib/opengym/examples/rl-tcp/\n./test_tcp.py\n```\n\nOr in two terminals:\n```\n# Terminal 1:\n./ns3 run \"rl-tcp --transport_prot=TcpRl\"\n\n# Terminal 2:\ncd ./contrib/opengym/examples/rl-tcp/\n./test_tcp.py --start=0\n```\n\nNote, that our Python TCP NewReno implementation achieves the same number of transmitted packets like the one implemented in ns3 (see the output of ns-3 simulation, i.e. `RxPkts: 5367` in both cases). Please execute the following command to cross-check:\n```\n./ns3 run \"rl-tcp --transport_prot=TcpNewReno\"\n```\n\nContact\n============\n* Piotr Gawlowicz, TU-Berlin, gawlowicz@tkn\n* Anatolij Zubow, TU-Berlin, zubow@tkn\n* tkn = tkn.tu-berlin.de\n\nHow to reference ns3-gym?\n============\n\nPlease use the following bibtex :\n\n```\n@inproceedings{ns3gym,\n  Title = {{ns-3 meets OpenAI Gym: The Playground for Machine Learning in Networking Research}},\n  Author = {Gaw{\\l}owicz, Piotr and Zubow, Anatolij},\n  Booktitle = {{ACM International Conference on Modeling, Analysis and Simulation of Wireless and Mobile Systems (MSWiM)}},\n  Year = {2019},\n  Location = {Miami Beach, USA},\n  Month = {November},\n  Url = {http://www.tkn.tu-berlin.de/fileadmin/fg112/Papers/2019/gawlowicz19_mswim.pdf\n}\n```\n",
  "examples": []
}