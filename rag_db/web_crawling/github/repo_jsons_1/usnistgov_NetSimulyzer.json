{
  "repo_name": "usnistgov/NetSimulyzer",
  "github_url": "https://github.com/usnistgov/NetSimulyzer",
  "readme": "# NetSimulyzer\nA flexible 3D visualizer for displaying, debugging, presenting, and understanding *ns-3* scenarios.\n\n![Application Screenshot](docs/source/_static/application-windows.png)\n\n# Table of Contents\n\n* [About](#about)\n* [Requirements](#requirements)\n* [Download Prebuilt Releases](#download-prebuilt-releases)\n* [Download Pre-Run Examples](#download-pre-run-examples)\n* [Resources](#resources)\n  * [Supported Model Formats](#supported-model-formats)\n  * [Supported Texture Formats](#supported-texture-formats)\n  * [Resource Path](#resource-path)\n* [Controls](#controls)\n  * [Camera](#camera)\n  * [Playback](#playback)\n  * [Chart](#chart)\n* [Building From Source](#building-from-source)\n    * [Linux Packages](#linux-packages)\n    * [macOS (Homebrew) Packages](#macos-homebrew-packages)\n    * [Cloning](#cloning)\n    * [Building](#building)\n    * [CMake Options](#cmake-options)\n    * [Running CMake](#running-cmake)\n    * [Running](#running)\n    * [Building the Documentation](#building-the-documentation)\n* [Academic Attribution](#academic-attribution) \n\n\n# About\nThis is the application which displays *ns-3* scenarios run with\nthe companion *ns-3* module [found here](https://github.com/usnistgov/NetSimulyzer-ns3-module).\n\n# Requirements\n\n## Run Requirements\n* A graphics card supporting OpenGL 3.3\n  * Most integrated GPUs (i.e. Intel/AMD CPU Graphics) should work too\n\n## Build Requirements\n* A C++ 20 compliant compiler\n  * Minimum supported compilers:\n    * GCC 10.5.0\n    * Clang 12.0.0\n* CMake 3.16 or greater\n* A graphics card supporting OpenGL 3.3\n* Qt 6.4\n* Optional: Doxygen\n\n# Download Prebuilt Releases\nDownload prebuilt binaries from the [Releases](https://github.com/usnistgov/NetSimulyzer/releases)\ntab on GitHub.\n\n# Download Pre-Run Examples\nPre-run examples from the [ns-3](https://github.com/usnistgov/NetSimulyzer-ns3-module)\nmodule may be found in the `examples/` directory of the Windows release on the\n[Releases](https://github.com/usnistgov/NetSimulyzer/releases) page.\n\nFor other platforms, the examples are provided in a separate ZIP/TAR files\nalso included on the [Releases](https://github.com/usnistgov/NetSimulyzer/releases) page.\n\n# Resources\nThe application comes with some 3D models, but if you wish to add\ncustom models, check below to see what formats are supported.\n\n## Supported Model Formats\nFor the list of supported formats, see the [assimp wiki](https://github.com/assimp/assimp#supported-file-formats)\n\n## Supported Texture Formats\nAnything supported by [QImage](https://doc.qt.io/qt-5/qimage.html) should work.\nSome more exotic formats may undergo conversion at load time.\nBuild in debug mode to check compatibility\n\n## Resource Path\nWhen the NetSimulyzer is first launched it will attempt to locate\nthe directory where all the bundled assets are located, the `resources/` directory.\n\nBy default, the NetSimulyzer will search from the `resources/` directory the following locations:\n* The directory the application is in\n* One up from the directory the application is in\n* The current working directory\n* One up from the current working directory\n\nIf the NetSimulyzer fails to locate this directory, a prompt will be given, and\nthe user must specify where this directory is.\n\nModels should have the path to the model relative to the root of the resources directory\n(e.g. `models/smartphone.obj`)\n\nTextures will be searched for recursively in the `resources/` directory, and _must have unique names_.\nIf two textures have the same name, it is undefined which one will be selected.\n\nAll searches for textures in models will follow the texture rules above.\n\n# Controls\n\n## Camera\nThe camera may be rotated by clicking and holding the left mouse button on the scene.\n\nThe camera may be moved by horizontally with `W`, `A`, `S`, & `D`,\n vertically with `Z`, & `X` and turned with the `Q`, & `E` keys\n\n`W`: Forward\n\n`A`: Left\n\n`S`: Backward\n\n`D`: Right\n\n`Q`: Turn Left\n\n`E`: Turn Right\n\n`Z`: Up\n\n`X`: Down\n\nThe camera controls may be changed from the 'Camera Settings' option in the 'Camera' menu\n\n## Playback\nThe simulation starts in a paused state, the scene will still render, but time will not advance until it is unpaused.\n\n`P`: Pause/Resume scenario playback.\n\n## Chart\n`Left Mouse` + Move: Move the chart view\n\nScroll Up, `+` or `=`: Zoom In\n  * Hold `Ctrl` (Windows/Linux) or `cmd` (macOS) to zoom horizontally only\n  * Hold `Alt` to zoom vertically only\n\nScroll Down, or `-`: Zoom Out\n  * Hold `Ctrl` (Windows/Linux) or `cmd` (macOS) to zoom horizontally only\n  * Hold `Alt` to zoom vertically only\n\n`R`: Reset Zoom\n\n`Arrow Keys`: Scroll Chart\n\nCurrently, these keys cannot be configured.\n\n# Building From Source\n\n## Linux Packages\nIf you are not building for Linux, then skip this section.\n\nMake sure cmake and Qt are available on your system. The following are the suggested packages for those requirements:\n\nUbuntu:\n* (24.04) `build-essential cmake pkg-config qt6-base-dev libassimp-dev`\n* (22.04) `build-essential cmake pkg-config qt6-base-dev libassimp-dev libgl1-mesa-dev`\n\nArch: `base-devel cmake pkgconf qt6-base assimp`\n\n## macOS Homebrew Packages\nIf you are not building for macOS (or a distro that uses [Homebrew](https://brew.sh/))\nthen skip this section\n\nThe following Homebrew items are required to build/run the NetSimulyzer:\n* `qt@6`\n* `cmake`\n\nThey may be installed with the following command:\n```shell\nbrew install qt@6 cmake\n```\n\n## Cloning\nClone the repository _recursively_ to collect the dependencies as well as the source\n\n```shell\n# Use one of the below commands\n\n# HTTPS (if unsure, use this one)\ngit clone --recursive https://github.com/usnistgov/NetSimulyzer.git\n\n# SSH\ngit clone --recursive git@github.com:usnistgov/NetSimulyzer.git\n```\n\nNote: If you already cloned the project the normal way\nYou may pull the dependencies by running\n\n```shell\ngit submodule update --recursive\n```\n\n## Building\nMove into the project's root directory, and make a new directory called `build` and cd into it\n```shell\nmkdir build\ncd build\n```\n\n### CMake Options\nTo configure the build, any of the below may be passed to CMake with `-D` in the form `cmake -DNAME=VALUE`.\n\nAll of the following are optional\n\n* `ENABLE_DOXYGEN`: Default `False`, set to `True` to build the API docs to the `doxygen/` directory in the build directory\n* `USE_BUNDLED_ASSIMP`: Default `False`, set to `True` to use the bundled Assimp library to build, instead of the OS package.\nIf the OS package is not found, then the bundled version is used anyway.\n\n#### Running CMake\n\n##### Windows/Linux\nRun `cmake` and specify the source directory, build type, and desired build options from above. Then run the build tool.\n```shell\ncmake -DCMAKE_BUILD_TYPE=Release ..\ncmake --build . --parallel\n```\n\n##### macOS (Homebrew Install)\nWhen using Homebrew, it may be necessary\nto specify the location of Qt\nusing the `Qt5_DIR` variable.\nOtherwise, the command to configure is identical to the Windows/Linux\nbuild\n\n```shell\ncmake -DCMAKE_BUILD_TYPE=Release ..\ncmake --build . --parallel\n```\n\n## Running\nAfter building the application may be launched\nfrom the project root directory with the following command:\n```shell\ncd ../\n./build/netsimulyzer\n```\n\n## Building the Documentation\n[Sphinx](https://www.sphinx-doc.org/en/master/) is required to build the documentation.\n\nTo run Sphinx to build the documentation, cd into the `docs` directory\nand run `make [type]` for the type of documentation you wish to build.\n\n```shell\n# From the project root directory\ncd docs\n\n# HTML (Several Pages)\nmake html\n\n# HTML (One Page)\nmake singlehtml\n\n# PDF\nmake latexpdf\n\n# To list other options, just run make\nmake\n```\n\nThe built documentation will now be found in `doc/build/[type]`.\n\n# Academic Attribution\n\nIf you use it for research, please include the following reference in any resulting publication.\n\n```plain\n@inproceedings{blackNetSimulyzer3DNetwork2021,\n  title = {{{NetSimulyzer}}: A {{3D}} Network Simulation Analyzer for Ns-3},\n  shorttitle = {{{NetSimulyzer}}},\n  booktitle = {Proceedings of the {{Workshop}} on Ns-3},\n  author = {Black, Evan and Gamboa, Samantha and Rouil, Richard},\n  date = {2021-06-23},\n  pages = {65--72},\n  publisher = {{ACM}},\n  location = {{Virtual Event USA}},\n  url = {https://dl.acm.org/doi/10.1145/3460797.3460806},\n  eventtitle = {{{WNS3}} 2021: 2021 {{Workshop}} on Ns-3},\n  isbn = {978-1-4503-9034-7},\n  langid = {english}\n}\n```\n",
  "examples": []
}